name: build-docker

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

# docker/build-push-action@v4.1.1
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JULIA_VERSION: 1.9
    permissions: write-all
    timeout-minutes: 300

    steps:
      # Check out code
      - name: Checkout
        uses: actions/checkout@v2
      # This is a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: restore cache
        uses: actions/cache/restore@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: panifie
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Precomp
        uses: docker/build-push-action@v2
        id: precomp
        with:
          context: .
          push: true
          tags: panifie/pingpong-precomp:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          target: pingpong-precomp
      - name: Sysimg
        uses: docker/build-push-action@v2
        id: sysimg
        with:
          context: .
          push: true
          tags: panifie/pingpong-sysimg:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          target: pingpong-sysimg
      - name: Precomp Interactive
        uses: docker/build-push-action@v2
        id: iprecomp
        with:
          context: .
          push: true
          tags: panifie/ipingpong-precomp:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          target: pingpong-precomp-interactive
      - name: Sysimg Interactive
        uses: docker/build-push-action@v2
        id: isysimg
        with:
          context: .
          push: true
          tags: panifie/ipingpong-sysimg:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          target: pingpong-sysimg-interactive
        # This ugly bit is necessary if you don't want your cache to grow forever
        # until it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Save Cache
        uses: actions/cache/save@v3
        id: last_save
        if: always()
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
      - name: Cleanup
        if: always()
        run: |
          gh extension install actions/gh-actions-cache

          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key for $REPO / $BRANCH"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | grep -E 'buildx')
          echo ${{ steps.last_save.outcome }}
          if [ ${{ steps.last_save.outcome }} = 'success' ]; then
            echo "excluding this commit"
            EXCLUDE=${{ github.sha }}
          else
            echo "excluding commit before"
            EXCLUDE=${{ github.event.before }}
          fi
          cacheKeysForPR=$(echo "$cacheKeysForPR" | grep -v "$EXCLUDE" | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
