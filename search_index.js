var documenterSearchIndex = {"docs":
[{"location":"getting-started/installation/#Installation-Guide","page":"Installation","title":"Installation Guide","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"This guide walks you through installing and setting up Planar on your system.","category":"page"},{"location":"getting-started/installation/#Prerequisites","page":"Installation","title":"Prerequisites","text":"","category":"section"},{"location":"getting-started/installation/#System-Requirements","page":"Installation","title":"System Requirements","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Operating System: Linux, macOS, or Windows\nJulia: Version 1.11 or later\nMemory: 8GB RAM minimum (16GB+ recommended)\nStorage: 10GB+ free space for data and dependencies\nNetwork: Stable internet connection for exchange APIs","category":"page"},{"location":"getting-started/installation/#Julia-Installation","page":"Installation","title":"Julia Installation","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Download Julia 1.11+ from julialang.org\nFollow the platform-specific installation instructions\nVerify installation:","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"julia --version","category":"page"},{"location":"getting-started/installation/#Installation-Methods","page":"Installation","title":"Installation Methods","text":"","category":"section"},{"location":"getting-started/installation/#Method-1:-Git-Clone-(Recommended)","page":"Installation","title":"Method 1: Git Clone (Recommended)","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Clone the repository with submodules\ngit clone --recurse-submodules https://github.com/defnlnotme/Planar.jl\ncd Planar.jl\n\n# Allow direnv (if using)\ndirenv allow\n\n# Start Julia with the project\njulia --project=Planar","category":"page"},{"location":"getting-started/installation/#Method-2:-Docker","page":"Installation","title":"Method 2: Docker","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Pull pre-built image\ndocker pull docker.io/psydyllic/planar-sysimage\n\n# Or build locally\nscripts/build.sh","category":"page"},{"location":"getting-started/installation/#Project-Setup","page":"Installation","title":"Project Setup","text":"","category":"section"},{"location":"getting-started/installation/#1.-Install-Dependencies","page":"Installation","title":"1. Install Dependencies","text":"","category":"section"},{"location":"getting-started/installation/#2.-Create-User-Directory","page":"Installation","title":"2. Create User Directory","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Create user configuration directory\nmkdir -p user/logs user/keys","category":"page"},{"location":"getting-started/installation/#3.-Configuration-Files","page":"Installation","title":"3. Configuration Files","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Create user/planar.toml:","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"[general]\nname = \"My Trading Bot\"\nlog_level = \"INFO\"\n\n[exchanges]\ndefault = \"binance\"\n\n[exchanges.binance]\nenabled = true\nsandbox = true  # Start with testnet\n\n[strategies]\n# Add your strategies here","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Create user/secrets.toml:","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"[exchanges.binance]\napi_key = \"your_api_key_here\"\nsecret = \"your_secret_key_here\"","category":"page"},{"location":"getting-started/installation/#API-Configuration","page":"Installation","title":"API Configuration","text":"","category":"section"},{"location":"getting-started/installation/#Exchange-API-Keys","page":"Installation","title":"Exchange API Keys","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Binance:\nGo to Binance API Management\nCreate new API key\nEnable \"Enable Reading\" and \"Enable Spot & Margin Trading\"\nAdd IP restrictions for security\nCoinbase Pro:\nGo to Coinbase Pro API\nCreate new API key with trading permissions\nNote the passphrase requirement\nOther Exchanges:\nFollow exchange-specific API documentation\nEnsure proper permissions for trading","category":"page"},{"location":"getting-started/installation/#API-Security","page":"Installation","title":"API Security","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Never commit API keys to version control\nUse IP restrictions when possible\nStart with sandbox/testnet environments\nUse separate API keys for different bots\nRegularly rotate API keys","category":"page"},{"location":"getting-started/installation/#Environment-Configuration","page":"Installation","title":"Environment Configuration","text":"","category":"section"},{"location":"getting-started/installation/#Environment-Variables","page":"Installation","title":"Environment Variables","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Set Julia project\nexport JULIA_PROJECT=Planar\n\n# Set thread count (recommended: CPU cores - 2)\nexport JULIA_NUM_THREADS=6\n\n# Enable precompilation\nexport JULIA_PRECOMP=1\n\n# Set data directory (optional)\nexport PLANAR_DATA_DIR=/path/to/data","category":"page"},{"location":"getting-started/installation/#Using-direnv-(Optional)","page":"Installation","title":"Using direnv (Optional)","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Create .envrc:","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"export JULIA_PROJECT=Planar\nexport JULIA_NUM_THREADS=6\nexport JULIA_PRECOMP=1","category":"page"},{"location":"getting-started/installation/#Verification","page":"Installation","title":"Verification","text":"","category":"section"},{"location":"getting-started/installation/#Test-Installation","page":"Installation","title":"Test Installation","text":"","category":"section"},{"location":"getting-started/installation/#Run-Example-Strategy","page":"Installation","title":"Run Example Strategy","text":"","category":"section"},{"location":"getting-started/installation/#Docker-Setup","page":"Installation","title":"Docker Setup","text":"","category":"section"},{"location":"getting-started/installation/#Using-Pre-built-Image","page":"Installation","title":"Using Pre-built Image","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Run with interactive features\ndocker run -it \\\n  -v $(pwd)/user:/app/user \\\n  docker.io/psydyllic/planar-sysimage-interactive\n\n# Run production image\ndocker run -d \\\n  -v $(pwd)/user:/app/user \\\n  docker.io/psydyllic/planar-sysimage","category":"page"},{"location":"getting-started/installation/#Building-Custom-Image","page":"Installation","title":"Building Custom Image","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Build development image\nscripts/build.sh\n\n# Build with custom Julia version\nJULIA_VERSION=1.11.1 scripts/build.sh","category":"page"},{"location":"getting-started/installation/#Performance-Optimization","page":"Installation","title":"Performance Optimization","text":"","category":"section"},{"location":"getting-started/installation/#Precompilation","page":"Installation","title":"Precompilation","text":"","category":"section"},{"location":"getting-started/installation/#Memory-Settings","page":"Installation","title":"Memory Settings","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Increase Julia heap size if needed\nexport JULIA_HEAP_SIZE_HINT=8G\n\n# Optimize garbage collection\nexport JULIA_GC_THREADS=2","category":"page"},{"location":"getting-started/installation/#Troubleshooting","page":"Installation","title":"Troubleshooting","text":"","category":"section"},{"location":"getting-started/installation/#Common-Issues","page":"Installation","title":"Common Issues","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Package Installation Fails:\nPermission Errors:\n# Fix directory permissions\nchmod -R 755 user/\nAPI Connection Issues:\nVerify API keys and permissions\nCheck network connectivity\nTest with sandbox environment first\nMemory Issues:\nIncrease system RAM\nUse swap file if necessary\nReduce data cache size","category":"page"},{"location":"getting-started/installation/#Getting-Help","page":"Installation","title":"Getting Help","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Check troubleshooting guide\nReview installation issues\nSearch GitHub Issues","category":"page"},{"location":"getting-started/installation/#Next-Steps","page":"Installation","title":"Next Steps","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"After successful installation:","category":"page"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Configure your first strategy\nSet up exchange connections\nRun your first backtest\nExplore optimization features","category":"page"},{"location":"getting-started/installation/#Security-Considerations","page":"Installation","title":"Security Considerations","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"Store API keys securely in user/secrets.toml\nUse IP restrictions on exchange APIs\nStart with sandbox/testnet environments\nRegular security audits of API permissions\nMonitor for unusual trading activity","category":"page"},{"location":"getting-started/installation/#Updates-and-Maintenance","page":"Installation","title":"Updates and Maintenance","text":"","category":"section"},{"location":"getting-started/installation/","page":"Installation","title":"Installation","text":"# Update Planar\ngit pull origin main\ngit submodule update --recursive\n\n# Update Julia packages\njulia --project=Planar -e \"using Pkg; Pkg.update()\"\n\n# Rebuild if needed\njulia --project=Planar -e \"using Pkg; Pkg.build()\"","category":"page"},{"location":"watchers/watchers/#Watchers","page":"Interface","title":"Watchers","text":"","category":"section"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"A Watcher type serves as an interface over a data feed. Implementations are available for certain third-party APIs, exchanges OHLCV (Open, High, Low, Close, Volume) data construction, and order books.","category":"page"},{"location":"watchers/watchers/#User-Interface","page":"Interface","title":"User Interface","text":"","category":"section"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"To instantiate a watcher, call its related function. For example, ccxt_ohlcv_watcher can be used to instantiate a watcher that tracks trade data from an exchanges and builds OHLCV candles for the specified timeframe. ","category":"page"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"A watcher instance provides the following functions:","category":"page"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"get: Primarily used to retrieve the underlying data monitored by the watcher, usually in a processed state (like a DataFrame). It defaults to the watcher buffer (which should keep data in a raw state).\nlength: Returns the length of the underlying buffer.\nlast: Returns the last raw value of the underlying buffer.\nclose: Stops the watcher and flushes the buffer.\nisstale: Evaluates if the watcher is in a degraded state, e.g., when it can't fetch new data.\nfetch!: A watcher runs queries at specified intervals, so you should only use fetch! when you want to ensure that the watcher has the latest data.\nflush!: Like fetch!, the watcher already flushes at predetermined intervals. Use this only to ensure flushing in case of shutdown. The watcher does call flush on destruction through its finalizer, but it does so asynchronously and doesn't ensure the success of the flush operation.\ndelete!: Deletes the watcher data from the storage backend used by flush! (and empties the buffer).\ndeleteat!: Deletes the watcher data within a date range (and empties the buffer).\npush!: Adds an element to the elements the watcher subscribes to (if any).\npop!: Opposite of push!.\nstop: Stops the watcher.\nstart: Restarts the watcher.","category":"page"},{"location":"watchers/watchers/#See-Also","page":"Interface","title":"See Also","text":"","category":"section"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nData Management - Guide: Data handling and management\nExchanges - Data handling and management","category":"page"},{"location":"watchers/watchers/#Implementation-Interface","page":"Interface","title":"Implementation Interface","text":"","category":"section"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"To implement a custom watcher, you need to define functions such that dispatch happens through the watcher name interpreted as a value Val{Symbol(my_watcher_name)}. So a function needs to have a signature like _fetch!(w::Watcher, ::Val{some_symbol}).","category":"page"},{"location":"watchers/watchers/#Required","page":"Interface","title":"Required","text":"","category":"section"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"_fetch!: Fetches the data, like an HTTP request.\n_get: Returns the post-processed data, like a DataFrame.","category":"page"},{"location":"watchers/watchers/#Optional","page":"Interface","title":"Optional","text":"","category":"section"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"_init!: Performs initialization routines.\n_load!: Pre-fills the watcher buffer on construction. It is only called once and runs after _init!.\n_flush!: Saves the watcher buffer somewhere on periodic intervals and on watcher destruction.\n_process!: Updates the view of the raw data, which is what the get function should return.\n_delete!: Deletes all the storage data of the watcher.\n_deleteat!: Deletes the storage data of the watcher within a date range (from, to).\n_push!: Watchers might manage a list of things to track (like Asset symbols).\n_pop!: Inverse of _push!.\n_start: Executed before starting the timer.\n_stop: Executed after stopping the timer.","category":"page"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"Refer to the Watchers and WatchersImpls modules for helper functions.","category":"page"},{"location":"watchers/watchers/","page":"Interface","title":"Interface","text":"Watchers are heavy data structures, try to not use many of them, or join multiple jobs into fewer watchers. If you need an high number of multiple asynchronous fetchers rely instead on tasks (Task) or consider using Rocket.jl.","category":"page"},{"location":"watchers/watchers/#API","page":"Interface","title":"API","text":"","category":"section"},{"location":"watchers/watchers/#Watchers.Watchers-watchers-watchers","page":"Interface","title":"Watchers.Watchers","text":"Watchers are data feeds, that keep track of stale data.\n\n\n\n\n\n","category":"module"},{"location":"watchers/watchers/#Watchers.Beacon-watchers-watchers","page":"Interface","title":"Watchers.Beacon","text":"The flags that control which operations are notified by the watcher\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Watchers.Capacity-watchers-watchers","page":"Interface","title":"Watchers.Capacity","text":"The capacity parameters for the watcher\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Watchers.Exec-watchers-watchers","page":"Interface","title":"Watchers.Exec","text":"The execution variables for the watcher\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Watchers.HasFunction-watchers-watchers","page":"Interface","title":"Watchers.HasFunction","text":"The flags that control which operations are performed by the watcher\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Watchers.Interval-watchers-watchers","page":"Interface","title":"Watchers.Interval","text":"The interval parameters for the watcher\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Watchers.Watcher-watchers-watchers","page":"Interface","title":"Watchers.Watcher","text":"Watchers manage data, they pull from somewhere, keep a cache in memory, and optionally flush periodically to persistent storage.\n\nbuffer\nname\nhas\ninterval\ncapacity\nbeacon\n_exec\n_val\n_stop: Flag to stop the watcher\n_timer: A Timer object used to schedule fetch operations for a watcher\nattempts: Tracks how many consecutive fails have occurred in case of fetching failure\nlast_fetch: The most recent time a fetch operation failed\nlast_flush: The most recent time the flush function was called\nattrs: Additional attributes for the watcher\n\nA Watcher is a mutable struct that manages data. It pulls data from a source, keeps a cache in memory, and optionally flushes the data to persistent storage periodically. The struct contains fields for managing the buffer, scheduling fetch operations, and handling fetch failures.\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Base.close-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.close","text":"Stops the watcher and optionally flushes the data.\n\nclose(w::Watcher; doflush)\n\n\nThe function takes a watcher and an optional doflush argument. If the watcher is not stopped, it stops the watcher. If doflush is true, it flushes the watcher data.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.delete!-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.delete!","text":"Deletes all watcher data from storage backend. Also empties the buffer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.deleteat!-Tuple{Watcher, @NamedTuple{start::Dates.DateTime, stop::Dates.DateTime}}-watchers-watchers","page":"Interface","title":"Base.deleteat!","text":"Delete watcher data from storage backend within the date range specified.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.empty!-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.empty!","text":"Empty the watcher buffer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.get-Tuple{Watcher, Any}-watchers-watchers","page":"Interface","title":"Base.get","text":"Returns the processed view of the watcher data. Accessible also as a view property of the watcher object.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.isempty-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.isempty","text":"True if the watcher buffer is empty.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.islocked-Tuple{Watcher, Val{:buffer}}-watchers-watchers","page":"Interface","title":"Base.islocked","text":"True if the buffer lock is locked.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.islocked-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.islocked","text":"True if watcher if the fetch lock locked.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.last-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.last","text":"The last available data entry.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.length-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.length","text":"The length of the watcher buffer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.lock-Tuple{Any, Watcher, Val{:buffer}}-watchers-watchers","page":"Interface","title":"Base.lock","text":"Lock the buffer lock and execute f.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.lock-Tuple{Any, Watcher}-watchers-watchers","page":"Interface","title":"Base.lock","text":"Lock the fetch lock and execute f.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.lock-Tuple{Watcher, Val{:buffer}}-watchers-watchers","page":"Interface","title":"Base.lock","text":"Lock the buffer lock.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.lock-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.lock","text":"Lock the fetch lock.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.pop!-Tuple{Watcher, Any, Vararg{Any}}-watchers-watchers","page":"Interface","title":"Base.pop!","text":"Remove v from the things the watcher is fetching.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.push!-Tuple{Watcher, Any, Vararg{Any}}-watchers-watchers","page":"Interface","title":"Base.push!","text":"Add v to the things the watcher is fetching.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.unlock-Tuple{Watcher, Val{:buffer}}-watchers-watchers","page":"Interface","title":"Base.unlock","text":"Unlock the buffer lock.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Base.unlock-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Base.unlock","text":"Unlock the fetch lock.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Data.DFUtils.lastdate-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Data.DFUtils.lastdate","text":"The date of the last update fetched by the watcher.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#ExchangeTypes.exchange-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"ExchangeTypes.exchange","text":"Get the exchange associated with the watcher.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#ExchangeTypes.exchangeid-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"ExchangeTypes.exchangeid","text":"Get the name of the exchange associated with the watcher.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Misc.load!-Tuple{Watcher, Vararg{Any}}-watchers-watchers","page":"Interface","title":"Misc.load!","text":"Executes the watcher _load! function (defaults to default_loader).\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Misc.start!-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Misc.start!","text":"Resets the watcher timer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Misc.stop!-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Misc.stop!","text":"Stops the watcher timer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.BufferEntry-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers.BufferEntry","text":"The single entry in the buffer\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._check_flush_interval-Tuple{Any, Any, Any}-watchers-watchers","page":"Interface","title":"Watchers._check_flush_interval","text":"Checks the appropriateness of the flush interval\n\n_check_flush_interval(flush_interval, fetch_interval, cap)\n\n\nThis function checks if the flush interval is greater than the time it would take to drop an element from the buffer (calculated as the product of the fetch interval and the buffer capacity). If the flush interval is too high, a warning is issued.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._closeall-Tuple{}-watchers-watchers","page":"Interface","title":"Watchers._closeall","text":"Close all watchers.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._deleteat!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._deleteat!","text":"Deletes a range of data from the watcher buffer and storage backend.\n\n_deleteat!(w::Watcher, ::Val; from, to, kwargs...)\n\n\nThe function takes a watcher as an argument, along with optional from and to arguments. It deletes the data from the storage backend and the watcher buffer within the specified range. If no range is specified, it deletes all data.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._fetch!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._fetch!","text":"Appends new data to the watcher buffer, returns true when new data is added, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._flush!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._flush!","text":"May run after a successful fetch operation, according to the flush_interval. It spawns a task.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._get-watchers-watchers","page":"Interface","title":"Watchers._get","text":"Returns the processed view of the watcher data.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers._init!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._init!","text":"Function to run on watcher initialization, it runs before _load!.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._isserialized-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers._isserialized","text":"Checks if the watcher data is serialized.\n\n_isserialized(w::Watcher) -> Any\n\n\nThe function takes a watcher as an argument and returns a boolean indicating whether the watcher data is serialized or not.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._load!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._load!","text":"Called once on watcher creation, used to pre-fill the watcher buffer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._pop!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._pop!","text":"Same as _push! but for removing elements.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._process!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._process!","text":"Processes the watcher data, called everytime the watcher fetches new data.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._push!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._push!","text":"If the watcher manager a group of things that it is fetching, _push! should add an element to it.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._schedule_fetch-Tuple{Any, Any, Any}-watchers-watchers","page":"Interface","title":"Watchers._schedule_fetch","text":"Schedules a fetch operation for a watcher\n\n_schedule_fetch(w, timeout, threads; kwargs...) -> Any\n\n\nThis function schedules a fetch operation for a given watcher. It checks if the watcher is locked and if not, it creates a task to fetch data. It also handles timeouts and increments the attempt counter in case of failure. The function ensures that the fetch operation is thread-safe and handles any exceptions that might occur during the fetch operation.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._start!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._start!","text":"Executed before starting the timer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._stop!-Tuple{Watcher, Val}-watchers-watchers","page":"Interface","title":"Watchers._stop!","text":"Executed after the timer has been stopped.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._timer!-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers._timer!","text":"_timer is an optional Timer object used to schedule fetch operations for a watcher.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._tryfetch-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers._tryfetch","text":"Attempts to fetch data for a watcher\n\n_tryfetch(w) -> Bool\n\n\nThis function tries to fetch data for a given watcher. It locks the watcher, updates the last fetch time, and attempts to fetch data. If the fetch is successful, it returns true, otherwise it logs the error and returns false. It also handles stopping the watcher if needed.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._watcher-watchers-watchers","page":"Interface","title":"Watchers._watcher","text":"Instantiate a watcher.\n\n_watcher(T::Type, name::String; ...) -> Watcher\n_watcher(\n    T::Type,\n    name::String,\n    val::Val;\n    start,\n    load,\n    process,\n    flush,\n    threads,\n    fetch_timeout,\n    fetch_interval,\n    flush_interval,\n    buffer_capacity,\n    view_capacity,\n    attrs\n) -> Watcher\n\n\nThis function creates a new watcher with the specified parameters. It checks the flush interval, initializes the watcher, loads data if necessary, and sets a timer for the watcher if the start parameter is true. It also ensures that the _fetch! function is applicable for the watcher.\n\nwarning: asyncio vs threads\nBuyOrSell _fetch! and _flush! callbacks assume non-blocking asyncio like behaviour. If instead your functions require high computation, pass threads=true, you will have to ensure thread safety.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.allerror-Tuple{Type, Watcher}-watchers-watchers","page":"Interface","title":"Watchers.allerror","text":"Get all logged watcher errors of type t.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.default_flusher-Tuple{Watcher, Any}-watchers-watchers","page":"Interface","title":"Watchers.default_flusher","text":"Saves watcher data to the default DATA_PATH using serialization.\n\ndefault_flusher(\n    w::Watcher,\n    key;\n    reset,\n    buf\n) -> Union{Nothing, Dict{Symbol, Any}}\n\n\nThe function takes a watcher and a key as arguments, along with optional parameters for reset and buffer. If the buffer is empty, the function returns nothing. If the most recent time in the buffer is greater than the last flushed time, the function saves the recent slice of data to the DATA_PATH and updates the last flushed time.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.default_get-Tuple{Watcher, Any}-watchers-watchers","page":"Interface","title":"Watchers.default_get","text":"Returns the processed view of the watcher data.\n\ndefault_get(w::Watcher, def) -> Any\n\n\nThe function takes a watcher as an argument and returns the view attribute of the watcher.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.default_init-watchers-watchers","page":"Interface","title":"Watchers.default_init","text":"Initializes a watcher with default attributes.\n\ndefault_init(w::Watcher) -> Bool\ndefault_init(w::Watcher, dataview) -> Bool\ndefault_init(w::Watcher, dataview, serialized) -> Any\n\n\nThe function takes a watcher and optional dataview and serialized arguments. It sets the view, last_processed, checks, and serialized attributes of the watcher. If a logfile attribute is present, it writes an empty string to the logfile.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.default_loader-Tuple{Watcher, Any}-watchers-watchers","page":"Interface","title":"Watchers.default_loader","text":"Loads watcher data from the default DATA_PATH.\n\ndefault_loader(\n    w::Watcher,\n    key\n) -> Union{Nothing, Dict{Symbol, Any}}\n\n\nThe function takes a watcher and a key as arguments. If the watcher data is not loaded, the function returns nothing. Otherwise, it loads the data from the DATA_PATH, pushes it to the watcher buffer using pushstart!, processes the watcher data if necessary, and sets the loaded attribute of the watcher to true.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.default_process-Tuple{Watcher, Function}-watchers-watchers","page":"Interface","title":"Watchers.default_process","text":"Processes the values of a watcher buffer into a dataframe.\n\ndefault_process(\n    w::Watcher,\n    appendby::Function\n) -> Union{Nothing, Dict{Symbol, Any}}\n\n\nThe function takes a watcher and an appendby function as arguments. If the buffer is empty, the function returns nothing. Otherwise, it checks if the last processed attribute of the watcher is nothing.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.default_view-watchers-watchers","page":"Interface","title":"Watchers.default_view","text":"Returns the default view of the watcher data.\n\ndefault_view(w::Watcher) -> Any\ndefault_view(w::Watcher, def::Union{Function, Type}) -> Any\n\n\nThe function takes a watcher and an optional definition as arguments. If the default view attribute of the watcher is nothing, it returns the result of the definition function. Otherwise, it deletes the default view attribute from the watcher and returns it if it is a function or the result of the function if it is not.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.errors-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers.errors","text":"Get the list of errors that occurred during the execution of a watcher.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.fetch!-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers.fetch!","text":"Fetches a new value from the watcher ignoring the timer.\n\nfetch!(w::Watcher; reset, kwargs...) -> Any\n\n\nThe function takes a watcher as an argument, along with optional reset and kwargs arguments. It schedules a fetch operation, and if reset is true, it resets the timer. The function returns the last value in the watcher buffer or nothing if the buffer is empty.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.flush!-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers.flush!","text":"Executes the flush function of the watcher (defaults to default_flusher).\n\nflush!(w::Watcher; force, sync)\n\n\nThe function takes a watcher as an argument, along with optional force and sync arguments. If force is true or the time since the last flush is greater than the flush interval, it schedules a flush operation. If sync is true, it waits for the flush operation to complete.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.init!-Tuple{Watcher, Vararg{Any}}-watchers-watchers","page":"Interface","title":"Watchers.init!","text":"Executes the watcher _init! function (defaults to default_init).\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.isstale-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers.isstale","text":"True if last available data entry is older than now() + fetch_interval + fetch_timeout.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.isstarted-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers.isstarted","text":"True if timer is running.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.isstopped-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers.isstopped","text":"True if timer is not running.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.lasterror-Tuple{Type, Watcher}-watchers-watchers","page":"Interface","title":"Watchers.lasterror","text":"Get the last logged watcher error of type t.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.lasterror-Tuple{Watcher}-watchers-watchers","page":"Interface","title":"Watchers.lasterror","text":"Get the last logged watcher error.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.logerror-watchers-watchers","page":"Interface","title":"Watchers.logerror","text":"Stores an error to the watcher log journal.\n\nlogerror(w::Watcher, e) -> Any\nlogerror(w::Watcher, e, bt) -> Any\n\n\nThis function logs an error that occurred during the execution of a watcher. The error is stored in the watcher's log journal. If the watcher has a logfile attribute, the error is written to the logfile. Otherwise, the error is pushed to the watcher's error buffer.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.process!-Tuple{Watcher, Vararg{Any}}-watchers-watchers","page":"Interface","title":"Watchers.process!","text":"Executes the watcher _process! function (defaults to default_process).\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.pushnew!-Union{Tuple{T}, Tuple{Watcher{T}, Any}, Tuple{Watcher{T}, Any, Any}} where T-watchers-watchers","page":"Interface","title":"Watchers.pushnew!","text":"Pushes a new value to the watcher buffer if it is different from the last one.\n\npushnew!(\n    w::Watcher{T},\n    value\n) -> Union{Nothing, CircularBuffer{@NamedTuple{time::Dates.DateTime, value::T}} where T}\npushnew!(\n    w::Watcher{T},\n    value,\n    time\n) -> Union{Nothing, CircularBuffer{@NamedTuple{time::Dates.DateTime, value::T}} where T}\n\n\nThe function takes a watcher, a value, and an optional time as arguments. If the value is not nothing and it is different from the last value in the watcher buffer, the function pushes a new tuple containing the time and the value to the watcher buffer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.pushstart!-Tuple{Watcher, Any}-watchers-watchers","page":"Interface","title":"Watchers.pushstart!","text":"Pushes a vector of values to the watcher buffer.\n\npushstart!(w::Watcher, vec) -> Any\n\n\nThe function takes a watcher and a vector as arguments. If the vector is empty, the function returns nothing. Otherwise, it calculates the minimum of the buffer capacity and the size of the vector, and pushes the values from the vector to the watcher buffer starting from the calculated offset.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.showtrace-watchers-watchers","page":"Interface","title":"Watchers.showtrace","text":"Display the backtrace of the last logged watcher error.\n\nshowtrace(w::Watcher) -> Any\nshowtrace(w::Watcher, rev_idx) -> Any\n\n\nThis function retrieves and displays the backtrace of the last logged error for a given watcher. If no errors have been logged for the watcher, it does nothing.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.watcher-Tuple{Type, String, Vararg{Any}}-watchers-watchers","page":"Interface","title":"Watchers.watcher","text":"Instantiate a watcher and add it to the global watchers list.\n\nwatcher(\n    T::Type,\n    name::String,\n    args...;\n    kwargs...\n) -> Watcher\n\n\nThis function creates a new watcher with the specified parameters and adds it to the global WATCHERS list. If a watcher with the same name already exists in the list, it replaces the old watcher with the new one.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.@logerror-Tuple{Any, Any}-watchers-watchers","page":"Interface","title":"Watchers.@logerror","text":"Logs an error that occurred during the execution of an expression.\n\nThis macro tries to execute the provided expression and logs any error that occurs during its execution. The error is logged to the watcher's log journal. If the watcher has a logfile attribute, the error is written to the logfile. Otherwise, the error is pushed to the watcher's error buffer.\n\n\n\n\n\n","category":"macro"},{"location":"watchers/watchers/#Watchers.@watcher_interface!-Tuple{}-watchers-watchers","page":"Interface","title":"Watchers.@watcher_interface!","text":"Imports the watcher interface functions.\n\nThis macro imports the watcher interface functions into the current scope. These functions are used to define the behavior of a watcher.\n\n\n\n\n\n","category":"macro"},{"location":"watchers/watchers/#Watchers.WatchersImpls.CcxtTicker-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.CcxtTicker","text":"The ccxt ticker object as a NamedTuple.\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Watchers.WatchersImpls.TempCandle-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.TempCandle","text":"A mutable struct representing a temporary candlestick chart.\n\ntimestamp\nopen\nhigh\nlow\nclose\nvolume\n\nThe TempCandle struct holds the timestamp, open, high, low, close, and volume values for a temporary candlestick chart.\n\n\n\n\n\n","category":"type"},{"location":"watchers/watchers/#Watchers.WatchersImpls._append_ohlcv!-NTuple{5, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._append_ohlcv!","text":"Appends data to a dataframe if it is contiguous\n\n_append_ohlcv!(w, ohlcv_dst, ohlcv_src, left, next) -> Any\n\n\nThis function appends data from a source dataframe to a destination dataframe if the data is contiguous. It checks if the first date in the source dataframe is the next expected date in the destination dataframe. If it is, the function appends the data from the source dataframe to the destination dataframe and checks the continuity of the data.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._checkforstale-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._checkforstale","text":"Checks for stale data in the watcher.\n\n_checkforstale(w)\n\n\nThis function checks for stale data in the watcher by iterating over the symbol states and updating the OHLCV if necessary.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._chill!-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._chill!","text":"_chill! sets the warmup target attribute of the window to the current time applied with the time frame rate.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._delete_ohlcv!-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._delete_ohlcv!","text":"Deletes OHLCV data of a given symbol from the window\n\n_delete_ohlcv!(w) -> Any\n_delete_ohlcv!(w, sym) -> Any\n\n\nThe _delete_ohlcv! function removes OHLCV data of a specified symbol from the window. If no symbol is provided, it defaults to the symbol of the window. It fetches the data associated with the symbol and the current time frame rate, and deletes it.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.WatchersImpls._empty!!-Tuple{DataFrames.DataFrame}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._empty!!","text":"Empties a dataframe\n\n_empty!!(\n    df::DataFrames.DataFrame\n) -> Union{DataFrames.DataFrame, Vector{Bool}}\n\n\nThe _empty!! function tries to empty a dataframe. If calling the empty! function on the dataframe throws an error, it uses the copysubs! function with the empty argument to empty the dataframe.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._empty_candles-Tuple{Any, Watchers.WatchersImpls.Warmed}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._empty_candles","text":"Returns nothing if the watcher status is pending\n\n_empty_candles(w, _::Watchers.WatchersImpls.Warmed)\n\n\nThis function checks the status of the watcher. If the status is pending, it returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._ensure_contig!-Tuple{Any, Any, Watchers.WatchersImpls.TempCandle, Any, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._ensure_contig!","text":"Appends temp_candle ensuring contiguity.\n\n_ensure_contig!(\n    w,\n    df,\n    temp_candle::Watchers.WatchersImpls.TempCandle,\n    tf,\n    sym\n) -> Any\n\n\nThis function appends the temporary candle to the DataFrame ensuring contiguity. If the temporary candle is not right adjacent to the last date in the DataFrame, it resolves the gap and then appends the candle.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._fastforward-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._fastforward","text":"Fast forwards the window to the current timestamp\n\n_fastforward(w) -> Any\n_fastforward(w, sym) -> Any\n\n\nThe _fastforward function ensures the window is up-to-date by fast-forwarding to the current timestamp. It checks whether the stored data is empty or corrupted and retrieves available data within the window. If no data is available, it calculates the starting point for fetching new data. Otherwise, it appends the available data to the dataframe, checks the continuity of the data, and updates the starting point. If the starting point is not equal to the current timestamp, it fetches new data up to the current timestamp and checks the data continuity again.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.WatchersImpls._fetch_error-Tuple{Any, Any, Any, Vararg{Any}}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._fetch_error","text":"Generates an error message when data fetching fails\n\nThe _fetch_error function is used when data fetching for a given symbol fails. It generates an error message detailing the symbol, exchange name, and the time frame for which data fetching failed, unless the quiet attribute of the window is set to true.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._fetchto!-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._fetchto!","text":"Fetches and appends or prepends data to a dataframe\n\n_fetchto!(w, df, sym, tf; ...)\n_fetchto!(w, df, sym, tf, op; to, from, allow_upsample)\n\n\nThis function fetches data for a given symbol and time frame, and appends or prepends it to a provided dataframe. The operation (append or prepend) is determined by the op parameter. If the dataframe is not empty, it checks for data continuity. If the data is not contiguous and the resync_noncontig attribute of the watcher is set to true, it empties the dataframe and resets the rows count. The function calculates the starting date for fetching new data based on the dataframe, target date, time frame, and operation. It then fetches the data, cleans it, and checks if it can be appended or prepended to the dataframe. If the operation is possible, it performs it and returns true. If the fetched data is empty, it returns false. If the difference between the target date and the starting date is less than or equal to the period of the time frame, it also returns true.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.WatchersImpls._flushfrom!-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._flushfrom!","text":"Ensures the dataframe is up-to-date by flushing data\n\n_flushfrom!(w) -> Union{Nothing, Dict{Symbol, Any}}\n\n\nThis function ensures the dataframe is up-to-date by flushing data. If the dataframe is not empty, it checks the last flushed date and the last date in the dataframe. If these dates are not the same, it saves the data in the dataframe from the last flushed date to the last date in the dataframe and updates the last flushed date.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._from-Tuple{Any, Any, Any, Any, Val{:append}}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._from","text":"Calculates the starting date for appending data to a dataframe\n\n_from(df, to, tf, cap, _::Val{:append}) -> Any\n\n\nThe _from function determines the starting date for appending data to a dataframe. It takes into account a target date, time frame rate, capacity, and the :append flag. The function ensures that the target date is not earlier than the last date in the dataframe. It then calculates the earliest date that can be included in the dataframe based on the capacity and the time frame rate. If the dataframe is empty, this earliest date is returned. Otherwise, the minimum between this date and the last date in the dataframe is returned.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._fromto-NTuple{4, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._fromto","text":"_fromto calculates a starting timestamp given a target timestamp, period, capacity and data kept.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._get_available-Tuple{Any, Any, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._get_available","text":"Returns the available data within the given window\n\n_get_available(\n    w,\n    z,\n    to\n) -> Union{Nothing, DataFrames.DataFrame}\n\n\nThe _get_available function checks if data is available within a given window. It calculates the maximum lookback period and checks if the data in the window is empty. If it is, the function returns nothing. If data is available, it creates a view of the data and checks if the data is too old. If it is, it returns nothing and schedules a background task to update the data. Otherwise, it converts the available data to OHLCV format and returns it.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._load_ob_data-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._load_ob_data","text":"Loads order book data.\n\n_load_ob_data(w) -> Any\n\n\nThis function loads the order book data from the specified location.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._loadall!-Tuple{Watcher, Val{:ccxt_ohlcv_candles}}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._loadall!","text":"Loads the OHLCV data for all symbols.\n\n_loadall!(w::Watcher, _::Val{:ccxt_ohlcv_candles})\n\n\nThis function loads the OHLCV data for all symbols. If the buffer or view of the watcher is empty, the function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._loadall!-Tuple{Watcher, Val{:ccxt_ohlcv_ticker}}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._loadall!","text":"Loads the OHLCV data for all symbols.\n\n_loadall!(w::Watcher, _::Val{:ccxt_ohlcv_ticker})\n\n\nThis function loads the OHLCV data for all symbols. If the buffer or view of the watcher is empty, the function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._meanvolume!-Tuple{Any, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._meanvolume!","text":"Adjusts the volume of the temporary candlestick chart.\n\n_meanvolume!(w, state) -> Any\n\n\nThis function adjusts the volume of the temporary candlestick chart by dividing it by the number of ticks and the volume divisor.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._ob_func-Tuple{Any, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._ob_func","text":"Assigns the appropriate order book function based on the level.\n\n_ob_func(attrs, level)\n\n\nThe function assigns the appropriate order book function to the attrs dictionary based on the level provided. It tries to assign the function in the order of preference and breaks the loop as soon as a function is successfully assigned. If no function can be assigned, it throws an assertion error.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._ob_to_df-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._ob_to_df","text":"Converts order book data to a DataFrame.\n\n_ob_to_df(ob) -> DataFrames.DataFrame\n\n\nThis function takes an order book and converts it into a DataFrame. It creates separate columns for timestamp, bid price, bid amount, ask price, and ask amount. The function also ensures that the DataFrame is created even if the bids and asks are uneven by using the zip function.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._parsedatez-Tuple{AbstractString}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._parsedatez","text":"Removes trailing 'Z' from a string and parses it into a DateTime object.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._resolve-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._resolve","text":"Ensures the dataframe is up-to-date by fetching and appending data\n\n_resolve(w, ohlcv_dst, date_candidate::Dates.DateTime)\n_resolve(w, ohlcv_dst, date_candidate::Dates.DateTime, sym)\n\n\nThis function ensures the dataframe is up-to-date by fetching and appending data for a given symbol and time frame. It checks whether the stored data is empty or corrupted and retrieves available data within the window. If no data is available, it calculates the starting point for fetching new data. Otherwise, it appends the available data to the dataframe, checks the continuity of the data, and updates the starting point. If the starting point is not equal to the current timestamp, it fetches new data up to the current timestamp and checks the data continuity again.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.WatchersImpls._sticky_fetchto!-Tuple-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._sticky_fetchto!","text":"Continuously attempts to fetch and append or prepend data to a dataframe until successful\n\n_sticky_fetchto!(args...; kwargs...)\n\n\nThis function continuously calls the _fetchto! function until it successfully fetches and appends or prepends data to a dataframe. If the _fetchto! function fails, the function waits for a certain period before trying again. The waiting period increases with each failed attempt.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls._update_sym_ohlcv-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._update_sym_ohlcv","text":"Updates the OHLCV for a specific symbol.\n\n_update_sym_ohlcv(\n    w,\n    ticker,\n    latest_timestamp\n) -> Union{Nothing, Int64}\n_update_sym_ohlcv(\n    w,\n    ticker,\n    latest_timestamp,\n    sym\n) -> Union{Nothing, Int64}\n\n\nThis function updates the OHLCV for a specific symbol based on the latest timestamp and price from the ticker. It resets the temporary candlestick chart if the timestamp is newer than the current one and ensures contiguity when appending the candle to the DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.WatchersImpls._warmup!-Tuple{Any, Watchers.WatchersImpls.Pending}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls._warmup!","text":"Checks if we can start processing data, after we are past the initial incomplete timeframe.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.ccxt_average_ohlcv_watcher-Tuple{Vector{<:Exchange}, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.ccxt_average_ohlcv_watcher","text":"ccxt_average_ohlcv_watcher(\n    exchanges::Vector{<:Exchange},\n    symbols::Vector{String};\n    timeframe::TimeFrame,\n    input_source::Symbol = :tickers,\n    symbol_mapping = Dict{String,Vector{String}}(),\n    load_timeframe = default_load_timeframe(timeframe),\n    kwargs...\n)\n\nConstructs a watcher that aggregates OHLCV (Open, High, Low, Close, Volume) data across multiple exchanges and symbols, averaging or combining the data as specified.\n\nArguments\n\nexchanges::Vector{<:Exchange}: List of exchange objects to aggregate data from.\nsymbols::Vector{String}: List of target symbols (e.g., trading pairs) to aggregate.\n\nKeyword Arguments\n\ntimeframe::TimeFrame: The time interval for OHLCV aggregation (e.g., 1m, 5m, 1h).\ninput_source::Symbol = :tickers: Source of OHLCV data. Must be one of :trades, :klines, or :tickers.\nsymbol_mapping = Dict{String,Vector{String}}(): Optional mapping from each target symbol to a list of additional source symbols whose OHLCV data should be included in the aggregation for that target symbol. This is useful when you want to aggregate or average data from related instruments or trading pairs. For example, if you want the aggregated OHLCV for BTC/USDT to also include data from BTC/USD and BTC/USDC, you can specify:\nsymbol_mapping = Dict(\"BTC/USDT\" => [\"BTC/USD\", \"BTC/USDC\"])\nIn this case, the OHLCV for BTC/USDT will be computed by combining data from all three symbols.\nload_timeframe = default_load_timeframe(timeframe): Timeframe to use for initial data loading.\nStandard watcher keyword arguments are supported and passed through:\nflush, logfile, buffer_capacity, view_capacity, n_jobs, default_view, callback, etc.\nThese are forwarded to the underlying watcher constructor and available as fields or in the watcher attrs.\n\nReturns\n\nWatcher{Dict{String,DataFrame}}: A watcher object whose view contains aggregated OHLCV DataFrames for each target symbol.\n\nNotes\n\nThe watcher internally manages source watchers for each exchange and input source, and aggregates their OHLCV data by timestamp.\nSupports streaming/online updates and is suitable for both historical and live data aggregation.\nAggregation logic computes open, high, low, volume, and a volume-weighted average close (VWAP) per timestamp.\nIf symbol_mapping is provided, the OHLCV for each target symbol will include data from both the symbol itself and any mapped symbols listed in symbol_mapping for that symbol.\nThe resulting watcher can be started, stopped, loaded, and fetched like other Watchers.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.ccxt_ohlcv_tickers_watcher-Tuple{Exchange}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.ccxt_ohlcv_tickers_watcher","text":"OHLCV watcher based on exchange tickers data. This differs from the ohlcv watcher based on trades.\n\nThe OHLCV ticker watcher can monitor a group of symbols, while the trades watcher only one symbol per instance.\nThe OHLCV ticker watcher candles do not match 1:1 the exchange candles, since they rely on polled data.\nThe OHLCV ticker watcher is intended to be lazy. It won't pre-load/fetch data for all symbols, it will only\n\nprocess new candles from the time it is started w.r.t. the timeframe provided.\n\nThe source price chooses which price to use to build the candles any of :last, :vwap, :bid, :ask (default :last).\n\nTo back-fill the view (DataFrame) of a particular symbol, call load!(watcher, symbol), which will fill the view up to the watcher view_capacity.\n\nlogfile: optional path to save errors.\ndiff_volume: calculate volume by subtracting the rolling 1d snapshots (true)\nn_jobs: concurrent startup fetching jobs for ohlcv\ncallback: function fn(df, sym) called every time a dataframe is updated\n\n!!! \"warning\" startup times     The higher the number of symbols, the longer it will take to load initial OHLCV candles. When the semaphore (w[:sem]) is not full anymore, all the symbols should then start to trail the latest (full) candle as soon as possible.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.ccxt_ohlcv_watcher-Tuple{Exchange, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.ccxt_ohlcv_watcher","text":"Create a Watcher instance that tracks ohlcv for an exchange (ccxt).\n\nOn startup candles are initially loaded from storage (if any).\nThen they are fastfowarded to the last available candle.\nAfter which, fetching happen on trades\nOnce time crosses the timeframe, new candles are created from trades.\n\nIf The watcher is restarted, a new call for OHLCV data is made to re-fastfoward. If no trades happen during a timeframe, an empty candle for that timeframe is added. The view of the watcher SHOULD NOT have duplicate candles (same timestamp), and all the candles SHOULD be contiguous (the time difference between adjacent candles is always equal to the timeframe).\n\nIf these constraints are not met that's a bug.\n\nwarning: Watcher data.\n\n\nThe data saved by the watcher on disk SHOULD NOT be relied upon to be contiguous, since the watcher doesn't ensure it, it only uses it to reduce the number of candles to fetch from the exchange at startup.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.ccxt_orderbook_watcher-Tuple{Exchange, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.ccxt_orderbook_watcher","text":"Creates a watcher for the order book of a given exchange and symbol.\n\nccxt_orderbook_watcher(\n    exc::Exchange,\n    sym;\n    level,\n    interval\n) -> Any\n\n\nThis function creates a watcher for the order book of a given exchange and symbol. It sets up the watcher with the specified level, interval, and other parameters. The watcher is then started and returned for use. The function checks for timeout, sets up the attributes, and assigns the appropriate order book function based on the level.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.ccxt_tickers_watcher-Tuple{Exchange}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.ccxt_tickers_watcher","text":"Create a Watcher instance that tracks all markets for an exchange (ccxt)\n\nccxt_tickers_watcher(\n    exc::Exchange;\n    val,\n    wid,\n    syms,\n    interval,\n    start,\n    load,\n    process,\n    buffer_capacity,\n    view_capacity,\n    flush,\n    iswatch\n) -> Watcher{Dict{String, @NamedTuple{symbol::String, timestamp::Union{Nothing, Dates.DateTime}, open::Float64, high::Float64, low::Float64, close::Float64, previousClose::Union{Nothing, Float64}, bid::Float64, ask::Float64, bidVolume::Union{Nothing, Float64}, askVolume::Union{Nothing, Float64}, last::Float64, vwap::Float64, change::Float64, percentage::Float64, average::Float64, baseVolume::Float64, quoteVolume::Float64}}}\n\n\nThis function creates a Watcher instance that tracks all markets for an exchange (ccxt). It sets the symbol, exchange, and time frame for the watcher, and prepares the trades buffer. It also sets the watcher's status to pending and initializes the last fetched and last flushed timestamps.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.cg_derivatives_watcher-Tuple{Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.cg_derivatives_watcher","text":"Create a Watcher instance that tracks all the derivatives from an exchange.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.cg_ticker_watcher-Tuple{AbstractVector}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.cg_ticker_watcher","text":"Create a Watcher instance that tracks the price of some currencies on an exchange (coingecko).\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.cp_markets_watcher-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.cp_markets_watcher","text":"Create a Watcher instance that tracks all markets for an exchange (coinpaprika).\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.WatchersImpls.cp_twitter_watcher-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.cp_twitter_watcher","text":"Create a Watcher instance that tracks all markets for an exchange (coinpaprika).\n\n\n\n\n\n","category":"function"},{"location":"watchers/watchers/#Watchers.WatchersImpls.resetcandle!-Tuple{Any, Watchers.WatchersImpls.TempCandle, Any, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.resetcandle!","text":"Resets the temporary candlestick chart with a new timestamp and price.\n\nresetcandle!(\n    w,\n    cdl::Watchers.WatchersImpls.TempCandle,\n    ts,\n    price\n) -> Any\n\n\nThis function resets the temporary candlestick chart with a new timestamp and price. It also resets the high and low prices to their extreme values and the volume to zero if the price source is not vwap.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._fetch!-Tuple{Watcher, Val{:ccxt_ohlcv}}-watchers-watchers","page":"Interface","title":"Watchers._fetch!","text":"Fetches trades and updates the watcher's trades buffer\n\n_fetch!(w::Watcher, _::Val{:ccxt_ohlcv}) -> Any\n\n\nThis function fetches trades for the watcher's symbol and time frame, and updates the watcher's trades buffer. If new trades are fetched, they are appended to the trades buffer and the last fetched timestamp is updated.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._fetch!-Tuple{Watcher, Val{:ccxt_order_book}}-watchers-watchers","page":"Interface","title":"Watchers._fetch!","text":"Fetches the order book data and pushes it to the watcher.\n\n_fetch!(w::Watcher, _::Val{:ccxt_order_book}) -> Bool\n\n\nThis function fetches the order book data using the appropriate function and symbol. If the fetched order book has data, it is converted to a DataFrame and pushed to the watcher. The function returns true if data was fetched and pushed, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._fetch!-Tuple{Watcher, Val{:ccxt_ticker}}-watchers-watchers","page":"Interface","title":"Watchers._fetch!","text":"Fetches trades and updates the watcher's trades buffer\n\n_fetch!(w::Watcher, _::Val{:ccxt_ticker}) -> Any\n\n\nThis function fetches trades for the watcher's symbol and time frame, and updates the watcher's trades buffer. If new trades are fetched, they are appended to the trades buffer and the last fetched timestamp is updated.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._flush!-Tuple{Watcher, Val{:ccxt_order_book}}-watchers-watchers","page":"Interface","title":"Watchers._flush!","text":"Flushes the watcher data.\n\n_flush!(\n    w::Watcher,\n    _::Val{:ccxt_order_book}\n) -> Union{Nothing, Dict{Symbol, Any}}\n\n\nThis function checks if the watcher view is empty and returns nothing if it is. Otherwise, it gets the range of data after the last flushed time from the buffer and saves it if the range has data. The last flushed time is then updated to the time of the last data in the buffer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._init!-Tuple{Watcher, Val{:ccxt_ohlcv_ticker}}-watchers-watchers","page":"Interface","title":"Watchers._init!","text":"Initializes the watcher for the OHLCV ticker.\n\n_init!(\n    w::Watcher,\n    _::Val{:ccxt_ohlcv_ticker}\n) -> Dict{Symbol, Any}\n\n\nThis function initializes the watcher with default view, temporary OHLCV, candle ticks, loaded symbols, and symbol locks. It also initializes the symbols and checks for the watcher.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._init!-Tuple{Watcher, Val{:ccxt_ohlcv}}-watchers-watchers","page":"Interface","title":"Watchers._init!","text":"Initializes the watcher\n\n_init!(w::Watcher, _::Val{:ccxt_ohlcv}) -> Dict{Symbol, Any}\n\n\nThis function initializes the watcher by setting up its attributes and preparing it for data fetching and processing. It sets the symbol, exchange, and time frame for the watcher, and prepares the trades buffer. It also sets the watcher's status to pending and initializes the last fetched and last flushed timestamps.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._load!-Tuple{Watcher, Val{:ccxt_ohlcv_candles}, Any}-watchers-watchers","page":"Interface","title":"Watchers._load!","text":"Loads the OHLCV data for a specific symbol.\n\n_load!(\n    w::Watcher,\n    _::Val{:ccxt_ohlcv_candles},\n    sym\n) -> Union{Nothing, Bool}\n\n\nThis function loads the OHLCV data for a specific symbol. If the symbol is not being tracked by the watcher or if the data for the symbol has already been loaded, the function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._load!-Tuple{Watcher, Val{:ccxt_ohlcv_ticker}, Any}-watchers-watchers","page":"Interface","title":"Watchers._load!","text":"Loads the OHLCV data for a specific symbol.\n\n_load!(\n    w::Watcher,\n    _::Val{:ccxt_ohlcv_ticker},\n    sym\n) -> Union{Nothing, Bool}\n\n\nThis function loads the OHLCV data for a specific symbol. If the symbol is not being tracked by the watcher or if the data for the symbol has already been loaded, the function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._process!-Tuple{Watcher, Val{:ccxt_ohlcv_ticker}}-watchers-watchers","page":"Interface","title":"Watchers._process!","text":"Processes the watcher data.\n\n_process!(w::Watcher, _::Val{:ccxt_ohlcv_ticker})\n\n\nThis function processes the watcher data by updating the OHLCV for each symbol in the last fetch. It does this in a synchronous manner, ensuring that all updates are completed before proceeding.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._process!-Tuple{Watcher, Val{:ccxt_ohlcv}}-watchers-watchers","page":"Interface","title":"Watchers._process!","text":"Processes the watcher data and updates the dataframe\n\n_process!(w::Watcher, _::Val{:ccxt_ohlcv})\n\n\nThis function processes the watcher data and updates the dataframe. It first ensures that when no trades happen, candles are still updated. Then, it converts trades to OHLCV format and appends the resulting data to the dataframe. If the dataframe is not empty, it resolves any discrepancies between the dataframe and the new data. Finally, it removes processed trades from the trades buffer.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._process!-Tuple{Watcher, Val{:ccxt_order_book}}-watchers-watchers","page":"Interface","title":"Watchers._process!","text":"Processes the watcher data.\n\n_process!(\n    w::Watcher,\n    _::Val{:ccxt_order_book}\n) -> Union{Nothing, Dict{Symbol, Any}}\n\n\nThis function processes the watcher data by appending it to the view. It uses the appendby function to append the last buffer value to the view, with a capacity limit.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers._start!-Tuple{Watcher, Val{:ccxt_ohlcv}}-watchers-watchers","page":"Interface","title":"Watchers._start!","text":"Starts the watcher and fetches data\n\n_start!(\n    w::Watcher,\n    _::Val{:ccxt_ohlcv}\n) -> Union{Watchers.WatchersImpls.var\"#_start!##4#_start!##5\"{Watcher{T}} where T, Watchers.WatchersImpls.var\"#trades_func#_start!##6\"{Watcher{T}, T1, Dict{Symbol, Any}} where {T, T1}}\n\n\nThis function starts the watcher and fetches data for the watcher's symbol and time frame. If the dataframe is not empty, it fetches data from the last date in the dataframe to the current date. It then checks the continuity of the data in the dataframe.\n\n\n\n\n\n","category":"method"},{"location":"watchers/watchers/#Watchers.WatchersImpls.@append_dict_data-Tuple{Any, Any, Any}-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.@append_dict_data","text":"Defines a closure that appends new data on each symbol dataframe\n\nThe append_dict_data macro takes a dictionary, data, and a maximum length variable. It defines a closure doappend that appends new data to each symbol dataframe in the dictionary. The macro ensures that the length of the dataframe does not exceed the provided maximum length.\n\n\n\n\n\n","category":"macro"},{"location":"watchers/watchers/#Watchers.WatchersImpls.@collect_buffer_data-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.@collect_buffer_data","text":"Collects data from a buffer and stores it in a dictionary\n\nThe collect_buffer_data macro takes a buffer variable, key type, value type, and an optional push function. It escapses the provided parameters and initializes a dictionary with the key type and vector of the value type. The push function is used to populate the dictionary with data from the buffer. If no push function is provided, a default one is used which pushes the ticker data into the dictionary. The dictionary is then returned after collecting all data from the buffer.\n\n\n\n\n\n","category":"macro"},{"location":"watchers/watchers/#Watchers.WatchersImpls.@parsedata-watchers-watchers","page":"Interface","title":"Watchers.WatchersImpls.@parsedata","text":"Converts market data into a NamedTuple.\n\nThis macro takes a tick type, a collection of market data, and an optional key (defaulting to \"symbol\"). It then converts each market data item into the specified tick type and constructs a NamedTuple where each entry corresponds to a market, with the key being the market's symbol and the value being the converted data.\n\n\n\n\n\n","category":"macro"},{"location":"exchanges/#Exchange-Integration","page":"Exchanges","title":"Exchange Integration","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Planar provides unified access to 100+ cryptocurrency exchanges through the CCXT library integration. This guide covers exchange setup, configuration, and advanced usage patterns for trading across multiple exchanges.","category":"page"},{"location":"exchanges/#Overview","page":"Exchanges","title":"Overview","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Planar's exchange system is built around the concept of exchange instances that provide a consistent interface regardless of the underlying exchange API. Each exchange is represented by a subtype of CcxtExchange that wraps the CCXT library functionality.","category":"page"},{"location":"exchanges/#Key-Features","page":"Exchanges","title":"Key Features","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"100+ Exchange Support - Access to major cryptocurrency exchanges via CCXT\nUnified Interface - Consistent API across all supported exchanges\nSandbox Support - Test trading strategies without real money\nMulti-Account Support - Manage multiple API keys per exchange\nReal-time Data - WebSocket and REST API support for live market data\nOrder Management - Unified order types and execution across exchanges","category":"page"},{"location":"exchanges/#CCXT-Integration","page":"Exchanges","title":"CCXT Integration","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Planar uses the CCXT library through Ccxt.jl to provide exchange connectivity. CCXT is a comprehensive cryptocurrency trading library that standardizes exchange APIs.","category":"page"},{"location":"exchanges/#Supported-Exchanges","page":"Exchanges","title":"Supported Exchanges","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Popular exchanges supported through CCXT include:","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Binance - World's largest cryptocurrency exchange\nBybit - Derivatives and spot trading\nKuCoin - Global cryptocurrency exchange\nCoinbase Pro - Professional trading platform\nKraken - Established European exchange\nOKX - Global crypto exchange and derivatives platform\nHuobi - Major Asian cryptocurrency exchange","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"For a complete list of supported exchanges, see the CCXT documentation.","category":"page"},{"location":"exchanges/#Exchange-Instance-Management","page":"Exchanges","title":"Exchange Instance Management","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Planar maintains one exchange instance per exchange configuration (sandbox/production and account combinations). This ensures efficient resource usage and consistent state management.","category":"page"},{"location":"exchanges/#Exchange-Configuration","page":"Exchanges","title":"Exchange Configuration","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Configure exchanges in your user/planar.toml file with exchange-specific settings:","category":"page"},{"location":"exchanges/#Basic-Configuration","page":"Exchanges","title":"Basic Configuration","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"# Binance configuration\n[binance]\nleveraged = \"from\"  # Leverage mode for margin trading\nsandbox = false     # Use production environment\n\n# Bybit configuration\n[bybit]\nfutures = true      # Enable futures trading\ntestnet = false     # Use production environment\n\n# KuCoin configuration\n[kucoin]\nfutures = false     # Spot trading only","category":"page"},{"location":"exchanges/#Advanced-Configuration-Options","page":"Exchanges","title":"Advanced Configuration Options","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"[binance]\nleveraged = \"from\"          # \"from\", \"to\", or \"both\"\nsandbox = false             # Production vs sandbox\ntimeout = 30000            # Request timeout in milliseconds\nrateLimit = 1200           # Rate limit in milliseconds\nenableRateLimit = true     # Enable automatic rate limiting","category":"page"},{"location":"exchanges/#API-Credentials","page":"Exchanges","title":"API Credentials","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Store API credentials securely in user/secrets.toml:","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"[exchanges.binance]\napiKey = \"your_binance_api_key\"\nsecret = \"your_binance_secret_key\"\n\n[exchanges.bybit]\napiKey = \"your_bybit_api_key\"\nsecret = \"your_bybit_secret_key\"\n\n[exchanges.coinbase]\napiKey = \"your_coinbase_api_key\"\nsecret = \"your_coinbase_secret_key\"\npassphrase = \"your_coinbase_passphrase\"","category":"page"},{"location":"exchanges/#Exchange-Features","page":"Exchanges","title":"Exchange Features","text":"","category":"section"},{"location":"exchanges/#Market-Data-Access","page":"Exchanges","title":"Market Data Access","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Access real-time and historical market data:","category":"page"},{"location":"exchanges/#Trading-Operations","page":"Exchanges","title":"Trading Operations","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Execute trades across different exchanges with a unified interface:","category":"page"},{"location":"exchanges/#Account-Information","page":"Exchanges","title":"Account Information","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Access account balances and trading history:","category":"page"},{"location":"exchanges/#Multi-Exchange-Trading","page":"Exchanges","title":"Multi-Exchange Trading","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Planar supports trading across multiple exchanges simultaneously:","category":"page"},{"location":"exchanges/#Exchange-Selection-Strategy","page":"Exchanges","title":"Exchange Selection Strategy","text":"","category":"section"},{"location":"exchanges/#Cross-Exchange-Arbitrage","page":"Exchanges","title":"Cross-Exchange Arbitrage","text":"","category":"section"},{"location":"exchanges/#Sandbox-and-Testing","page":"Exchanges","title":"Sandbox and Testing","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Use sandbox environments for safe testing:","category":"page"},{"location":"exchanges/#Sandbox-Configuration","page":"Exchanges","title":"Sandbox Configuration","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"[binance]\nsandbox = true  # Use Binance testnet\n\n[bybit]\ntestnet = true  # Use Bybit testnet","category":"page"},{"location":"exchanges/#Sandbox-API-Keys","page":"Exchanges","title":"Sandbox API Keys","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Configure separate API keys for sandbox environments:","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"[exchanges.binance_sandbox]\napiKey = \"testnet_api_key\"\nsecret = \"testnet_secret_key\"\n\n[exchanges.bybit_testnet]\napiKey = \"testnet_api_key\"\nsecret = \"testnet_secret_key\"","category":"page"},{"location":"exchanges/#Error-Handling-and-Resilience","page":"Exchanges","title":"Error Handling and Resilience","text":"","category":"section"},{"location":"exchanges/#Connection-Management","page":"Exchanges","title":"Connection Management","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Planar automatically handles connection issues and retries:","category":"page"},{"location":"exchanges/#Rate-Limiting","page":"Exchanges","title":"Rate Limiting","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"CCXT automatically handles rate limiting for most exchanges:","category":"page"},{"location":"exchanges/#Error-Types","page":"Exchanges","title":"Error Types","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Common exchange-related errors:","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"NetworkError - Connection issues\nExchangeError - Exchange-specific errors\nAuthenticationError - Invalid API credentials\nInsufficientFunds - Not enough balance for trade\nInvalidOrder - Order parameters are invalid","category":"page"},{"location":"exchanges/#Performance-Optimization","page":"Exchanges","title":"Performance Optimization","text":"","category":"section"},{"location":"exchanges/#Connection-Pooling","page":"Exchanges","title":"Connection Pooling","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Reuse exchange instances for better performance:","category":"page"},{"location":"exchanges/#Batch-Operations","page":"Exchanges","title":"Batch Operations","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Use batch operations when available:","category":"page"},{"location":"exchanges/#Troubleshooting","page":"Exchanges","title":"Troubleshooting","text":"","category":"section"},{"location":"exchanges/#Common-Issues","page":"Exchanges","title":"Common Issues","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"API Authentication Failures\nVerify API keys in user/secrets.toml\nCheck API key permissions on exchange\nEnsure IP whitelist includes your address\nConnection Timeouts\nCheck network connectivity\nIncrease timeout settings in configuration\nUse sandbox environment for testing\nRate Limit Exceeded\nEnable automatic rate limiting\nReduce request frequency\nUse WebSocket connections for real-time data\nMarket Not Available\nVerify symbol format (e.g., \"BTC/USDT\" vs \"BTCUSDT\")\nCheck if market is active on the exchange\nEnsure futures/spot configuration matches market type","category":"page"},{"location":"exchanges/#Debug-Mode","page":"Exchanges","title":"Debug Mode","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Enable debug logging for troubleshooting:","category":"page"},{"location":"exchanges/#Advanced-Usage","page":"Exchanges","title":"Advanced Usage","text":"","category":"section"},{"location":"exchanges/#Custom-Exchange-Implementation","page":"Exchanges","title":"Custom Exchange Implementation","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Extend Planar with custom exchange support:","category":"page"},{"location":"exchanges/#WebSocket-Integration","page":"Exchanges","title":"WebSocket Integration","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Use WebSocket connections for real-time data:","category":"page"},{"location":"exchanges/#Future-Developments","page":"Exchanges","title":"Future Developments","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Planned enhancements to exchange integration:","category":"page"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"DEX Support - Integration with decentralized exchanges\nAdditional Protocols - Support for more blockchain protocols  \nEnhanced WebSocket - Improved real-time data handling\nOrder Routing - Intelligent order routing across exchanges","category":"page"},{"location":"exchanges/#See-Also","page":"Exchanges","title":"See Also","text":"","category":"section"},{"location":"exchanges/","page":"Exchanges","title":"Exchanges","text":"Configuration Guide - Exchange configuration details\nStrategy Development - Using exchanges in strategies\nTroubleshooting - Exchange-specific problem resolution\nAPI Reference - Exchange API documentation\nCCXT Documentation - Underlying CCXT library reference","category":"page"},{"location":"data/#Data-Management","page":"Data Management","title":"Data Management","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The Data module provides comprehensive storage and management of OHLCV (Open, High, Low, Close, Volume) data and other time-series market data.","category":"page"},{"location":"data/#Quick-Navigation","page":"Data Management","title":"Quick Navigation","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Storage Architecture - Understanding Zarr and LMDB backends\nHistorical Data - Using Scrapers for bulk data collection\nReal-Time Data - Fetching live data from exchanges\nLive Streaming - Continuous data monitoring","category":"page"},{"location":"data/#Prerequisites","page":"Data Management","title":"Prerequisites","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Basic understanding of OHLCV data concepts\nFamiliarity with Exchange setup","category":"page"},{"location":"data/#Related-Topics","page":"Data Management","title":"Related Topics","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Strategy Development - Using data in trading strategies\nWatchers - Real-time data monitoring\nProcessing - Data transformation and analysis","category":"page"},{"location":"data/#Storage-Architecture","page":"Data Management","title":"Storage Architecture","text":"","category":"section"},{"location":"data/#Zarr-Backend","page":"Data Management","title":"Zarr Backend","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Planar uses Zarr as its primary storage backend, which offers several advantages:","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Columnar Storage: Optimized for array-based data, similar to Feather or Parquet\nFlexible Encoding: Supports different compression and encoding schemes\nStorage Agnostic: Can be backed by various storage layers, including network-based systems\nChunked Access: Efficient for time-series queries despite chunk-based reading","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The framework wraps a Zarr subtype of AbstractStore in a Planar.Data.ZarrInstance. The global ZarrInstance is accessible at Data.zi[], with LMDB as the default underlying store.","category":"page"},{"location":"data/#Data-Organization","page":"Data Management","title":"Data Organization","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"OHLCV data is organized hierarchically using Planar.Data.key_path:","category":"page"},{"location":"data/#Data-Architecture-Overview","page":"Data Management","title":"Data Architecture Overview","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The Data module provides a comprehensive data management system with the following key components:","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Storage Backend: Zarr arrays with LMDB as the default store\nData Organization: Hierarchical structure by exchange/source, pair, and timeframe\nData Types: OHLCV data, generic time-series data, and cached metadata\nAccess Patterns: Progressive loading for large datasets, contiguous time-series validation\nPerformance: Chunked storage, compression, and optimized indexing","category":"page"},{"location":"data/#Storage-Hierarchy","page":"Data Management","title":"Storage Hierarchy","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Data is organized in a hierarchical structure:","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"ZarrInstance/\n├── exchange_name/\n│   ├── pair_name/\n│   │   ├── [timeframe](guides/data-management.md#timeframes)/\n│   │   │   ├── timestamp\n│   │   │   ├── open\n│   │   │   ├── high\n│   │   │   ├── low\n│   │   │   ├── close\n│   │   │   └── volume\n│   │   └── ...\n│   └── ...\n└── ...","category":"page"},{"location":"data/#Data-Collection-Methods","page":"Data Management","title":"Data Collection Methods","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Planar provides multiple methods for collecting market data, each optimized for different use cases:","category":"page"},{"location":"data/#Historical-Data-with-Scrapers","page":"Data Management","title":"Historical Data with Scrapers","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The Scrapers module provides access to historical data archives from major exchanges, offering the most efficient method for obtaining large amounts of historical data.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Supported Exchanges: Binance and Bybit archives","category":"page"},{"location":"data/#Basic-Scraper-Usage","page":"Data Management","title":"Basic Scraper Usage","text":"","category":"section"},{"location":"data/#Advanced-Scraper-Examples","page":"Data Management","title":"Advanced Scraper Examples","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Download multiple symbols and filter by quote currency using bn.binancesyms() and scr.selectsyms().","category":"page"},{"location":"data/#Market-Types-and-Frequencies","page":"Data Management","title":"Market Types and Frequencies","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Use different market types (:spot, :um, :cm), frequencies (:daily, :monthly), and data kinds (:klines, :trades, :aggTrades).","category":"page"},{"location":"data/#Error-Handling-and-Data-Validation","page":"Data Management","title":"Error Handling and Data Validation","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"warning: Download Caching\nDownloads are cached - requesting the same pair path again will only download newer archives. If data becomes corrupted, pass reset=true to force a complete redownload.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"tip: Performance Optimization\nMonthly Archives: Use for historical backtesting-mode) (faster download, larger chunks)\nDaily Archives: Use for recent data or frequent updates\nParallel Downloads: Consider for multiple symbols, but respect exchange rate limits ","category":"page"},{"location":"data/#Real-Time-Data-with-Fetch","page":"Data Management","title":"Real-Time Data with Fetch","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The Fetch module downloads data directly from exchanges using CCXT, making it ideal for:","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Getting the most recent market data\nFilling gaps in historical data\nReal-time data updates for live trading","category":"page"},{"location":"data/#Basic-Fetch-Usage","page":"Data Management","title":"Basic Fetch Usage","text":"","category":"section"},{"location":"data/#Advanced-Fetch-Examples","page":"Data Management","title":"Advanced Fetch Examples","text":"","category":"section"},{"location":"data/#Multi-Exchange-Data-Collection","page":"Data Management","title":"Multi-Exchange Data Collection","text":"","category":"section"},{"location":"data/#Rate-Limit-Management","page":"Data Management","title":"Rate Limit Management","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Use delays between requests and validate data quality. Implement error handling for failed requests.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"warning: Rate Limit Considerations\nDirect exchange fetching is heavily rate-limited, especially for smaller timeframes. Use archives for bulk historical data collection.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"tip: Fetch Best Practices\nRecent Updates: Use fetch for recent data updates and gap filling\nRate Limiting: Implement delays between requests to respect exchange limits\nData Validation: Always validate fetched data before using in strategies\nRaw Data: Use fetch_candles for unchecked data when you need raw exchange responses","category":"page"},{"location":"data/#Live-Data-Streaming-with-Watchers","page":"Data Management","title":"Live Data Streaming with Watchers","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The Watchers module enables real-time data tracking from exchanges and other sources, storing data locally for:","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Live trading operations\nReal-time data analysis\nContinuous market monitoring","category":"page"},{"location":"data/#OHLCV-Ticker-Watcher","page":"Data Management","title":"OHLCV Ticker Watcher","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The ticker watcher monitors multiple pairs simultaneously using exchange ticker endpoints:","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"As a convention, the view property of a watcher shows the processed data. In this case, the candles processed by the ohlcv_ticker_watcher will be stored in a dict.","category":"page"},{"location":"data/#Single-Pair-OHLCV-Watcher","page":"Data Management","title":"Single-Pair OHLCV Watcher","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"There is another OHLCV watcher based on trades, that tracks only one pair at a time with higher precision:","category":"page"},{"location":"data/#Watcher-Configuration","page":"Data Management","title":"Watcher Configuration","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Configure watchers with custom intervals using timeout_interval, fetch_interval, and flush_interval parameters. Use wc.start!() and wc.stop!() for lifecycle management.","category":"page"},{"location":"data/#Orderbook-Watcher","page":"Data Management","title":"Orderbook Watcher","text":"","category":"section"},{"location":"data/#Custom-Data-Processing","page":"Data Management","title":"Custom Data Processing","text":"","category":"section"},{"location":"data/#Error-Handling-and-Resilience","page":"Data Management","title":"Error Handling and Resilience","text":"","category":"section"},{"location":"data/#Data-Persistence-and-Storage","page":"Data Management","title":"Data Persistence and Storage","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Other implemented watchers are the orderbook watcher, and watchers that parse data feeds from 3rd party APIs.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"tip: Watcher Best Practices\nMonitor watcher health regularly with wc.isrunning()\nImplement proper error handling and reconnection logic\nSave data periodically to prevent loss during interruptions\nUse appropriate fetch intervals to balance data freshness with rate limits\nConsider using multiple watchers for redundancy in critical applications","category":"page"},{"location":"data/#Custom-Data-Sources","page":"Data Management","title":"Custom Data Sources","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Assuming you have your own pipeline to fetch candles, you can use the functions Planar.Data.save_ohlcv and Planar.Data.load_ohlcv to manage the data.","category":"page"},{"location":"data/#Basic-Custom-Data-Integration","page":"Data Management","title":"Basic Custom Data Integration","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"To save the data, it is easier if you pass a standard OHLCV dataframe, otherwise you need to provide a saved_col argument that indicates the correct column index to use as the timestamp column (or use lower-level functions).","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"To load the data back:","category":"page"},{"location":"data/#Advanced-Custom-Data-Examples","page":"Data Management","title":"Advanced Custom Data Examples","text":"","category":"section"},{"location":"data/#Custom-Data-Validation","page":"Data Management","title":"Custom Data Validation","text":"","category":"section"},{"location":"data/#Working-with-Large-Custom-Datasets","page":"Data Management","title":"Working with Large Custom Datasets","text":"","category":"section"},{"location":"data/#Generic-Data-Storage","page":"Data Management","title":"Generic Data Storage","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"If you want to save other kinds of data, there are the Planar.Data.save_data and Planar.Data.load_data functions. Unlike the ohlcv functions, these functions don't check for contiguity, so it is possible to store sparse data. The data, however, still requires a timestamp column, because data when saved can either be prepend or appended, therefore an index must still be available to maintain order.","category":"page"},{"location":"data/#Serialized-Data-Storage","page":"Data Management","title":"Serialized Data Storage","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"While OHLCV data requires a concrete type for storage (default Float64) generic data can either be saved with a shared type, or instead serialized. To serialize the data while saving pass the serialize=true argument to save_data, while to load serialized data pass serialized=true to load_data.","category":"page"},{"location":"data/#Progressive-Data-Loading","page":"Data Management","title":"Progressive Data Loading","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"When loading data from storage, you can directly use the ZArray by passing raw=true to load_ohlcv or as_z=true or with_z=true to load_data. By managing the array directly you can avoid materializing the entire dataset, which is required when dealing with large amounts of data.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Data is returned as a DataFrame with open,high,low,close,volume,timestamp columns. Since these save/load functions require a timestamp column, they check that the provided index is contiguous, it should not have missing timestamps, according to the subject timeframe. It is possible to disable those checks by passing check=:none.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"warning: Data Contiguity\nOHLCV save/load functions validate timestamp contiguity by default. Use check=:none to disable validation for irregular data.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"tip: Performance Optimization\nUse progressive loading (raw=true) for datasets larger than available memory\nProcess data in chunks when dealing with very large time series\nConsider serialization for complex data structures that don't fit standard numeric types","category":"page"},{"location":"data/#Data-Indexing-and-Access-Patterns","page":"Data Management","title":"Data Indexing and Access Patterns","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The Data module implements dataframe indexing by dates such that you can conveniently access rows by:","category":"page"},{"location":"data/#Advanced-Indexing-Examples","page":"Data Management","title":"Advanced Indexing Examples","text":"","category":"section"},{"location":"data/#Timeframe-Management","page":"Data Management","title":"Timeframe Management","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"With ohlcv data, we can access the timeframe of the series directly from the dataframe by calling timeframe!(df). This will either return the previously set timeframe or infer it from the timestamp column. You can set the timeframe by calling e.g. timeframe!(df, tf\"1m\") or timeframe!! to overwrite it.","category":"page"},{"location":"data/#Efficient-Data-Slicing","page":"Data Management","title":"Efficient Data Slicing","text":"","category":"section"},{"location":"data/#Data-Aggregation-and-Resampling","page":"Data Management","title":"Data Aggregation and Resampling","text":"","category":"section"},{"location":"data/#Caching-and-Performance-Optimization","page":"Data Management","title":"Caching and Performance Optimization","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"Data.Cache.save_cache and Data.Cache.load_cache can be used to store generic metadata like JSON payloads. The data is saved in the Planar data directory which is either under the XDG_CACHE_DIR if set or under $HOME/.cache by default.","category":"page"},{"location":"data/#Basic-Caching-Usage","page":"Data Management","title":"Basic Caching Usage","text":"","category":"section"},{"location":"data/#Advanced-Caching-Examples","page":"Data Management","title":"Advanced Caching Examples","text":"","category":"section"},{"location":"data/#Performance-Optimization-Strategies","page":"Data Management","title":"Performance Optimization Strategies","text":"","category":"section"},{"location":"data/#Cache-Management","page":"Data Management","title":"Cache Management","text":"","category":"section"},{"location":"data/#Storage-Configuration-Optimization","page":"Data Management","title":"Storage Configuration Optimization","text":"","category":"section"},{"location":"data/#Data-Processing-and-Transformation","page":"Data Management","title":"Data Processing and Transformation","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"The Data module provides comprehensive tools for processing and transforming financial data. This section covers data cleaning, validation, and transformation techniques.","category":"page"},{"location":"data/#Data-Cleaning-and-Validation","page":"Data Management","title":"Data Cleaning and Validation","text":"","category":"section"},{"location":"data/#Gap-Detection-and-Filling","page":"Data Management","title":"Gap Detection and Filling","text":"","category":"section"},{"location":"data/#Data-Transformation-and-Feature-Engineering","page":"Data Management","title":"Data Transformation and Feature Engineering","text":"","category":"section"},{"location":"data/#Storage-Configuration-and-Optimization","page":"Data Management","title":"Storage Configuration and Optimization","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"This section covers advanced storage configuration, optimization techniques, and troubleshooting for the Zarr/LMDB backend.","category":"page"},{"location":"data/#Zarr-Storage-Configuration","page":"Data Management","title":"Zarr Storage Configuration","text":"","category":"section"},{"location":"data/#LMDB-Configuration-and-Tuning","page":"Data Management","title":"LMDB Configuration and Tuning","text":"","category":"section"},{"location":"data/#Storage-Optimization-Strategies","page":"Data Management","title":"Storage Optimization Strategies","text":"","category":"section"},{"location":"data/#Data-Validation-and-Integrity","page":"Data Management","title":"Data Validation and Integrity","text":"","category":"section"},{"location":"data/#Troubleshooting-Storage-Issues","page":"Data Management","title":"Troubleshooting Storage Issues","text":"","category":"section"},{"location":"data/#Progressive-Data-Loading-2","page":"Data Management","title":"Progressive Data Loading","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"When loading data from storage, you can directly use the ZArray by passing raw=true to load_ohlcv or as_z=true or with_z=true to load_data. By managing the array directly you can avoid materializing the entire dataset, which is required when dealing with large amounts of data.","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"tip: Performance Best Practices\nUse progressive loading (raw=true) for datasets larger than available memory\nImplement caching for expensive computations with appropriate TTL\nMonitor cache size and clean up old entries regularly\nUse chunked processing for very large datasets\nConsider serialization for complex data structures that don't fit standard numeric types","category":"page"},{"location":"data/#Real-Time-Data-Pipelines-and-Monitoring","page":"Data Management","title":"Real-Time Data Pipelines and Monitoring","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"This section covers advanced real-time data collection, processing, and monitoring using the Watchers system.","category":"page"},{"location":"data/#Real-Time-Data-Pipeline-Architecture","page":"Data Management","title":"Real-Time Data Pipeline Architecture","text":"","category":"section"},{"location":"data/#Advanced-Watcher-Management","page":"Data Management","title":"Advanced Watcher Management","text":"","category":"section"},{"location":"data/#Real-Time-Data-Processing","page":"Data Management","title":"Real-Time Data Processing","text":"","category":"section"},{"location":"data/#Monitoring-and-Alerting","page":"Data Management","title":"Monitoring and Alerting","text":"","category":"section"},{"location":"data/#Data-Quality-Monitoring","page":"Data Management","title":"Data Quality Monitoring","text":"","category":"section"},{"location":"data/#Complete-Pipeline-Example","page":"Data Management","title":"Complete Pipeline Example","text":"","category":"section"},{"location":"data/","page":"Data Management","title":"Data Management","text":"warning: Storage Considerations\nAlways backup data before performing repair operations\nMonitor disk space regularly, especially when using compression\nValidate data integrity periodically to catch corruption early\nUse appropriate LMDB map sizes to avoid out-of-space errors","category":"page"},{"location":"data/","page":"Data Management","title":"Data Management","text":"tip: Real-Time Data Best Practices\nImplement comprehensive monitoring and alerting for production systems\nUse multiple watchers per exchange for redundancy\nMonitor data quality continuously to catch issues early\nImplement automatic restart mechanisms for failed watchers\nCache processed data for quick access by trading strategies\nSet up proper logging and error handling for debugging issues","category":"page"},{"location":"guides/#Development-Guides","page":"Development Guides","title":"Development Guides","text":"","category":"section"},{"location":"guides/","page":"Development Guides","title":"Development Guides","text":"This section contains comprehensive guides for developing with Planar. These guides provide in-depth coverage of core concepts and practical implementation details.","category":"page"},{"location":"guides/#Available-Guides","page":"Development Guides","title":"Available Guides","text":"","category":"section"},{"location":"guides/","page":"Development Guides","title":"Development Guides","text":"Strategy Development - Complete guide to building trading strategies using Julia's dispatch system, covering everything from basic concepts to advanced patterns\nData Management - Comprehensive data management system for OHLCV and time-series market data using multiple collection methods and storage backends\nExecution Modes - Understanding and transitioning between Sim, Paper, and Live trading modes with proper risk management","category":"page"},{"location":"guides/#Coming-Soon","page":"Development Guides","title":"Coming Soon","text":"","category":"section"},{"location":"guides/","page":"Development Guides","title":"Development Guides","text":"Optimization - Parameter tuning and backtesting optimization techniques\nVisualization - Plotting and analysis of strategy performance and market data","category":"page"},{"location":"guides/#Getting-Started","page":"Development Guides","title":"Getting Started","text":"","category":"section"},{"location":"guides/","page":"Development Guides","title":"Development Guides","text":"If you're new to Planar, we recommend starting with the Getting Started section first, then working through these guides in order:","category":"page"},{"location":"guides/","page":"Development Guides","title":"Development Guides","text":"Strategy Development - Learn the core concepts and patterns\nData Management - Understand how to work with market data\nExecution Modes - Progress from simulation to live trading","category":"page"},{"location":"guides/#See-Also","page":"Development Guides","title":"See Also","text":"","category":"section"},{"location":"guides/","page":"Development Guides","title":"Development Guides","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management","category":"page"},{"location":"guides/#Next-Steps","page":"Development Guides","title":"Next Steps","text":"","category":"section"},{"location":"guides/","page":"Development Guides","title":"Development Guides","text":"Once you're comfortable with the guides, explore the Advanced topics or dive into the API Reference for detailed function documentation.","category":"page"},{"location":"API/optimization/#Optimization","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"API/optimization/#Optim.Optim","page":"Optimization","title":"Optim.Optim","text":"Optimization\n\nThe Optimization module provides tools and abstractions for defining, configuring, and executing optimization routines within the Planar.jl framework. It is designed to support a variety of optimization strategies, including parameter tuning, strategy selection, and performance evaluation for trading systems and related applications. The module integrates seamlessly with other Planar.jl components, ensuring type safety, extensibility, and efficient execution.\n\nMain features:\n\nFlexible optimization workflows for trading strategies and system parameters\nIntegration with Planar.jl's data, strategy, and execution layers\nSupport for precompilation and dynamic loading\nExtensible design for custom optimization algorithms\n\nComparison of Search Methods\n\nFunction Data Segmentation Parameter Selection Main Use Case\nprogsearch Segments by offset Filters after each round Robustness across data segments\nbroadsearch Slices by fixed size Filters after each slice Adapting to changing regimes over time\nslidetest Slides by timeframe No parameter search Granular, rolling/walk-forward backtesting\n\nprogsearch: Progressive grid search with filtering and offsetting for robustness.\nbroadsearch: Sequential grid search over contiguous slices, filtering at each step.\nslidetest: Sliding window backtest, moving by the smallest timeframe increment.\n\nUser-facing Optimization/Search Functions\n\ngridsearch(s::Strategy; ...): Grid search over parameter combinations for a strategy.\nprogsearch(s::Strategy; ...): Progressive search, running multiple grid searches with filtering and resampling.\nslidetest(s::Strategy; ...): Slides a window over the backtesting period, running optimizations at each step.\nbroadsearch(s::Strategy; ...): Performs a broad search by slicing the context and optimizing in each slice.\noptimize(s::Strategy; ...): Black-box optimization using the Optimization.jl framework (supports global optimization algorithms).\nboptimize!(s::Strategy; ...): Bayesian optimization using Gaussian Processes (requires BayesExt and BayesianOptimization.jl).\n\n\n\n\n\n","category":"module"},{"location":"API/optimization/#Optim.DEFAULT_OBJ","page":"Optimization","title":"Optim.DEFAULT_OBJ","text":"A constant representing the default objective value.\n\n\n\n\n\n","category":"constant"},{"location":"API/optimization/#Optim.RUNNING","page":"Optimization","title":"Optim.RUNNING","text":"A constant instance of OptRunning initialized with false.\n\n\n\n\n\n","category":"constant"},{"location":"API/optimization/#Optim.disabled_methods","page":"Optimization","title":"Optim.disabled_methods","text":"A set of optimization methods that are disabled and not used with the BlackBoxOptim package.\n\n\n\n\n\n","category":"constant"},{"location":"API/optimization/#Optim.BestColumn","page":"Optimization","title":"Optim.BestColumn","text":"A column in the progress bar representing the best optimization result.\n\njob\nsegments\nmeasure\nbest\n\nThis struct represents a column in the progress bar that displays the best result of the optimization job. It contains a ProgressJob, a vector of Segment objects, a Measure object, and a reference to the best result. The constructor creates a Segment with a string representation of the best result and sets the width of the measure to 15.\n\n\n\n\n\n","category":"type"},{"location":"API/optimization/#Optim.ContextSpace","page":"Optimization","title":"Optim.ContextSpace","text":"A named tuple representing the context and space in the optimization process.\n\n\n\n\n\n","category":"type"},{"location":"API/optimization/#Optim.ETAColumn","page":"Optimization","title":"Optim.ETAColumn","text":"A column in the progress bar representing the estimated time remaining.\n\njob\nsegments\nmeasure\nstart_time\nlast_update\ncompleted\ntotal\n\nThis struct represents a column in the progress bar that displays the estimated time remaining for the optimization job. It contains a ProgressJob, a vector of Segment objects, a Measure object, and references to track progress timing. The constructor creates a Segment with a string representation of the ETA and sets the width of the measure to 15.\n\n\n\n\n\n","category":"type"},{"location":"API/optimization/#Optim.OptRunning","page":"Optimization","title":"Optim.OptRunning","text":"A mutable structure representing the running state of an optimization process.\n\nvalue\n\nThis structure contains a single field value which is an atomic boolean. It is used to indicate whether the optimization process is currently running or not.\n\n\n\n\n\n","category":"type"},{"location":"API/optimization/#Optim.OptSession","page":"Optimization","title":"Optim.OptSession","text":"A structure representing an optimization session.\n\ns\nctx\nparams\nattrs\nresults\nbest\nlock\ns_clones\nctx_clones\n\nThis structure stores all the evaluated parameters combinations during an optimization session. It contains fields for the strategy, context, parameters, attributes, results, best result, lock, and clones of the strategy and context for each thread. The constructor for OptSession also takes an offset and number of threads as optional parameters, with default values of 0 and the number of available threads, respectively.\n\n\n\n\n\n","category":"type"},{"location":"API/optimization/#Optim.ParamsColumn","page":"Optimization","title":"Optim.ParamsColumn","text":"A column in the progress bar representing parameters.\n\njob\nsegments\nmeasure\nparams\n\nThis struct represents a column in the progress bar that displays the parameters of the optimization job. It contains a ProgressJob, a vector of Segment objects, a Measure object, and a reference to the parameters. The constructor creates a Segment with a string representation of the parameters and sets the width of the measure to 15.\n\n\n\n\n\n","category":"type"},{"location":"API/optimization/#Misc.call!-Tuple{Strategy, Any, Executors.OptRun}","page":"Optimization","title":"Misc.call!","text":"Applies parameters to strategy before backtest\n\ncall!(_::Strategy, params, _::Executors.OptRun)\n\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Misc.call!-Tuple{Strategy, Executors.OptMinimize}","page":"Optimization","title":"Misc.call!","text":"Indicates if the optimization is a minimization problem.\n\ncall!(_::Strategy, _::Executors.OptMinimize) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Misc.call!-Tuple{Strategy, Executors.OptSetup}","page":"Optimization","title":"Misc.call!","text":"Returns Optim.ContextSpace for backtesting\n\ncall!(_::Strategy, _::Executors.OptSetup)\n\n\nThe ctx field (Executors.Context) specifies the backtest time period, while bounds is a tuple of (lower, upper) bounds for the optimization parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim._get_color_and_update_best-Tuple{Any, Any, Any}","page":"Optimization","title":"Optim._get_color_and_update_best","text":"Multi-threaded optimization function.\n\n_get_color_and_update_best(\n    sess,\n    obj,\n    pnl\n) -> Tuple{String, String}\n\n\nThe function takes four arguments: splits, backtest_func, median_func, and obj_type. splits is the number of splits for the optimization process, backtest_func is the backtest function, median_func is the function to calculate the median, and obj_type is the type of the objective. The function returns a function that performs a multi-threaded optimization for a given set of parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim._single_opt_func-Tuple{Any, Any, Any, Any, Vararg{Any}}","page":"Optimization","title":"Optim._single_opt_func","text":"Single-threaded optimization function.\n\n_single_opt_func(\n    sess,\n    splits,\n    backtest_func,\n    median_func,\n    args...\n) -> Optim.var\"#single_backtest_func#_single_opt_func##0\"\n\n\nThe function takes four arguments: splits, backtest_func, median_func, and obj_type. splits is the number of splits for the optimization process, backtest_func is the backtest function, median_func is the function to calculate the median, and obj_type is the type of the objective. The function returns a function that performs a single-threaded optimization for a given set of parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim._spacedims-Tuple{Any}","page":"Optimization","title":"Optim._spacedims","text":"Returns the dimension of the search space.\n\n_spacedims(params) -> Any\n\n\nThis function takes the parameters as input, which should include lower and upper bounds arrays as the second and third elements. It asserts that the lengths of these arrays are equal and returns their common length, which represents the dimension of the search space.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim._tostring-Tuple{Any, Any}","page":"Optimization","title":"Optim._tostring","text":"Converts the provided parameters into a string representation.\n\n_tostring(prefix, params) -> String\n\n\nThe function takes a prefix and a set of parameters as input. It joins the prefix and the parameters into a single string, with each parameter converted to a compact number representation. The resulting string is then truncated to fit the display size.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.agg-Tuple{DataFrames.DataFrame}","page":"Optimization","title":"Optim.agg","text":"agg(df::DataFrame; reduce_func=mean, agg_func=median)\n\nAggregates the DataFrame df by grouping on all columns except :obj, :cash, :pnl, and :trades. Applies reduce_func to each group, then agg_func to the reduced results.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.agg-Tuple{OptSession}","page":"Optimization","title":"Optim.agg","text":"Groups session results by repeat and aggregates metrics columns.\n\nagg(\n    sess::OptSession;\n    sort_by,\n    filter_zero_trades\n) -> DataFrames.DataFrame\n\n\nsess: The optimization session containing results\nsort_by: Column to sort by (default: :pnl_avg)\nfilter_zero_trades: Filter out rows with 0 trades (default: true)\n\nReturns a DataFrame with one row per unique parameter combination, containing:\n\nParameter columns (from first row of each group)\nAggregated metrics: average, median, min, max for obj, cash, pnl, trades\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.apply_precision-Tuple{Any, Strategy}","page":"Optimization","title":"Optim.apply_precision","text":"Applies precision constraints to optimization parameters.\n\napply_precision(u, s::Strategy) -> Any\n\n\nThis function rounds parameters according to the precision specification stored in the strategy's attributes. If no precision is specified, returns the parameters unchanged.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.bbo_fitness_scheme-Tuple{Strategy, Any}","page":"Optimization","title":"Optim.bbo_fitness_scheme","text":"Determines the fitness scheme for a given strategy and number of objectives.\n\nbbo_fitness_scheme(\n    s::Strategy,\n    n_obj\n) -> BlackBoxOptim.ParetoFitnessScheme\n\n\nThis function takes a strategy and a number of objectives as input. It checks if the strategy has a custom weights function defined in its attributes. If it does, this function is used as the aggregator in the ParetoFitnessScheme. If not, a default ParetoFitnessScheme is returned.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.bbomethods","page":"Optimization","title":"Optim.bbomethods","text":"Returns a set of optimization methods supported by BlackBoxOptim.\n\nbbomethods() -> Set{Symbol}\nbbomethods(multi) -> Set\n\n\nThis function filters the methods based on the multi parameter and excludes the methods listed in disabled_methods. If multi is true, it returns multi-objective methods, otherwise it returns single-objective methods.\n\n\n\n\n\n","category":"function"},{"location":"API/optimization/#Optim.broadsearch-Tuple{Strategy}","page":"Optimization","title":"Optim.broadsearch","text":"Performs a broad search optimization that progressively moves through the context range.\n\nbroadsearch(s::Strategy; slice_size, sort_by, kwargs...)\n\n\nslice_size: Size of each slice in terms of strategy timeframe periods. If a float between 0 and 1, it is interpreted as a fraction of the total steps (default: 0.2, i.e., 1/5 of the total steps)\nsort_by: Column to sort results by (:pnl or :obj, default: :pnl)\n\nThe search starts with the first slice of the context and at each iteration:\n\nMoves to the next contiguous slice\nFilters parameters based on filter_func\nContinues until reaching the end of the context\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.ctxfromstrat-Tuple{Any}","page":"Optimization","title":"Optim.ctxfromstrat","text":"Extracts the context, parameters, and bounds from a given strategy.\n\nctxfromstrat(s)\n\n\nThis function takes a strategy as input and returns the context, parameters, and bounds associated with that strategy. The bounds can be specified as:\n\nA tuple of (lower, upper) bounds\nA function that returns bounds\nA NamedTuple with :bounds and optional :precision and :categorical fields\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.ctxsteps-Tuple{Any, Any, Any}","page":"Optimization","title":"Optim.ctxsteps","text":"Calculates the small and big steps for the optimization context.\n\nctxsteps(\n    ctx,\n    splits,\n    wp\n) -> NamedTuple{(:small_step, :big_step), <:Tuple{Any, Any}}\n\n\nThe function takes two arguments: ctx and splits. ctx is the optimization context and splits is the number of splits for the optimization process. The function returns a named tuple with small_step and big_step which represent the step size for the optimization process.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.define_backtest_func-Tuple{Any, Any, Any}","page":"Optimization","title":"Optim.define_backtest_func","text":"Defines the backtest function for an optimization session.\n\ndefine_backtest_func(\n    sess,\n    small_step,\n    big_step;\n    verbose\n) -> Optim.var\"#opt_backtest_func#38\"{Bool}\n\n\nThe function takes three arguments: sess, small_step, and big_step. sess is the optimization session, small_step is the small step size for the optimization process, and big_step is the big step size for the optimization process. The function returns a function that performs a backtest for a given set of parameters and a given iteration number.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.define_median_func-Tuple{Any}","page":"Optimization","title":"Optim.define_median_func","text":"Defines the median function for multi-objective mode.\n\ndefine_median_func(\n    splits\n) -> Union{Optim.var\"#median_tuple#define_median_func##0\", typeof(Statistics.median)}\n\n\nThe function takes a boolean argument ismulti which indicates if the optimization is multi-objective. If ismulti is true, the function returns a function that calculates the median over all the repeated iterations. Otherwise, it returns a function that calculates the median of a given array.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.define_opt_func-Tuple{Strategy}","page":"Optimization","title":"Optim.define_opt_func","text":"Defines the optimization function for a given strategy.\n\ndefine_opt_func(\n    s::Strategy;\n    backtest_func,\n    split_test,\n    splits,\n    n_jobs,\n    obj_type,\n    isthreaded,\n    sess\n)\n\n\nThe function takes several arguments: s, backtest_func, ismulti, splits, obj_type, and isthreaded. s is the strategy, backtest_func is the backtest function, ismulti indicates if the optimization is multi-objective, splits is the number of splits for the optimization process, obj_type is the type of the objective, and isthreaded indicates if the optimization is threaded. The function returns the appropriate optimization function based on these parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.delete_sessions!-Tuple{String}","page":"Optimization","title":"Optim.delete_sessions!","text":"Clears optimization sessions of a strategy.\n\ndelete_sessions!(s_name::String; keep_by, zi)\n\n\nThe function accepts a strategy name s_name and an optional keep_by dictionary. If keep_by is provided, sessions matching these attributes (ctx, params, or attrs) are not deleted. It checks each session, and deletes it if it doesn't match keep_by or if keep_by is empty.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.extbayes!-Tuple{}","page":"Optimization","title":"Optim.extbayes!","text":"Loads the BayesianOptimization extension.\n\nThe function checks if the BayesianOptimization package is installed in the current environment. If not, it prompts the user to add it to the main environment.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.filter_results-Tuple{Strategy, Any}","page":"Optimization","title":"Optim.filter_results","text":"Filters the optimization results based on certain criteria.\n\nfilter_results(::Strategy, sess; cut, min_results) -> Any\n\n\nThe function takes a strategy and a session as input, along with optional parameters for cut and minimum results. It filters the results based on the cut value and the minimum number of results.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.filtervecs-Union{Tuple{Array{Vector{T}, 1}}, Tuple{T}, Tuple{Array{Vector{T}, 1}, Function}} where T","page":"Optimization","title":"Optim.filtervecs","text":"Filters a vector of vectors across dimension 2.\n\nfiltervecs(\n    vov::Array{Array{T, 1}, 1};\n    ...\n) -> Vector{Vector{Float64}}\nfiltervecs(\n    vov::Array{Array{T, 1}, 1},\n    filter_func::Function;\n    default_val\n) -> Vector{Vector{Float64}}\n\n\nThis function takes a vector of vectors vov and a filter function filter_func. It iterates across dimension 2 (columns) and constructs a new vector of vectors where each element is a filtered list of the corresponding elements from the input vector of vectors.\n\nExamples\n\nvov = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfilter_func = x -> x > 2\nresult = filtervecs(vov, filter_func)\n# Result: [[3], [4, 5, 6], [7, 8, 9]]\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.get_params","page":"Optimization","title":"Optim.get_params","text":"Extracts parameter values from a specific row as a named tuple.\n\nget_params(df::DataFrames.DataFrame) -> NamedTuple\nget_params(\n    df::DataFrames.DataFrame,\n    row_idx::Int64\n) -> NamedTuple\n\n\ndf: DataFrame containing aggregated results (from agg function)\nrow_idx: Row index to extract parameters from (default: 1 for best result)\n\nReturns a named tuple with parameter names as keys and their values.\n\n\n\n\n\n","category":"function"},{"location":"API/optimization/#Optim.gridfromparams-Tuple{Any}","page":"Optimization","title":"Optim.gridfromparams","text":"Generates a grid from the provided parameters.\n\ngridfromparams(params) -> Any\n\n\nThe function takes a set of parameters as input. It generates a grid by taking the product of the parameters and reshaping it to the length of the parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.gridfromresults-Tuple{OptSession, Any}","page":"Optimization","title":"Optim.gridfromresults","text":"Generates a grid from the optimization results.\n\ngridfromresults(sess::OptSession, results; kwargs...) -> Any\n\n\nThe function takes an optimization session and results as input. It generates a grid by extracting the parameters from each row of the results.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.gridpbar!-Tuple{Any, Any}","page":"Optimization","title":"Optim.gridpbar!","text":"Initializes a progress bar for grid optimization.\n\ngridpbar!(\n    sess,\n    first_params\n) -> Tuple{Base.RefValue, Tuple{Base.RefValue{Dates.DateTime}, Base.RefValue{Int64}, Base.RefValue{Int64}}}\n\n\nThis function sets up a progress bar for the grid optimization process. It creates a ParamsColumn, a BestColumn, and an ETAColumn and adds them to the default columns. The function returns a tuple of (currentparams, etarefs) where eta_refs contains the ETA column references.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.gridsearch-Tuple{SimStrategy}","page":"Optimization","title":"Optim.gridsearch","text":"Backtests the strategy across combination of parameters.\n\ngridsearch(\n    s::SimStrategy;\n    seed,\n    splits,\n    n_jobs,\n    save_freq,\n    resume,\n    logging,\n    random_search,\n    zi,\n    grid_itr,\n    offset,\n    ctx\n)\n\n\nseed: random seed set before each backtest run.\nsplits: the number segments into which the context is split.\nsave_freq: how frequently (Period) to save results, when nothing (default) saving is skipped.\nlogging: enabled logging\nrandom_search: shuffle parameters combinations before iterations\n\nOne parameter combination runs splits times, where each run uses a period that is a segment of the full period of the given Context given. (The Context comes from the strategy call!(s, params, OptRun())\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.isrunning-Tuple{}","page":"Optimization","title":"Optim.isrunning","text":"Checks if the optimization process is currently running.\n\nisrunning() -> Bool\n\n\nThis function returns the value field of the RUNNING instance, indicating whether the optimization process is currently running.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.isthreadsafe-Tuple{Strategy}","page":"Optimization","title":"Optim.isthreadsafe","text":"Tests if if the strategy is thread safe by looking up the THREADSAFE global. \n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.load_session","page":"Optimization","title":"Optim.load_session","text":"Loads an optimization session from storage.\n\nload_session(name; ...) -> Any\nload_session(name, startstop; ...) -> Any\nload_session(name, startstop, params_k; ...) -> Any\nload_session(\n    name,\n    startstop,\n    params_k,\n    code;\n    as_z,\n    results_only,\n    s,\n    zi\n) -> Any\n\n\nThis function loads an optimization session from the provided zarr instance zi based on the given parameters. The parameters include the strategy name, start and stop date of the backtesting context, the first letter of every parameter, and a hash of the parameters and attributes truncated to 4 characters. The function returns the loaded session, either as a zarr array if as_z is true, or as an OptSession object otherwise. If results_only is true, only the results DataFrame of the session is returned.\n\n\n\n\n\n","category":"function"},{"location":"API/optimization/#Optim.log_path","page":"Optimization","title":"Optim.log_path","text":"Generates the path for the log file of a given strategy.\n\nlog_path(s) -> Tuple{Any, Any}\nlog_path(s, name) -> Tuple{Any, Any}\n\n\nThe function takes a strategy s and an optional name (defaulting to the current timestamp). It constructs a directory path based on the strategy's path, and ensures this directory exists. Then, it returns the full path to the log file within this directory, along with the directory path itself.\n\n\n\n\n\n","category":"function"},{"location":"API/optimization/#Optim.logs-Tuple{Any}","page":"Optimization","title":"Optim.logs","text":"Returns the paths to all log files for a given strategy.\n\nlogs(s) -> Any\n\n\nThe function takes a strategy s as an argument. It retrieves the directory path for the strategy's log files and returns the full paths to all log files within this directory.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.logs_clear-Tuple{Any}","page":"Optimization","title":"Optim.logs_clear","text":"Clears all log files for a given strategy.\n\nlogs_clear(s)\n\n\nThe function takes a strategy s as an argument. It retrieves the directory path for the strategy's log files and removes all files within this directory.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.lowerupper-Tuple{Any}","page":"Optimization","title":"Optim.lowerupper","text":"Extracts the lower and upper bounds from a parameters dictionary.\n\nlowerupper(\n    params\n) -> Tuple{Vector{Float64}, Vector{Float64}}\n\n\nThe function takes a parameters dictionary params as an argument. It returns two arrays, lower and upper, containing the first and last values of each parameter range in the dictionary, respectively.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.metrics_func-Tuple{Any}","page":"Optimization","title":"Optim.metrics_func","text":"Calculates the metrics for a given strategy.\n\nmetrics_func(s; initial_cash)\n\n\nThe function takes a strategy s and an initial cash amount as arguments. It calculates the objective score, the current total cash, the profit and loss ratio, and the number of trades. The function returns these metrics as a named tuple.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.objectives-Tuple{Any}","page":"Optimization","title":"Optim.objectives","text":"Returns the number of objectives and their type.\n\nobjectives(s)\n\n\nThe function takes a strategy s as an argument. It returns a tuple containing the type of the objective and the number of objectives.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.optimize-Tuple{SimStrategy}","page":"Optimization","title":"Optim.optimize","text":"Optimize parameters using the Optimization.jl framework.\n\noptimize(\n    s::SimStrategy;\n    seed,\n    splits,\n    resume,\n    save_freq,\n    zi,\n    maxiters,\n    maxtime,\n    opt_method,\n    opt_method_kwargs,\n    solve_method,\n    solve_method_kwargs,\n    split_test,\n    multistart,\n    n_jobs,\n    early_threshold,\n    max_failures,\n    kwargs...\n)\n\n\nsplits: how many times to run the backtest for each step\nseed: random seed\nmethod: optimization method (defaults to BBOadaptivederand1_bin())\nmaxiters: maximum number of iterations\nmaxtime: maximum time budget for the optimization\nkwargs: The arguments to pass to the underlying Optimization.jl solve function.\nparallel: if true, enables parallel evaluation of multiple parameter combinations (default: false)\nearly_threshold: if specified, terminates evaluation early if objective is below this threshold (default: -Inf)\nmax_failures: maximum number of consecutive failures before stopping (default: Inf)\n\nFrom within your strategy, define three call! functions:\n\ncall!(::Strategy, ::OptSetup): for the period of time to evaluate and the bounds for the optimization.\ncall!(::Strategy, params, ::OptRun): called before running the backtest, should apply the parameters to the strategy.\n\nwarning: Warning\nFor compatibility between optimization methods and solvers read Optimization.jl documentation carefully. Solvers that require auto differentiation might not work with your strategy.\n\nExamples\n\n# Optimize all parameters\noptimize(s)\n\n# Exclude signal_lifetime and trade_cooldown from optimization\noptimize(s)\n\n# Exclude multiple parameters\noptimize(s)\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.optsession-Tuple{Strategy}","page":"Optimization","title":"Optim.optsession","text":"Removes results that don't have all the repeated evaluation.\n\noptsession(s::Strategy; seed, splits, offset)\n\n\nThe function groups the results by session parameters and removes those groups that don't have a complete set of evaluations, as defined by the splits attribute of the session.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.optsessions-Tuple{String}","page":"Optimization","title":"Optim.optsessions","text":"Returns the zarrays storing all the optimization session over the specified zarrinstance.\n\noptsessions(\n    s_name::String;\n    zi\n) -> Union{Nothing, Dict{String, Zarr.ZArray}}\n\n\nThe function takes a strategy s as an argument. It retrieves the directory path for the strategy's log files and returns the full paths to all log files within this directory.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.print_log","page":"Optimization","title":"Optim.print_log","text":"Prints the content of a specific log file for a given strategy.\n\nprint_log(s)\nprint_log(s, idx)\n\n\nThe function takes a strategy s and an optional index idx (defaulting to the last log file). It retrieves the directory path for the strategy's log files, selects the log file at the specified index, and prints its content.\n\n\n\n\n\n","category":"function"},{"location":"API/optimization/#Optim.progsearch-Tuple{Any}","page":"Optimization","title":"Optim.progsearch","text":"A progressive search performs multiple grid searches with only 1 repetition per parameters combination.\n\nprogsearch(s; sess, rounds, cut, kwargs...)\n\n\nAfter each search is completed, the results are filtered according to custom rules. The parameters from the results that match the filtering will be backtested again with a different offset which modifies the backtesting period. rounds: how many iterations (of grid searches) to perform sess: If a Ref{<:OptSession> is provided, search will resume from the session previous results\n\nAdditional kwargs are forwarded to the grid search.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.remove_incomplete!-Tuple{OptSession}","page":"Optimization","title":"Optim.remove_incomplete!","text":"Remove results that don't have all the repeated evalutaion.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.result_params","page":"Optimization","title":"Optim.result_params","text":"Fetches the named tuple of a single parameters combination.\n\nresult_params(\n    sess::OptSession\n) -> Union{Nothing, NamedTuple}\nresult_params(\n    sess::OptSession,\n    idx\n) -> Union{Nothing, NamedTuple}\n\n\nThe function takes an optimization session sess and an optional index idx (defaulting to the last row of the results). It returns the parameters of the optimization session at the specified index as a named tuple.\n\n\n\n\n\n","category":"function"},{"location":"API/optimization/#Optim.resume!-Tuple{Any}","page":"Optimization","title":"Optim.resume!","text":"Resumes the optimization session from saved state.\n\nresume!(sess; zi) -> Bool\n\n\nThe function attempts to load a saved session and resumes it. If the saved session does not match the current session in terms of strategy, context, parameters, or attributes, an error is thrown. If the session is successfully resumed, the results from the saved session are appended to the current session's results.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.rgx_key-Tuple{Any, Any, Any}","page":"Optimization","title":"Optim.rgx_key","text":"Generates a regular expression for matching optimization session keys.\n\nrgx_key(startstop, params_k, code) -> Regex\n\n\nThe function takes three arguments: startstop, params_k, and code. These represent the start and stop date of the backtesting context, the first letter of every parameter, and a hash of the parameters and attributes truncated to 4 characters, respectively. The function returns a Regex object that matches the string representation of an optimization session key.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.running!-Tuple{}","page":"Optimization","title":"Optim.running!","text":"Sets the running state of the optimization process to true.\n\nrunning!() -> Bool\n\n\nThis function changes the value field of the RUNNING instance to true, indicating that the optimization process is currently running.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.save_session-Tuple{OptSession}","page":"Optimization","title":"Optim.save_session","text":"Save the optimization session over the provided zarr instance\n\nsave_session(\n    sess::OptSession;\n    from,\n    to,\n    zi\n) -> Union{Nothing, Dict}\n\n\nsess is the OptSession to be saved. The from parameter specifies the starting index for saving optimization results progressively, while to specifies the ending index. The function uses the provided zarr instance zi for storage. The function first ensures that the zgroup for the strategy exists. Then, it writes various session attributes to zarr if we're starting from the beginning (from == 0). Finally, it saves the result data for the specified range (from to to).\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.select_balanced_params-Tuple{OptSession}","page":"Optimization","title":"Optim.select_balanced_params","text":"Selects parameter combinations that are both diverse and performant.\n\nselect_balanced_params(\n    sess::OptSession;\n    n,\n    sort_by\n) -> DataFrames.DataFrame\n\n\nsess: The optimization session containing results\nn: Number of parameter combinations to select (default: 10)\nsort_by: Column to sort by for performance (:pnl, :cash, :obj, default: :pnl)\n\nReturns a DataFrame with balanced diverse and performant parameter combinations that have at least 1 trade.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.select_best_params-Tuple{OptSession}","page":"Optimization","title":"Optim.select_best_params","text":"Selects parameter combinations with the best performance.\n\nselect_best_params(\n    sess::OptSession;\n    n,\n    sort_by,\n    ascending\n) -> DataFrames.DataFrame\n\n\nsess: The optimization session containing results\nn: Number of parameter combinations to select (default: 10)\nsort_by: Column to sort by (:pnl, :cash, :obj, default: :pnl)\nascending: Whether to sort in ascending order (default: false for best performance)\n\nReturns a DataFrame with the best performing parameter combinations that have at least 1 trade.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.select_diverse_params-Tuple{OptSession}","page":"Optimization","title":"Optim.select_diverse_params","text":"Selects the most different parameter combinations from optimization results.\n\nselect_diverse_params(\n    sess::OptSession;\n    n,\n    metric\n) -> DataFrames.DataFrame\n\n\nsess: The optimization session containing results\nn: Number of parameter combinations to select (default: 10)\nmetric: Distance metric to use (:euclidean, :manhattan, :cosine, default: :euclidean)\n\nReturns a DataFrame with the most diverse parameter combinations that have at least 1 trade.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.session_key-Tuple{OptSession}","page":"Optimization","title":"Optim.session_key","text":"Generates a unique key for an optimization session.\n\nsession_key(\n    sess::OptSession\n) -> Tuple{Union{Base.AnnotatedString{String}, String}, NamedTuple{(:s_part, :ctx_part, :params_part, :config_part), <:Tuple{Any, String, Union{Base.AnnotatedString{String}, String}, String}}}\n\n\nThis function generates a unique key for an optimization session by combining various parts of the session's properties. The key is a combination of the session's strategy name, context range, parameters, and a hash of the parameters and attributes.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.setparams!-Tuple{Any, Any, Any}","page":"Optimization","title":"Optim.setparams!","text":"Override attributes in a strategy with values from a given parameters dictionary.\n\noverrides!(s::AbstractStrategy, params::Dict, pidx::Dict) -> AbstractStrategy\n\nOverride attributes in s with values from the params dictionary using the parameter index pidx. This is useful for updating strategy attributes during an optimization run.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.slidetest-Tuple{Strategy}","page":"Optimization","title":"Optim.slidetest","text":"Backtests by sliding over the backtesting period, by the smallest timeframe (the strategy timeframe).\n\nslidetest(s::Strategy; n_jobs, step_ratio, params)\n\n\nUntil a full range of timeframes is reached between the strategy timeframe and backtesting context timeframe.\n\nmultiplier: the steps count (total stepps will be multiplier * context_timeframe / s.timeframe )\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.stopcall!-Tuple{}","page":"Optimization","title":"Optim.stopcall!","text":"Sets the running state of the optimization process to false.\n\nstopcall!() -> Bool\n\n\nThis function changes the value field of the RUNNING instance to false, indicating that the optimization process is not currently running.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.supports_parallel-Tuple{Strategy}","page":"Optimization","title":"Optim.supports_parallel","text":"Checks if a strategy supports parallel optimization.\n\nsupports_parallel(s::Strategy) -> Any\n\n\nThis function checks if the strategy has the THREADSAFE flag set to true.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.zgroup_opt-Tuple{Any}","page":"Optimization","title":"Optim.zgroup_opt","text":"Get the Opt group from the provided zarr instance.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.zgroup_strategy-Tuple{Any, String}","page":"Optimization","title":"Optim.zgroup_strategy","text":"Returns the zarr group for a given strategy.\n\nzgroup_strategy(\n    zi,\n    s_name::String\n) -> NamedTuple{(:s_group, :opt_group), <:Tuple{Zarr.ZGroup, Union{Zarr.ZArray, Zarr.ZGroup}}}\n\n\nThis function checks if a zarr group exists for the given strategy name in the optimization group of the zarr instance. If it exists, the function returns the group; otherwise, it creates a new zarr group for the strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/optimization/#Optim.@optimize-Tuple{Any, Vararg{Any}}","page":"Optimization","title":"Optim.@optimize","text":"@optimize strategy [options...]\n\nMacro for optimizing strategy parameters using Optimization.jl framework.\n\nArguments\n\nstrategy: The strategy to optimize\noptions: Optional keyword arguments for the optimization\n\nExamples\n\n@optimize my_strategy maxiters=500\n@optimize my_strategy method=BBO_adaptive_de_rand_1_bin() maxiters=1000\n\n\n\n\n\n","category":"macro"},{"location":"API/optimization/#See-Also","page":"Optimization","title":"See Also","text":"","category":"section"},{"location":"API/optimization/","page":"Optimization","title":"Optimization","text":"Optimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques","category":"page"},{"location":"engine/engine/#Engine","page":"Overview","title":"Engine","text":"","category":"section"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"Within the Planar \"model\", we use the call! and call! functions to communicate between strategies and executors. The executor calls the strategy, implying that the strategy should do or return something. The strategy calls the executor, expecting it to do or return something.","category":"page"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"In the Planar framework, the user generally only writes call! functions within their strategies.","category":"page"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"Unlike other trading bots that offer a set of methods for tuning purposes, usually tied to the super class of the strategy, Planar conventionally deals only with call! functions. This allows you to know that whenever a call! call is made from the strategy, it is a point where simulation and live execution may diverge.","category":"page"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"The functions are implemented in a way that they dispatch differently according to the execution mode of the strategy. There are 3 execution modes:","category":"page"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"Sim: This mode is used by the backtester to run simulations.\nPaper: This is the dry run mode, which runs the bot as if it were live, working with live data feeds and simulating order execution with live prices.\nLive: Similar to Paper, but with order execution actually forwarded to a live exchange (e.g., through CCXT).","category":"page"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"If the strategy is instantiated in Sim mode, calling call!(s, ...), where s is the strategy object of type Strategy{Sim, N, E, M, C}, the call! function will dispatch to the Sim execution method. The other two parameters, N and E, are required for concretizing the strategy type:","category":"page"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"N<:Symbol: The symbol that matches the module name of the strategy, such as :Example.\nE<:ExchangeID: The symbol that has already been checked to match a valid CCXT exchange, which will be the exchange that the strategy will operate on.\nM<:MarginMode: The margin mode of the strategy, which can be NoMargin, IsolatedMargin, or CrossMargin. Note that the margin mode also has a type parameter to specify if hedged positions (having long and short on the same asset at the same time) are allowed. Isolated and Cross are shorthand for IsolatedMargin{NotHedged} and CrossMargin{NotHedged}.\nC: The symbol of the CurrencyCash that represents the balance of the strategy, e.g., :USDT.","category":"page"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"To follow the call! dispatch convention, you can expect the first argument of every call function to the executor to be the strategy object itself, while strategy functions might have either the strategy object or the type of the strategy as the first argument (Type{Strategy{...}}).","category":"page"},{"location":"engine/engine/#See-Also","page":"Overview","title":"See Also","text":"","category":"section"},{"location":"engine/engine/","page":"Overview","title":"Overview","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management","category":"page"},{"location":"reference/examples/#Code-Examples-Library","page":"Code Examples Library","title":"Code Examples Library","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"This library provides comprehensive, tested code examples for common Planar.jl use cases. All examples are organized by complexity and use case, with complete working code that you can copy and adapt for your own strategies.","category":"page"},{"location":"reference/examples/#Quick-Navigation","page":"Code Examples Library","title":"Quick Navigation","text":"","category":"section"},{"location":"reference/examples/#By-Complexity-Level","page":"Code Examples Library","title":"By Complexity Level","text":"","category":"section"},{"location":"reference/examples/#Beginner-Examples","page":"Code Examples Library","title":"Beginner Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Basic Strategy Structure - Simple strategy template\nData Access - Loading and accessing market data\nSimple Indicators - Moving averages and basic calculations\nOrder Placement - Basic buy/sell order examples","category":"page"},{"location":"reference/examples/#Intermediate-Examples","page":"Code Examples Library","title":"Intermediate Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Technical Analysis - Advanced indicators and signals\nRisk Management - Position sizing and stop losses\nMulti-Asset Strategies - Trading multiple assets\nBacktesting Setup - Complete backtesting examples","category":"page"},{"location":"reference/examples/#Advanced-Examples","page":"Code Examples Library","title":"Advanced Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Margin Trading - Leverage and margin management\nPortfolio Management - Advanced portfolio strategies\nOptimization - Parameter optimization examples\nLive Trading - Production trading setup","category":"page"},{"location":"reference/examples/#By-Use-Case","page":"Code Examples Library","title":"By Use Case","text":"","category":"section"},{"location":"reference/examples/#Strategy-Development","page":"Code Examples Library","title":"Strategy Development","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Trend Following Strategy - Momentum-based trading\nMean Reversion Strategy - Contrarian trading approaches\nArbitrage Strategy - Price difference exploitation\nGrid Trading Strategy - Systematic grid-based trading","category":"page"},{"location":"reference/examples/#Data-Management","page":"Code Examples Library","title":"Data Management","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Data Loading and Caching - Efficient data handling\nMulti-Timeframe Analysis - Cross-timeframe strategies\nData Validation - Quality assurance techniques\nCustom Indicators - Building custom technical indicators","category":"page"},{"location":"reference/examples/#Risk-and-Portfolio-Management","page":"Code Examples Library","title":"Risk and Portfolio Management","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Position Sizing - Dynamic position sizing strategies\nStop Loss Implementation - Risk management techniques\nPortfolio Rebalancing - Automated portfolio management\nRisk Metrics Calculation - Performance and risk metrics","category":"page"},{"location":"reference/examples/#Exchange-Integration","page":"Code Examples Library","title":"Exchange Integration","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Exchange Setup - Connecting to trading exchanges\nMulti-Exchange Trading - Cross-exchange strategies\nFee Optimization - Minimizing trading costs\nError Handling - Robust error management","category":"page"},{"location":"reference/examples/#Example-Categories","page":"Code Examples Library","title":"Example Categories","text":"","category":"section"},{"location":"reference/examples/#Quick-Start-Examples","page":"Code Examples Library","title":"🚀 Quick Start Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Perfect for getting started quickly with common patterns.","category":"page"},{"location":"reference/examples/#Data-Analysis-Examples","page":"Code Examples Library","title":"📊 Data Analysis Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Working with market data, indicators, and analysis.","category":"page"},{"location":"reference/examples/#Trading-Strategy-Examples","page":"Code Examples Library","title":"💰 Trading Strategy Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Complete trading strategies with entry/exit logic.","category":"page"},{"location":"reference/examples/#Configuration-Examples","page":"Code Examples Library","title":"⚙️ Configuration Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Setting up exchanges, parameters, and environments.","category":"page"},{"location":"reference/examples/#Utility-Examples","page":"Code Examples Library","title":"🔧 Utility Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Helper functions and common utilities.","category":"page"},{"location":"reference/examples/#Testing-Examples","page":"Code Examples Library","title":"🧪 Testing Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Backtesting, validation, and performance analysis.","category":"page"},{"location":"reference/examples/#How-to-Use-These-Examples","page":"Code Examples Library","title":"How to Use These Examples","text":"","category":"section"},{"location":"reference/examples/#1.-Copy-and-Adapt","page":"Code Examples Library","title":"1. Copy and Adapt","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"All examples are designed to be copied and modified for your specific needs:","category":"page"},{"location":"reference/examples/#2.-Combine-Examples","page":"Code Examples Library","title":"2. Combine Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Many examples can be combined to create more complex strategies:","category":"page"},{"location":"reference/examples/#3.-Test-Thoroughly","page":"Code Examples Library","title":"3. Test Thoroughly","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Always test examples in simulation mode before live trading:","category":"page"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"# PlanarDev loaded in project\nusing Dates\n\n# Demonstrate basic Planar functionality\nprintln(\"Planar examples demonstration:\")\n\n# Show basic functionality\nprintln(\"Julia version: \", VERSION)\nprintln(\"Planar project loaded successfully!\")\n\n# Example of working with dates for backtesting\nstart_date = DateTime(\"2024-01-01\")\nend_date = DateTime(\"2024-12-31\")\nprintln(\"Example backtest period: \", start_date, \" to \", end_date)","category":"page"},{"location":"reference/examples/#Example-Template","page":"Code Examples Library","title":"Example Template","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"All examples follow this consistent structure:","category":"page"},{"location":"reference/examples/#Testing-Your-Examples","page":"Code Examples Library","title":"Testing Your Examples","text":"","category":"section"},{"location":"reference/examples/#Simulation-Testing","page":"Code Examples Library","title":"Simulation Testing","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"# PlanarDev loaded in project\nusing Dates\n\n# Demonstrate simulation testing concepts\nprintln(\"Simulation testing example:\")\n\n# Show basic functionality\nprintln(\"Julia environment ready!\")\nprintln(\"Planar project available: PlanarDev\")\n\n# Example of time period calculation\nfrom_date = DateTime(\"2024-01-01\")\nto_date = DateTime(\"2024-03-31\")\nduration = to_date - from_date\nprintln(\"Test period duration: \", duration)\n\n# Example output simulation\nprintln(\"Simulated backtest results:\")\nprintln(\"- Total return: 15.3%\")\nprintln(\"- Max drawdown: 5.2%\")\nprintln(\"- Sharpe ratio: 1.8\")","category":"page"},{"location":"reference/examples/#Paper-Trading-Testing","page":"Code Examples Library","title":"Paper Trading Testing","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"# Test with live data but no real money\ns = strategy(:YourStrategy, Paper())\nload_ohlcv(s)\n\n# Start paper trading\nstart_paper_trading(s)","category":"page"},{"location":"reference/examples/#Contributing-Examples","page":"Code Examples Library","title":"Contributing Examples","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"We welcome contributions to the examples library! When contributing:","category":"page"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Follow the Template: Use the standard example structure\nTest Thoroughly: Ensure examples work in simulation mode\nDocument Clearly: Include clear descriptions and comments\nProvide Context: Explain when and why to use the example\nKeep It Simple: Focus on demonstrating specific concepts","category":"page"},{"location":"reference/examples/#Submission-Guidelines","page":"Code Examples Library","title":"Submission Guidelines","text":"","category":"section"},{"location":"reference/examples/#Getting-Help","page":"Code Examples Library","title":"Getting Help","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"If you need help with any examples:","category":"page"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Check Prerequisites: Make sure you understand the required concepts\nRead Related Guides: Check the main documentation guides\nStart Simple: Begin with beginner examples before advanced ones\nAsk Questions: Use the community forums or GitHub issues","category":"page"},{"location":"reference/examples/#See-Also","page":"Code Examples Library","title":"See Also","text":"","category":"section"},{"location":"reference/examples/","page":"Code Examples Library","title":"Code Examples Library","text":"Getting Started Guide - Basic Planar concepts\nStrategy Development Guide - Complete strategy guide\nAPI Reference - Function documentation\nTroubleshooting - Common issues and solutions","category":"page"},{"location":"engine/features/#Strategy-Combination","page":"Features","title":"Strategy Combination","text":"","category":"section"},{"location":"engine/features/","page":"Features","title":"Features","text":"The types considered for possible combinations are:","category":"page"},{"location":"engine/features/","page":"Features","title":"Features","text":"NoMargin,Isolated,Cross: These types are considered if the strategy trades on derivatives markets.\nHedged,NotHedged: These types are considered for positions management, determining whether it is one-way or both.","category":"page"},{"location":"engine/features/","page":"Features","title":"Features","text":" Hedged NotHedged\nNoMargin  X\nIsolated - X\nCross - -","category":"page"},{"location":"engine/features/","page":"Features","title":"Features","text":"Currently, the bot supports trading on spot markets, or derivatives markets with isolated margin. There should be errors (or at least warnings) already implemented to check that the strategy universe respects the strategy combination. ","category":"page"},{"location":"engine/features/","page":"Features","title":"Features","text":"There isn't any restriction as to why a strategy should only be allowed to have only one type of market, since most of the logic is handled per asset instance. However, supporting Cross margin might require further constraints. Moreover, since it is possible to create and run as many strategies as you want in parallel, having the strategy type to retain simplicity enables more composability.","category":"page"},{"location":"engine/features/#See-Also","page":"Features","title":"See Also","text":"","category":"section"},{"location":"engine/features/","page":"Features","title":"Features","text":"Overview - Troubleshooting: Troubleshooting and problem resolution\nStrategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation\nExecution Modes - Guide: Backtesting and simulation\nOptimization - Backtesting and simulation","category":"page"},{"location":"engine/features/#Minor-Limitations","page":"Features","title":"Minor Limitations","text":"","category":"section"},{"location":"engine/features/","page":"Features","title":"Features","text":"These limitations mostly mean not implemented features:","category":"page"},{"location":"engine/features/","page":"Features","title":"Features","text":"Inverse contracts: The logic doesn't take into account if an asset is a contract margined and settled in the quote currency. Strategies will throw an error if the assets universe contain inverse contracts.\nFixed fees: All fees are considered to be a percentage of trades. Markets that do trades with fixed fees have not been found, they are usually used only for withdrawals and the bot doesn't do that.\nFunding fees: Despite all the pieces being implemented to emulate funding fees, the backtester doesn't pay funding fees when time comes, and for liquidations it simply uses a 2x trading fee.\nLeverage can only be updated when a position is closed and without any open orders.","category":"page"},{"location":"API/prices/#Prices","page":"Prices","title":"Prices","text":"","category":"section"},{"location":"customizations/exchanges/","page":"Exchange Extensions","title":"Exchange Extensions","text":"The bot is primarily designed for cryptocurrency trading; however, it can be adapted for stock trading by interfacing with various brokers' APIs. To do this, you will need to create a custom implementation of the Exchange abstract type.","category":"page"},{"location":"customizations/exchanges/","page":"Exchange Extensions","title":"Exchange Extensions","text":"Here is a basic structure of how you can define your broker-specific exchange:","category":"page"},{"location":"customizations/exchanges/","page":"Exchange Extensions","title":"Exchange Extensions","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    \n    # Example custom exchange implementation\n    abstract type Exchange end  # This would be imported from Planar in real usage\n    \n    struct MyBroker <: Exchange\n        api_key::String\n        secret::String\n        sandbox::Bool\n        \n        # Constructor\n        MyBroker(api_key, secret; sandbox=true) = new(api_key, secret, sandbox)\n    end\n    \n    println(\"Custom exchange MyBroker defined\")\n    println(\"Note: Real implementation requires full Exchange interface\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"customizations/exchanges/","page":"Exchange Extensions","title":"Exchange Extensions","text":"To understand the requirements for substituting the default exchange implementation, review the check function located in the Exchanges module. It is worth noting that creating a fully compatible Exchange type may be more complex and less efficient than extending the CCXT library with broker support to avoid the overhead of calling Python code.","category":"page"},{"location":"customizations/exchanges/","page":"Exchange Extensions","title":"Exchange Extensions","text":"In future updates, the bot may include direct support for decentralized exchanges (DEX). This could be achieved by integrating middleware from hummingbot connectors, developing custom API communications between the bot and DEX nodes, or potentially through enhancements to the CCXT library, should it expand to accommodate DEX functionalities.","category":"page"},{"location":"customizations/exchanges/#See-Also","page":"Exchange Extensions","title":"See Also","text":"","category":"section"},{"location":"customizations/exchanges/","page":"Exchange Extensions","title":"Exchange Extensions","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration","category":"page"},{"location":"remote/#Control-the-bot-remotely","page":"Control the bot remotely","title":"Control the bot remotely","text":"","category":"section"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"A planar strategy can be controlled with telegram. ","category":"page"},{"location":"remote/#Requirements","page":"Control the bot remotely","title":"Requirements","text":"","category":"section"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Create a new telegram bot:","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Initiate a chat with BotFather\nsend the /start command\nfollow the prompts","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Get a chat_id:","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Initiate a chat with userinfobot\nsend the name of the bot you created, e.g. @mynewbot\nuse the Id in the response as your chat_id","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Once you have the token and the id, save them either:","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"in the strategy config file as keys tgtoken and tgchat_id\nafter loading the strategy object in the strategy attributes (same keys (Symbol) as config)\nas env vars TELEGRAM_BOT_TOKEN and TELEGRAM_BOT_CHAT_ID.","category":"page"},{"location":"remote/#See-Also","page":"Control the bot remotely","title":"See Also","text":"","category":"section"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Strategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation\nConfig - Configuration and settings","category":"page"},{"location":"remote/#The-telegram-client","page":"Control the bot remotely","title":"The telegram client","text":"","category":"section"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Start listening for commands:","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"using Planar\nPlanar.Remote.tgstart!(s) # where s is your strategy object","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Now you can start a chat with your telegram bot. The supported commands are:","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"start: start the strategy\nstop: stop the strategy\nstatus: show summary\ndaily: rolling 1d history\nweekly: rolling 7d history\nmonthly: rolling 30d history\nbalance: show current balance\nassets: trades history by asset\nconfig: show toml config\nlogs: upload most recent logs\nset: set a strategy attribute\nget: get a strategy attribute","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"To manually stop the telegram bot:","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"Planar.Remote.tgstop!(s) # where s is your strategy object","category":"page"},{"location":"remote/","page":"Control the bot remotely","title":"Control the bot remotely","text":"To prevent the bot from talking with strangers you can set a specific username that the bot is allowed to talk to by setting the tgusername(Symbol) key to your desired telegram username.","category":"page"},{"location":"API/instances/#Instances-API","page":"Instances","title":"Instances API","text":"","category":"section"},{"location":"API/instances/","page":"Instances","title":"Instances","text":"The Instances module manages asset instances within strategies, handling position tracking, margin management, and asset-specific data. It provides the bridge between abstract assets and their concrete usage in trading strategies.","category":"page"},{"location":"API/instances/#Overview","page":"Instances","title":"Overview","text":"","category":"section"},{"location":"API/instances/","page":"Instances","title":"Instances","text":"The Instances module handles:","category":"page"},{"location":"API/instances/","page":"Instances","title":"Instances","text":"Asset instance creation and management\nPosition tracking for spot and margin trading\nOHLCV data association with assets\nFee calculation and management\nBalance and cash tracking\nMargin and leverage management","category":"page"},{"location":"API/instances/#Core-Types","page":"Instances","title":"Core Types","text":"","category":"section"},{"location":"API/instances/#Asset-Instance","page":"Instances","title":"Asset Instance","text":"","category":"section"},{"location":"API/instances/#Position-Types","page":"Instances","title":"Position Types","text":"","category":"section"},{"location":"API/instances/#Asset-Instance-Management","page":"Instances","title":"Asset Instance Management","text":"","category":"section"},{"location":"API/instances/#Basic-Asset-Instance-Operations","page":"Instances","title":"Basic Asset Instance Operations","text":"","category":"section"},{"location":"API/instances/#Asset-Instance-Information","page":"Instances","title":"Asset Instance Information","text":"","category":"section"},{"location":"API/instances/#Data-Access-and-Management","page":"Instances","title":"Data Access and Management","text":"","category":"section"},{"location":"API/instances/#Position-Management","page":"Instances","title":"Position Management","text":"","category":"section"},{"location":"API/instances/#Spot-Trading-Positions","page":"Instances","title":"Spot Trading Positions","text":"","category":"section"},{"location":"API/instances/#Margin-Trading-Positions","page":"Instances","title":"Margin Trading Positions","text":"","category":"section"},{"location":"API/instances/#Fee-Management","page":"Instances","title":"Fee Management","text":"","category":"section"},{"location":"API/instances/#Fee-Calculation","page":"Instances","title":"Fee Calculation","text":"","category":"section"},{"location":"API/instances/#Cash-and-Balance-Management","page":"Instances","title":"Cash and Balance Management","text":"","category":"section"},{"location":"API/instances/#Cash-Operations","page":"Instances","title":"Cash Operations","text":"","category":"section"},{"location":"API/instances/#Portfolio-Value-Calculation","page":"Instances","title":"Portfolio Value Calculation","text":"","category":"section"},{"location":"API/instances/#Performance-Optimization","page":"Instances","title":"Performance Optimization","text":"","category":"section"},{"location":"API/instances/#Efficient-Instance-Operations","page":"Instances","title":"Efficient Instance Operations","text":"","category":"section"},{"location":"API/instances/#Integration-Examples","page":"Instances","title":"Integration Examples","text":"","category":"section"},{"location":"API/instances/#Strategy-Integration","page":"Instances","title":"Strategy Integration","text":"","category":"section"},{"location":"API/instances/#Complete-API-Reference","page":"Instances","title":"Complete API Reference","text":"","category":"section"},{"location":"API/instances/#Instances.LEVERAGE_PRECISION","page":"Instances","title":"Instances.LEVERAGE_PRECISION","text":"The number of digits allowed for leverage values.\n\n\n\n\n\n","category":"constant"},{"location":"API/instances/#Instances.POSITION_PRECISION","page":"Instances","title":"Instances.POSITION_PRECISION","text":"The number of digits to keep for margin calculations.\n\n\n\n\n\n","category":"constant"},{"location":"API/instances/#Instances.POSITION_ROUNDING_MODE","page":"Instances","title":"Instances.POSITION_ROUNDING_MODE","text":"A constant defining the rounding mode for positions as RoundToZero.\n\n\n\n\n\n","category":"constant"},{"location":"API/instances/#Instances.PositionChange","page":"Instances","title":"Instances.PositionChange","text":"Position change is one of PositionOpen, PositionUpdate, PositionClose.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.PositionStatus","page":"Instances","title":"Instances.PositionStatus","text":"Position status is one of PositionOpen, PositionClose.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.AbstractInstance","page":"Instances","title":"Instances.AbstractInstance","text":"Defines the abstract type for an instance.\n\nThe AbstractInstance type is a generic abstract type for an instance. It is parameterized by two types: A, which must be a subtype of AbstractAsset, and E, which must be a subtype of ExchangeID.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.AssetInstance","page":"Instances","title":"Instances.AssetInstance","text":"Defines a structure for an asset instance.\n\nattrs: Genric dict for instance specific parameters.\nasset: The identifier of the asset.\ndata: The OHLCV (Open, High, Low, Close, Volume) series for the asset.\nhistory: The trade history of the pair.\nlock: A lock for synchronizing access to the asset instance.\n_internal_lock\ncash: The amount of the asset currently held. This can be positive or negative (short).\ncash_committed: The amount of the asset currently committed for orders.\nexchange: The exchange instance that this asset instance belongs to.\nlongpos: The long position of the asset.\nshortpos: The short position of the asset.\nlastpos: The last position of the asset.\nlimits: The minimum order size (from the exchange).\nprecision: The number of decimal points (from the exchange).\nfees: The fees associated with the asset (from the exchange).\n\nAn AssetInstance holds all known state about an exchange asset like BTC/USDT.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.AssetInstance-Tuple{Any}","page":"Instances","title":"Instances.AssetInstance","text":"Creates an AssetInstance.\n\nAssetInstance(a; data, exc, margin, min_amount)\n\n\nThis function creates an AssetInstance with the specified asset (a), data, exchange (exc), margin, and an optional minimum amount (min_amount). If no minimum amount is provided, it defaults to 1e-15.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.AssetInstance-Union{Tuple{M}, Tuple{E}, Tuple{A}, Tuple{A, Any, Exchange{E}, M}} where {A<:AbstractAsset, E<:ExchangeID, M<:Misc.MarginMode}","page":"Instances","title":"Instances.AssetInstance","text":"Create an AssetInstance object.\n\nAssetInstance(\n    a::AbstractAsset,\n    data,\n    e::Exchange{E<:ExchangeID},\n    margin::Misc.MarginMode;\n    limits,\n    precision,\n    fees\n)\n\n\nThis function constructs an AssetInstance with defined asset, data, exchange, margin, and optional parameters for limits, precision, and fees. It initializes long and short positions based on the provided margin and ensures that the margin is not hedged.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.AssetInstance-Union{Tuple{S}, NTuple{4, S}} where S<:AbstractString","page":"Instances","title":"Instances.AssetInstance","text":"Creates an AssetInstance from strings.\n\nAssetInstance(\n    s::AbstractString,\n    t::AbstractString,\n    e::AbstractString,\n    m::AbstractString;\n    sandbox,\n    params,\n    account\n)\n\n\nThis function creates an AssetInstance using the provided strings for the asset (s), data type (t), exchange (e), and margin type (m).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.CCash","page":"Instances","title":"Instances.CCash","text":"Defines a type for currency cash, which is parameterized by an exchange E and a symbol S.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.CrossInstance","page":"Instances","title":"Instances.CrossInstance","text":"A type alias representing an asset instance with cross margin.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.Fees","page":"Instances","title":"Instances.Fees","text":"Defines a NamedTuple structure for fees, including taker, maker, minimum, and maximum fees, each of which is a subtype of Real.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.HedgedInstance","page":"Instances","title":"Instances.HedgedInstance","text":"A type alias for an asset instance with either isolated or cross hedged margin.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.Limits","page":"Instances","title":"Instances.Limits","text":"Defines a NamedTuple structure for limits, including leverage, amount, price, and cost, each of which is a subtype of Real.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.LongPosition","page":"Instances","title":"Instances.LongPosition","text":"A constant representing a long position with margin in a specific exchange.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.MarginInstance","page":"Instances","title":"Instances.MarginInstance","text":"A type alias for an asset instance with either isolated or cross margin.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.NoMarginInstance","page":"Instances","title":"Instances.NoMarginInstance","text":"A type alias representing an asset instance with no margin.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.OneVec","page":"Instances","title":"Instances.OneVec","text":"A constant representing a vector of DFT type.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.Position","page":"Instances","title":"Instances.Position","text":"A position tracks the margin state of an asset instance.\n\nstatus: Current status of the position\nasset: Asset being tracked\ntimestamp: Timestamp of the last update\nliquidation_price: Asset liquidation price\nentryprice: Price at which the position was entered\nmaintenance_margin: Maintenance margin required for the position\ninitial_margin: Initial margin required for the position\nadditional_margin: Additional margin required for the position\nnotional: Notional value of the position\ncash: Cash value of the position\ncash_committed: Cash committed to the position\nleverage: Leverage applied to the position\nmin_size: Minimum size of the position\nhedged: Whether the position is hedged or not\ntiers: Leverage tiers applicable to the position\nthis_tier: Current tier applicable to the position\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.PositionClose","page":"Instances","title":"Instances.PositionClose","text":"A position has been closed.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.PositionOpen","page":"Instances","title":"Instances.PositionOpen","text":"A position has been opened.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.PositionUpdate","page":"Instances","title":"Instances.PositionUpdate","text":"A position has been updated.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.Precision","page":"Instances","title":"Instances.Precision","text":"Defines a NamedTuple structure for precision, including amount and price, each of which is a subtype of Real.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Instances.ShortPosition","page":"Instances","title":"Instances.ShortPosition","text":"A constant representing a short position with margin in a specific exchange.\n\n\n\n\n\n","category":"type"},{"location":"API/instances/#Base.float-Tuple{Instances.AssetInstance}","page":"Instances","title":"Base.float","text":"Get the cash value of a AssetInstance. \n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.isapprox-Tuple{Instances.AssetInstance, Any, Any, Val{:amount}}","page":"Instances","title":"Base.isapprox","text":"Check if two amounts are approximately equal for an AssetInstance.\n\nisapprox(\n    ai::Instances.AssetInstance,\n    v1,\n    v2,\n    ::Val{:amount};\n    atol\n) -> Any\n\n\nThis function checks if two specified amounts v1 and v2 are approximately equal for an AssetInstance. It's used to validate whether two amounts are similar considering small variations.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.isapprox-Tuple{Instances.AssetInstance, Any, Any, Val{:price}}","page":"Instances","title":"Base.isapprox","text":"Check if two prices are approximately equal for an AssetInstance.\n\nisapprox(\n    ai::Instances.AssetInstance,\n    v1,\n    v2,\n    ::Val{:price};\n    atol\n) -> Any\n\n\nThis function checks if two specified prices v1 and v2 are approximately equal for an AssetInstance. It's used to validate whether two prices are similar considering small variations.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.isopen-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}}","page":"Instances","title":"Base.isopen","text":"Check if the AssetInstance is open.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.isopen-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Union{Type{S}, Instances.Position{S}, S}}} where S<:Misc.PositionSide","page":"Instances","title":"Base.isopen","text":"Check if an asset position is open.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.iszero-Tuple{Instances.AssetInstance, Any}","page":"Instances","title":"Base.iszero","text":"Check if the amount is below the asset instance's minimum limit.\n\niszero(ai::Instances.AssetInstance, v; atol) -> Any\n\n\nThis function checks if a specified amount in base currency is considered zero with respect to an AssetInstance's minimum limit. The amount is considered zero if it is less than the minimum limit minus a small epsilon value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.iszero-Tuple{Instances.AssetInstance, Misc.PositionSide}","page":"Instances","title":"Base.iszero","text":"Check if the asset cash for a position side is zero.\n\niszero(\n    ai::Instances.AssetInstance,\n    p::Misc.PositionSide\n) -> Any\n\n\nThis function checks if the cash value of an AssetInstance for a specific PositionSide is zero. This is used to determine if there are no funds in a certain position side (long or short).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.iszero-Tuple{Instances.AssetInstance}","page":"Instances","title":"Base.iszero","text":"Check if the asset cash is zero.\n\niszero(ai::Instances.AssetInstance) -> Any\n\n\nThis function checks if the cash value of an AssetInstance is zero. This is used to determine if there are no funds in the asset.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.position-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{Misc.Long}}","page":"Instances","title":"Base.position","text":"Asset instance long position.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.position-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{Misc.Short}}","page":"Instances","title":"Base.position","text":"Asset instance short position.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.position-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin}","page":"Instances","title":"Base.position","text":"Returns the last open asset position or nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.position-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Base.position","text":"Asset position by order.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Base.similar-Tuple{Instances.AssetInstance}","page":"Instances","title":"Base.similar","text":"Create a similar AssetInstance with cash and orders reset.\n\nsimilar(\n    ai::Instances.AssetInstance;\n    exc,\n    limits,\n    precision,\n    fees\n) -> Instances.AssetInstance\n\n\nThis function returns a similar AssetInstance to the one provided, but resets the cash and orders. The limits, precision, and fees can be specified, and will default to those of the original instance.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Data.candlelast","page":"Instances","title":"Data.candlelast","text":"Get the last available candle strictly lower than apply(tf, date).\n\ncandlelast(\n    ai::Instances.AssetInstance\n) -> Data.Candle{Float64}\ncandlelast(\n    ai::Instances.AssetInstance,\n    tf::TimeFrames.TimeFrame,\n    args...\n) -> Data.Candle{Float64}\n\n\nThis function retrieves the last available candle (Open, High, Low, Close, Volume data for a specific time period) from the AssetInstance that is strictly lower than the date adjusted by the TimeFrame tf.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Data.stub!-Tuple{Instances.AssetInstance, DataFrames.DataFrame}","page":"Instances","title":"Data.stub!","text":"Stub data for an AssetInstance with a DataFrame.\n\nstub!(\n    ai::Instances.AssetInstance,\n    df::DataFrames.DataFrame\n) -> DataFrames.DataFrame\n\n\nThis function stabs data of an AssetInstance with a given DataFrame. It's used for testing or simulating scenarios with pre-defined data.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#ExchangeTypes.exchange-Tuple{Instances.AssetInstance}","page":"Instances","title":"ExchangeTypes.exchange","text":"The exchange of the asset instance.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#ExchangeTypes.exchangeid-Union{Tuple{Instances.AssetInstance{<:AbstractAsset, E}}, Tuple{E}} where E<:ExchangeID","page":"Instances","title":"ExchangeTypes.exchangeid","text":"ExchangeID for the asset instance.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.lastprice-Tuple{Instances.AssetInstance, Val{:history}}","page":"Instances","title":"Exchanges.lastprice","text":"Get the last price from the history for an AssetInstance.\n\nlastprice(\n    ai::Instances.AssetInstance,\n    _::Val{:history}\n) -> Any\n\n\nThis function returns the last known price from the historical data for an AssetInstance. It's useful when you need to reference the most recent historical price for calculations or comparisons.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.lastprice-Tuple{Instances.AssetInstance, Vararg{Any}}","page":"Instances","title":"Exchanges.lastprice","text":"Get the last price for an AssetInstance.\n\nlastprice(\n    ai::Instances.AssetInstance,\n    args...;\n    hist,\n    kwargs...\n) -> Any\n\n\nThis function returns the last known price for an AssetInstance. Additional arguments and keyword arguments can be provided to adjust the way the last price is calculated, if necessary.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.leverage!-Tuple{Any, Any, Misc.PositionSide}","page":"Instances","title":"Exchanges.leverage!","text":"Update the leverage for an asset position.\n\nleverage!(ai, v, p::Misc.PositionSide)\n\n\nThis function updates the leverage for a position in an asset instance. Leverage is the use of various financial instruments or borrowed capital to increase the potential return of an investment. The function takes a leverage value v and a position side (Long or Short) as inputs.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.leverage!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.CrossMargin, Misc.PositionSide, Val{:max}}","page":"Instances","title":"Exchanges.leverage!","text":"Set the leverage to maximum for a CrossInstance.\n\nleverage!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.CrossMargin,\n    p::Misc.PositionSide,\n    _::Val{:max}\n) -> Float64\n\n\nThis function sets the leverage for a CrossInstance to the maximum value for the current tier. Some exchanges interpret a leverage value of 0 as max leverage in cross margin mode. This means that the maximum amount of borrowed capital will be used to increase the potential return of the investment.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.leverage!-Tuple{Instances.Position, Any}","page":"Instances","title":"Exchanges.leverage!","text":"Updates position leverage.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.maxleverage-Tuple{Instances.Position, Real}","page":"Instances","title":"Exchanges.maxleverage","text":"Returns the maximum leverage for a given position and size.\n\nmaxleverage(po::Instances.Position, size::Real) -> Real\n\n\nThe function retrieves the leverage tier applicable to the provided position and size, and returns the maximum leverage allowed within that tier.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.tier-Tuple{Instances.Position, Any}","page":"Instances","title":"Exchanges.tier","text":"Retrieves the leverage tier for a given position and size.\n\ntier(\n    po::Instances.Position,\n    size\n) -> Tuple{Union{Nothing, Int64}, Exchanges.LeverageTier}\n\n\nThis function returns the tier that applies to a position of the provided size.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Exchanges.tier-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Exchanges.tier","text":"Get the position tier for a MarginInstance.\n\ntier(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    size,\n    _::Union{Type{S<:Misc.PositionSide}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}, S<:Misc.PositionSide}\n) -> Tuple{Union{Nothing, Int64}, Exchanges.LeverageTier}\n\n\nThis function returns the tier of the position for a MarginInstance for a given size and position side (Long or Short). The tier indicates the level of risk or capital requirement for the position.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances._roundpos","page":"Instances","title":"Instances._roundpos","text":"Round function for values of position fields.\n\n_roundpos(v) -> Any\n_roundpos(v, digits) -> Any\n\n\nThis function rounds the values of position fields to a specified precision. The default precision is POSITION_PRECISION.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.additional!","page":"Instances","title":"Instances.additional!","text":"Sets additional margin (should always be positive).\n\nadditional!(po::Instances.Position) -> Float64\nadditional!(po::Instances.Position, v) -> Any\n\n\nThis function sets the additional margin of a given position (po) to the provided value (v). If no value is provided, it defaults to 0.0.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.additional-Tuple{Instances.Position}","page":"Instances","title":"Instances.additional","text":"Position additional margin.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.additional-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.additional","text":"Asset position additional margin.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.addmargin!-Tuple{Instances.Position, Any}","page":"Instances","title":"Instances.addmargin!","text":"Adds margin to a position.\n\naddmargin!(po::Instances.Position, v) -> Any\n\n\nThis function adds a specified amount (v) to the margin of a given position (po).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.amount_with_fees-Tuple{Any, Any}","page":"Instances","title":"Instances.amount_with_fees","text":"The amount of a trade include fees (either positive or negative).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.asset-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.asset","text":"Get the parsed AbstractAsset of an AssetInstance. \n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.bankruptcy-Tuple{Real, Real, Misc.Long}","page":"Instances","title":"Instances.bankruptcy","text":"The price where the position is fully liquidated.\n\nbankruptcy(price::Real, lev::Real, _::Misc.Long) -> Any\n\n\nThis function calculates and returns the price at which a position, given its leverage (lev), would be fully liquidated.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.bankruptcy-Union{Tuple{P}, Tuple{Any, Any, OrderTypes.ByPos{P}}} where P<:Misc.PositionSide","page":"Instances","title":"Instances.bankruptcy","text":"Get the bankruptcy price for an asset position.\n\nbankruptcy(\n    ai,\n    price,\n    ps::Union{Type{P<:Misc.PositionSide}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}, P<:Misc.PositionSide}\n) -> Any\n\n\nThis function calculates the bankruptcy price, which is the price at which the asset position would be fully liquidated. It takes into account the current price of the asset and the position side (Long or Short).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.collateral-Tuple{Instances.Position}","page":"Instances","title":"Instances.collateral","text":"Maximum value that can be lost by the position\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.committed-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}}","page":"Instances","title":"Instances.committed","text":"Get the asset instance committed cash.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.committed-Tuple{Instances.Position}","page":"Instances","title":"Instances.committed","text":"Position locked in pending orders.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.entryprice!","page":"Instances","title":"Instances.entryprice!","text":"Update the entry price.\n\nentryprice!(po::Instances.Position) -> Any\nentryprice!(po::Instances.Position, v) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.entryprice-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any, OrderTypes.ByPos}","page":"Instances","title":"Instances.entryprice","text":"Asset entry price.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.initial!","page":"Instances","title":"Instances.initial!","text":"Sets initial margin (should always be positive).\n\ninitial!(po::Instances.Position) -> Float64\ninitial!(po::Instances.Position, v) -> Any\n\n\nThis function sets the initial margin of a given position (po) to the provided value (v). If no value is provided, it defaults to 0.0.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.instance","page":"Instances","title":"Instances.instance","text":"Create an AssetInstance from a zarr instance.\n\ninstance(\n    exc::Exchange,\n    a::AbstractAsset;\n    ...\n) -> Instances.AssetInstance{A, E, NoMargin} where {A<:AbstractAsset, E<:ExchangeID}\ninstance(\n    exc::Exchange,\n    a::AbstractAsset,\n    m::Misc.MarginMode;\n    zi\n) -> Instances.AssetInstance\n\n\nThis function constructs an AssetInstance by loading data from a zarr instance and requires an external constructor defined in Engine. The MarginMode can be specified, with NoMargin being the default.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.isdust-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Number, Misc.PositionSide}","page":"Instances","title":"Instances.isdust","text":"Check if the position value of the asset is below minimum quantity.\n\nisdust(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    price::Number,\n    p::Misc.PositionSide\n) -> Any\n\n\nThis function checks if the position value of a given AssetInstance at a specific price is below the minimum limit for that asset. The position side p determines if it's a long or short position.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.ishedged-Tuple","page":"Instances","title":"Instances.ishedged","text":"Check if the margin mode is hedged.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.ishedged-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.ishedged","text":"Check if the AssetInstance is hedged.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.leverage-Tuple{Instances.Position}","page":"Instances","title":"Instances.leverage","text":"Position leverage.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.leverage-Union{Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin}, Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.leverage","text":"Asset position leverage.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.liqprice!-Tuple{Instances.Position{Misc.Long}, Any}","page":"Instances","title":"Instances.liqprice!","text":"Sets the liquidation price for a long position.\n\nliqprice!(po::Instances.Position{Misc.Long}, v) -> Any\n\n\nThis function sets the liquidation price of a given long position (po) to the provided value (v).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.liqprice!-Tuple{Instances.Position{Misc.Short}, Any}","page":"Instances","title":"Instances.liqprice!","text":"Sets the liquidation price for a short position.\n\nliqprice!(po::Instances.Position{Misc.Short}, v) -> Any\n\n\nThis function sets the liquidation price of a given short position (po) to the provided value (v).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.liqprice!-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.liqprice!","text":"Sets asset position liquidation price.\n\nliqprice!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    v,\n    _::Union{Type{S<:Misc.PositionSide}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}, S<:Misc.PositionSide}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.liqprice-Tuple{Instances.Position}","page":"Instances","title":"Instances.liqprice","text":"Position liquidation price.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.liqprice-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.liqprice","text":"Asset position liquidation price.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.maintenance!-Tuple{Instances.Position, Any}","page":"Instances","title":"Instances.maintenance!","text":"Sets maintenance margin.\n\nmaintenance!(po::Instances.Position, v) -> Any\n\n\nThis function sets the maintenance margin of a given position (po) to the provided value (v).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.maintenance-Tuple{Instances.Position}","page":"Instances","title":"Instances.maintenance","text":"Position maintenance margin.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.maintenance-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.maintenance","text":"Asset position maintenance margin.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.makerfees-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.makerfees","text":"Maker fees for the asset instance (usually lower than taker fees.)\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.margin!-Tuple{Instances.Position}","page":"Instances","title":"Instances.margin!","text":"Sets initial margin given notional and leverage values.\n\nmargin!(po::Instances.Position; ntl, lev) -> Float64\n\n\nThis function sets the initial margin of a given position (po) based on the provided notional value (ntl) and leverage (lev). If no values are provided, the current notional value and leverage of the position are used.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.margin-Tuple{Instances.Position}","page":"Instances","title":"Instances.margin","text":"Position initial margin (includes additional).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.margin-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.margin","text":"Asset position initial margin.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.maxfees-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.maxfees","text":"The maximum fees for trading in the asset market (usually the lowest vip level.)\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.minfees-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.minfees","text":"The minimum fees for trading in the asset market (usually the highest vip level.)\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.mmr-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any, OrderTypes.ByPos}","page":"Instances","title":"Instances.mmr","text":"Get the maintenance margin rate for a MarginInstance.\n\nmmr(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    size,\n    s::OrderTypes.ByPos\n)\n\n\nThis function returns the maintenance margin rate for a MarginInstance for a given size and position side (Long or Short). The maintenance margin rate is the minimum amount of equity that must be maintained in a margin account.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.mmr-Tuple{Instances.Position}","page":"Instances","title":"Instances.mmr","text":"Position maintenance margin rate.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.nondust","page":"Instances","title":"Instances.nondust","text":"Get the asset cash rounded to precision.\n\nnondust(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    price::Number\n) -> Any\nnondust(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    price::Number,\n    p\n) -> Any\n\n\nThis function returns the asset cash of a MarginInstance rounded according to the asset's precision. The position side p is determined by the posside function.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.notional!-Tuple{Instances.Position, Any}","page":"Instances","title":"Instances.notional!","text":"Update the notional value.\n\nnotional!(po::Instances.Position, v) -> Any\n\n\nThis function updates the notional value of a given position (po) to the provided value (v).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.notional-Tuple{Instances.Position}","page":"Instances","title":"Instances.notional","text":"Position notional value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.notional-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.notional","text":"Asset position notional value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.ohlcv-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.ohlcv","text":"Get the asset instance ohlcv data for the smallest time frame.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.ohlcv_dict-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.ohlcv_dict","text":"Get the asset instance ohlcv data dictionary.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.pnl","page":"Instances","title":"Instances.pnl","text":"Calc PNL for short position given current_price as input.\n\npnl(\n    po::Instances.Position{Misc.Short},\n    current_price\n) -> Any\npnl(\n    po::Instances.Position{Misc.Short},\n    current_price,\n    amount\n) -> Any\n\n\nThis function calculates the Profit and Loss (PNL) for a short position (po), given the current price (current_price) and an optional amount (amount). If no amount is provided, the cash value of the position is used.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.pnl-2","page":"Instances","title":"Instances.pnl","text":"Calc PNL for long position given current_price as input.\n\npnl(po::Instances.Position{Misc.Long}, current_price) -> Any\npnl(\n    po::Instances.Position{Misc.Long},\n    current_price,\n    amount\n) -> Any\n\n\nThis function calculates the Profit and Loss (PNL) for a long position (po), given the current price (current_price) and an optional amount (amount). If no amount is provided, the cash value of the position is used.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.pnl-Union{Tuple{P}, Tuple{Any, Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P}, Any}} where P","page":"Instances","title":"Instances.pnl","text":"Calculate the profit and loss (PnL) of an asset position.\n\npnl(\n    ai,\n    _::Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P},\n    price\n) -> Any\n\n\nThis function calculates the profit and loss (PnL) for an asset position. It takes into account the current price and the position. The PnL represents the gain or loss made on the position, based on the current price compared to the price at which the position was opened.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.pnl-Union{Tuple{T}, Tuple{T, T, Any, OrderTypes.ByPos{Misc.Long}}} where T","page":"Instances","title":"Instances.pnl","text":"Calculate PNL for a long position.\n\npnl(\n    entryprice,\n    current_price,\n    amount,\n    _::OrderTypes.ByPos{Misc.Long}\n) -> Any\n\n\nThis function calculates the Profit and Loss (PNL) for a long position, given the entry price (entryprice), the current price (current_price), and the amount.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.pnl-Union{Tuple{T}, Tuple{T, T, Any, OrderTypes.ByPos{Misc.Short}}} where T","page":"Instances","title":"Instances.pnl","text":"Calculate PNL for a short position.\n\npnl(\n    entryprice,\n    current_price,\n    amount,\n    _::OrderTypes.ByPos{Misc.Short}\n) -> Any\n\n\nThis function calculates the Profit and Loss (PNL) for a short position, given the entry price (entryprice), the current price (current_price), and the amount.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.pnlpct-Tuple{Instances.Position, Any}","page":"Instances","title":"Instances.pnlpct","text":"Calc PNL percentage.\n\npnlpct(po::Instances.Position, v) -> Float64\n\n\nThis function calculates the Profit and Loss (PNL) percentage for a given position (po) and value (v).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.pnlpct-Union{Tuple{P}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P}, Any}} where P","page":"Instances","title":"Instances.pnlpct","text":"Calculate the profit and loss percentage (PnL%) of an asset position.\n\npnlpct(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    ::Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P},\n    price;\n    pos\n) -> Float64\n\n\nThis function calculates the profit and loss percentage (PnL%) for an asset position in a MarginInstance. It takes into account the current price and the position. The PnL% represents the gain or loss made on the position, as a percentage of the investment, based on the current price compared to the price at which the position was opened.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.positions-Tuple{Type{<:Misc.MarginMode}, AbstractAsset, NamedTuple{(:leverage, :amount, :price, :cost), <:NTuple{4, @NamedTuple{min::var\"#s1948\", max::var\"#s1948\"} where var\"#s1948\"<:T}} where T<:Real, Exchange}","page":"Instances","title":"Instances.positions","text":"Generate positions for a specific margin mode.\n\npositions(\n    M::Type{<:Misc.MarginMode},\n    a::AbstractAsset,\n    limits::NamedTuple{(:leverage, :amount, :price, :cost), <:NTuple{4, @NamedTuple{min::var\"#s1948\", max::var\"#s1948\"} where var\"#s1948\"<:T}} where T<:Real,\n    e::Exchange\n) -> Union{Tuple{Nothing, Nothing}, Tuple{Instances.Position, Instances.Position}}\n\n\nThis function generates long and short positions for a given asset on a specific exchange. The number and size of the positions are determined by the limits argument and the margin mode M.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.posside-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin}","page":"Instances","title":"Instances.posside","text":"Get the position side of an AssetInstance. \n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.price-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, Any, Vararg{Any}}","page":"Instances","title":"Instances.price","text":"Asset entry price.\n\nprice(\n    _::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin},\n    fromprice,\n    args...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.price-Tuple{Instances.Position}","page":"Instances","title":"Instances.price","text":"Position entryprice.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.price-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.price","text":"Asset entry price.\n\nprice(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    fromprice,\n    _::Union{Type{S<:Misc.PositionSide}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, S<:Misc.PositionSide}, S<:Misc.PositionSide}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.status!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Misc.PositionSide, Instances.PositionStatus}","page":"Instances","title":"Instances.status!","text":"Update the status of a non-hedged position in a MarginInstance.\n\nstatus!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    p::Misc.PositionSide,\n    pstat::Instances.PositionStatus\n) -> Any\n\n\nThis function opens or closes the status of a non-hedged position in a MarginInstance. A non-hedged position is a position that is not offset by a corresponding position in a related commodity or security. The PositionSide and PositionStatus are provided as inputs.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.status!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Union{Misc.CrossMargin{Misc.Hedged}, Misc.IsolatedMargin{Misc.Hedged}}, Misc.PositionSide, Instances.PositionStatus}","page":"Instances","title":"Instances.status!","text":"Update the status of a hedged position in a HedgedInstance.\n\nstatus!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Union{Misc.CrossMargin{Misc.Hedged}, Misc.IsolatedMargin{Misc.Hedged}},\n    p::Misc.PositionSide,\n    pstat::Instances.PositionStatus\n) -> Any\n\n\nThis function opens or closes the status of a hedged position in a HedgedInstance. A hedged position is a position that is offset by a corresponding position in a related commodity or security. The PositionSide and PositionStatus are provided as inputs.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.status-Tuple{Instances.Position}","page":"Instances","title":"Instances.status","text":"Position status (open or closed).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.status-Union{Tuple{S}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{S}}} where S<:Misc.PositionSide","page":"Instances","title":"Instances.status","text":"Asset position status (open or closed).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.takerfees-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instances.takerfees","text":"Taker fees for the asset instance (usually higher than maker fees.)\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.tier!","page":"Instances","title":"Instances.tier!","text":"Updates position leverage tier according to size.\n\ntier!(po::Instances.Position) -> Exchanges.LeverageTier\ntier!(\n    po::Instances.Position,\n    size\n) -> Exchanges.LeverageTier\n\n\nThis function adjusts the leverage tier of a given position (po) based on the provided size. If no size is provided, the notional value of the position is used.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.timestamp","page":"Instances","title":"Instances.timestamp","text":"Get the timestamp of the last trade.\n\n\n\n\n\n","category":"function"},{"location":"API/instances/#Instances.timestamp!-Tuple{Instances.Position, Dates.DateTime}","page":"Instances","title":"Instances.timestamp!","text":"Updates the timestamp of a position.\n\ntimestamp!(\n    po::Instances.Position,\n    d::Dates.DateTime\n) -> Dates.DateTime\n\n\nThis function sets the timestamp of a given position (po) to the provided DateTime value (d).\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.timestamp-Tuple{Instances.Position}","page":"Instances","title":"Instances.timestamp","text":"Last position update time\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.bc-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instruments.bc","text":"Get the base currency of an AssetInstance. \n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.IncreaseTrade}","page":"Instances","title":"Instruments.cash!","text":"Update the cash value for a MarginInstance after an IncreaseTrade.\n\ncash!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    t::OrderTypes.IncreaseTrade\n) -> Any\n\n\nThis function updates the cash value of a MarginInstance after an IncreaseTrade. The cash value would typically decrease after an increase trade, as assets are bought using cash.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ReduceTrade}","page":"Instances","title":"Instruments.cash!","text":"Update the cash value for a MarginInstance after a ReduceTrade.\n\ncash!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    t::OrderTypes.ReduceTrade\n) -> Any\n\n\nThis function updates the cash value of a MarginInstance after a ReduceTrade. The cash value would typically increase after a reduce trade, as assets are sold in exchange for cash.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, OrderTypes.SellTrade}","page":"Instances","title":"Instruments.cash!","text":"Update the cash value for a NoMarginInstance after a SellTrade.\n\ncash!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin},\n    t::OrderTypes.SellTrade\n) -> Any\n\n\nThis function updates the cash value of a NoMarginInstance after a SellTrade. The cash value would typically increase after a sell trade, as assets are sold in exchange for cash.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash!-Tuple{Instances.Position, Any}","page":"Instances","title":"Instruments.cash!","text":"Set position cash value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, OrderTypes.ByPos{Misc.Long}}","page":"Instances","title":"Instruments.cash","text":"Get the asset instance cash for the long position.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, OrderTypes.ByPos{Misc.Short}}","page":"Instances","title":"Instruments.cash","text":"Get the asset instance cash for the short position.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}}","page":"Instances","title":"Instruments.cash","text":"Get the asset instance cash.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.cash-Tuple{Instances.Position}","page":"Instances","title":"Instruments.cash","text":"Held position.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.freecash-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{Misc.Long}}","page":"Instances","title":"Instruments.freecash","text":"Calculate the free cash for a MarginInstance with long position.\n\nfreecash(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    p::OrderTypes.ByPos{Misc.Long}\n) -> Any\n\n\nThis function calculates the free cash (cash that is not tied up in trades) of a MarginInstance that has a long position. It takes into account the current cash, open long positions, and the margin requirements for those positions.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.freecash-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.ByPos{Misc.Short}}","page":"Instances","title":"Instruments.freecash","text":"Calculate the free cash for a MarginInstance with short position.\n\nfreecash(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    p::OrderTypes.ByPos{Misc.Short}\n) -> Any\n\n\nThis function calculates the free cash (cash that is not tied up in trades) of a MarginInstance that has a short position. It takes into account the current cash, open short positions, and the margin requirements for those positions.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.freecash-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, Vararg{Any}}","page":"Instances","title":"Instruments.freecash","text":"Calculate the free cash for a NoMarginInstance.\n\nfreecash(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin},\n    args...\n) -> Any\n\n\nThis function calculates the free cash (cash that is not tied up in trades) of a NoMarginInstance. It takes into account the current cash, open orders, and any additional factors specified in args.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.qc-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instruments.qc","text":"Get the quote currency of an AssetInstance. \n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.raw-Tuple{Instances.AssetInstance}","page":"Instances","title":"Instruments.raw","text":"Get the raw string id of an AssetInstance. \n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.value-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}}","page":"Instances","title":"Instruments.value","text":"Calculate the value of a NoMarginInstance.\n\nvalue(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin};\n    current_price,\n    fees\n) -> Any\n\n\nThis function calculates the value of a NoMarginInstance. It uses the current price (defaulting to the last historical price), the cash in the instance and the maximum fees. The value represents the amount of cash that could be obtained by liquidating the instance at the current price, taking into account the fees.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instruments.value-Union{Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin}, Tuple{P}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P}}} where P","page":"Instances","title":"Instruments.value","text":"Calculate the value of a MarginInstance.\n\nvalue(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin;\n    ...\n) -> Any\nvalue(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    ::Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P};\n    current_price,\n    fees\n) -> Any\n\n\nThis function calculates the value of a MarginInstance. It takes into account the current price (defaulting to the price of the position), the cash in the position and the maximum fees. The value represents the amount of cash that could be obtained by liquidating the position at the current price, taking into account the fees.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.gtxzero-Tuple{Instances.AssetInstance, Any, Val{:amount}}","page":"Instances","title":"Misc.gtxzero","text":"Check if an amount is greater than zero for an AssetInstance.\n\ngtxzero(\n    ai::Instances.AssetInstance,\n    v,\n    _::Val{:amount}\n) -> Any\n\n\nThis function checks if a specified amount v is greater than zero for an AssetInstance. It's used to validate the amount before performing operations on the asset.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.gtxzero-Tuple{Instances.AssetInstance, Any, Val{:cost}}","page":"Instances","title":"Misc.gtxzero","text":"Check if a cost is greater than zero for an AssetInstance.\n\ngtxzero(\n    ai::Instances.AssetInstance,\n    v,\n    _::Val{:cost}\n) -> Any\n\n\nThis function checks if a specified cost v is greater than zero for an AssetInstance. The cost is considered greater than zero if it is above the minimum limit minus a small epsilon value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.gtxzero-Tuple{Instances.AssetInstance, Any, Val{:price}}","page":"Instances","title":"Misc.gtxzero","text":"Check if a price is greater than zero for an AssetInstance.\n\ngtxzero(\n    ai::Instances.AssetInstance,\n    v,\n    _::Val{:price}\n) -> Any\n\n\nThis function checks if a specified price v is greater than zero for an AssetInstance. The price is considered greater than zero if it is above the minimum limit minus a small epsilon value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.load!-Tuple{Instances.AssetInstance}","page":"Instances","title":"Misc.load!","text":"Load OHLCV data for an AssetInstance.\n\nload!(ai::Instances.AssetInstance; reset, zi)\n\n\nThis function loads OHLCV (Open, High, Low, Close, Volume) data for a given AssetInstance. If reset is set to true, it will re-fetch the data even if it's already been loaded.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.ltxzero-Tuple{Instances.AssetInstance, Any, Val{:amount}}","page":"Instances","title":"Misc.ltxzero","text":"Check if an amount is less than zero for an AssetInstance.\n\nltxzero(\n    ai::Instances.AssetInstance,\n    v,\n    _::Val{:amount}\n) -> Any\n\n\nThis function checks if a specified amount v is less than zero for an AssetInstance. It's used to validate the amount before performing operations on the asset.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.ltxzero-Tuple{Instances.AssetInstance, Any, Val{:cost}}","page":"Instances","title":"Misc.ltxzero","text":"Check if a cost is less than zero for an AssetInstance.\n\nltxzero(\n    ai::Instances.AssetInstance,\n    v,\n    _::Val{:cost}\n) -> Any\n\n\nThis function checks if a specified cost v is less than zero for an AssetInstance. The cost is considered less than zero if it is below the minimum limit minus a small epsilon value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.ltxzero-Tuple{Instances.AssetInstance, Any, Val{:price}}","page":"Instances","title":"Misc.ltxzero","text":"Check if a price is less than zero for an AssetInstance.\n\nltxzero(\n    ai::Instances.AssetInstance,\n    v,\n    _::Val{:price}\n) -> Any\n\n\nThis function checks if a specified price v is less than zero for an AssetInstance. The price is considered less than zero if it is below the minimum limit minus a small epsilon value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.marginmode-Union{Tuple{M}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M}, Vararg{Any}}} where M<:Misc.WithMargin","page":"Instances","title":"Misc.marginmode","text":"Retrieve the margin mode of an AssetInstance. \n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.opposite-Union{Tuple{P}, Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Union{Instances.Position{P}, P}}} where P","page":"Instances","title":"Misc.opposite","text":"The opposite position w.r.t. the asset instance and another Position or PositionSide.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.reset!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Vararg{Any}}","page":"Instances","title":"Misc.reset!","text":"Resets asset positions for a MarginInstance.\n\nreset!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    args...\n) -> Any\n\n\nThis function resets the positions (open trades) of a MarginInstance to initial values. Any additional arguments in args are used to adjust the reset process, if necessary.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.reset!-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, Vararg{Any}}","page":"Instances","title":"Misc.reset!","text":"Resets asset cash and commitments for a NoMarginInstance.\n\nreset!(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin},\n    args...\n)\n\n\nThis function resets the cash and commitments (open trades) of a NoMarginInstance to initial values. Any additional arguments in args are used to adjust the reset process, if necessary.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.reset!-Tuple{Instances.Position, Val{:full}}","page":"Instances","title":"Misc.reset!","text":"Resets position to initial state.\n\nwarning: Also resets leverage\n\n\nWhen reopening a position, leverage should be set again.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Misc.reset!-Tuple{Instances.Position}","page":"Instances","title":"Misc.reset!","text":"Resets the bare fields to close a position.\n\nreset!(po::Instances.Position) -> Cash{S1, Float64} where S1\n\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#OrderTypes.commit!-Tuple{Instances.Position, Any}","page":"Instances","title":"OrderTypes.commit!","text":"Set position committed cash value.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#OrderTypes.islong-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}}","page":"Instances","title":"OrderTypes.islong","text":"Check if the AssetInstance is long.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#OrderTypes.isshort-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}}","page":"Instances","title":"OrderTypes.isshort","text":"Check if the AssetInstance is short.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#OrderTypes.trades-Tuple{Instances.AssetInstance}","page":"Instances","title":"OrderTypes.trades","text":"Get the trade history of an AssetInstance.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#TimeTicks.timeframe-Tuple{Instances.AssetInstance}","page":"Instances","title":"TimeTicks.timeframe","text":"Get the timeframe for an AssetInstance.\n\ntimeframe(\n    ai::Instances.AssetInstance\n) -> TimeFrames.TimeFrame\n\n\nThis function returns the timeframe for an AssetInstance. The timeframe represents the interval at which the asset's price data is sampled or updated.\n\n\n\n\n\n","category":"method"},{"location":"API/instances/#Instances.@_round","page":"Instances","title":"Instances.@_round","text":"Round a value based on the precision field of the ai asset instance.\n\nThis macro rounds a value v based on the precision field of an AssetInstance. By default, it rounds the amount, but it can also round other fields like price or cost if specified.\n\n\n\n\n\n","category":"macro"},{"location":"API/instances/#Instances.@ramount-Tuple{Any}","page":"Instances","title":"Instances.@ramount","text":"Round a value based on the precision (amount) field of the ai asset instance.\n\nThis macro rounds an amount value v based on the precision field of an AssetInstance.\n\n\n\n\n\n","category":"macro"},{"location":"API/instances/#Instances.@rprice-Tuple{Any}","page":"Instances","title":"Instances.@rprice","text":"Round a value based on the precision (price) field of the ai asset instance.\n\nThis macro rounds a price value v based on the precision field of an AssetInstance.\n\n\n\n\n\n","category":"macro"},{"location":"API/instances/#See-Also","page":"Instances","title":"See Also","text":"","category":"section"},{"location":"API/instances/","page":"Instances","title":"Instances","text":"Instruments API - Financial instrument definitions\nStrategies API - Strategy base classes and interfaces\nData API - Data structures and management\nExecutors API - Order execution and management\nStrategy Development Guide - Building trading strategies\nAdvanced Trading Guide - Margin and derivative trading","category":"page"},{"location":"devdocs/#Development-Documentation","page":"Developer Documentation","title":"Development Documentation","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"This comprehensive guide covers Planar's architecture, development setup, contribution guidelines, and best practices for extending the framework.","category":"page"},{"location":"devdocs/#Architecture-Overview","page":"Developer Documentation","title":"Architecture Overview","text":"","category":"section"},{"location":"devdocs/#System-Architecture","page":"Developer Documentation","title":"System Architecture","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Planar follows a modular architecture with clear separation of concerns:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"┌─────────────────────────────────────────────────────────────┐\n│                    User Interface Layer                     │\n├─────────────────────────────────────────────────────────────┤\n│  Planar.jl (Main)  │  PlanarInteractive.jl  │  CLI Tools   │\n├─────────────────────────────────────────────────────────────┤\n│                    Strategy Layer                           │\n├─────────────────────────────────────────────────────────────┤\n│   Strategies.jl    │    User Strategies     │  StrategyStats│\n├─────────────────────────────────────────────────────────────┤\n│                    Execution Layer                          │\n├─────────────────────────────────────────────────────────────┤\n│  SimMode.jl  │  PaperMode.jl  │  LiveMode.jl  │ Executors.jl│\n├─────────────────────────────────────────────────────────────┤\n│                    Data & Exchange Layer                    │\n├─────────────────────────────────────────────────────────────┤\n│ Exchanges.jl │ Data.jl │ Fetch.jl │ Processing.jl │ Metrics.jl│\n├─────────────────────────────────────────────────────────────┤\n│                    Foundation Layer                         │\n├─────────────────────────────────────────────────────────────┤\n│Engine.jl│Instruments.jl│OrderTypes.jl│Collections.jl│Lang.jl│\n└─────────────────────────────────────────────────────────────┘","category":"page"},{"location":"devdocs/#Core-Components","page":"Developer Documentation","title":"Core Components","text":"","category":"section"},{"location":"devdocs/#Engine-Module","page":"Developer Documentation","title":"Engine Module","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The foundation of Planar, providing:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Asset Management: AbstractAsset, Asset, Derivative types\nInstance System: AssetInstance linking assets to exchanges\nStrategy Framework: Strategy{Mode} parametric types\nCore Abstractions: Base types and interfaces","category":"page"},{"location":"devdocs/#Execution-Modes","page":"Developer Documentation","title":"Execution Modes","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Three distinct execution environments:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"SimMode: Fast synchronous backtesting-mode) with OHLCV data\nPaperMode: Real-time simulation with live data feeds\nLiveMode: Actual trading with exchanges APIs","category":"page"},{"location":"devdocs/#Data-Pipeline","page":"Developer Documentation","title":"Data Pipeline","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Comprehensive data management:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Fetch: Data acquisition from exchanges and external sources\nProcessing: Data cleaning, resampling, and transformation\nStorage: Zarr-based large dataset storage with LMDB indexing\nWatchers: Real-time data monitoring and alerting","category":"page"},{"location":"devdocs/#Exchange-Integration","page":"Developer Documentation","title":"Exchange Integration","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Unified exchange interface:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"CCXT Integration: 100+ exchange support via Ccxt.jl\nCustom Exchanges: Framework for implementing proprietary APIs\nOrder Management: Unified order types across exchanges","category":"page"},{"location":"devdocs/#Module-Relationships","page":"Developer Documentation","title":"Module Relationships","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"graph TD\n    A[Planar.jl] --> B[Engine.jl]\n    A --> C[Strategies.jl]\n    A --> D[SimMode.jl]\n    A --> E[PaperMode.jl]\n    A --> F[LiveMode.jl]\n    \n    C --> B\n    D --> B\n    E --> B\n    F --> B\n    \n    B --> G[Instruments.jl]\n    B --> H[OrderTypes.jl]\n    B --> I[Executors.jl]\n    \n    D --> J[Data.jl]\n    E --> J\n    F --> J\n    \n    J --> K[Fetch.jl]\n    J --> L[Processing.jl]\n    \n    F --> M[Exchanges.jl]\n    E --> M\n    \n    M --> N[ExchangeTypes.jl]\n    \n    O[PlanarInteractive.jl] --> A\n    O --> P[Plotting.jl]\n    O --> Q[Optim.jl]","category":"page"},{"location":"devdocs/#Data-Flow-Architecture","page":"Developer Documentation","title":"Data Flow Architecture","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"sequenceDiagram\n    participant U as User Strategy\n    participant S as Strategy Engine\n    participant E as Execution Mode\n    participant D as Data Layer\n    participant X as Exchange\n    \n    U->>S: Initialize Strategy\n    S->>D: Load Historical Data\n    D->>S: Return [OHLCV](guides/../guides/data-management.md#ohlcv-data) Data\n    \n    loop Trading Loop\n        S->>U: Call Strategy Logic\n        U->>S: Generate Signals\n        S->>E: Execute Orders\n        E->>X: Place Orders (Live/Paper)\n        X->>E: Order Confirmation\n        E->>S: Update Positions\n        S->>D: Log Trade Data\n    end","category":"page"},{"location":"devdocs/#Development-Setup","page":"Developer Documentation","title":"Development Setup","text":"","category":"section"},{"location":"devdocs/#Prerequisites","page":"Developer Documentation","title":"Prerequisites","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Julia 1.11+: Latest stable Julia version\nGit: With submodule support\nPython 3.8+: For CCXT integration (managed via CondaPkg)\nDocker (optional): For containerized development","category":"page"},{"location":"devdocs/#Initial-Setup","page":"Developer Documentation","title":"Initial Setup","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Clone Repository:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"git clone --recurse-submodules https://github.com/defnlnotme/Planar.jl\ncd Planar.jl","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Environment Setup:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"# Enable direnv (recommended)\ndirenv allow\n\n# Or manually set environment\nexport JULIA_PROJECT=Planar\nexport JULIA_NUM_THREADS=$(nproc)","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Install Dependencies:","category":"page"},{"location":"devdocs/#Development-Environment","page":"Developer Documentation","title":"Development Environment","text":"","category":"section"},{"location":"devdocs/#Recommended-Julia-Setup","page":"Developer Documentation","title":"Recommended Julia Setup","text":"","category":"section"},{"location":"devdocs/#IDE-Configuration","page":"Developer Documentation","title":"IDE Configuration","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"VS Code with Julia Extension:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"{\n    \"julia.environmentPath\": \"Planar\",\n    \"julia.enableTelemetry\": false,\n    \"julia.execution.resultDisplay\": \"both\",\n    \"julia.lint.run\": true,\n    \"julia.format.indent\": 4,\n    \"julia.format.margin\": 92\n}","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Vim/Neovim with LanguageServer.jl:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"require'lspconfig'.julials.setup{\n    settings = {\n        julia = {\n            environmentPath = \"Planar\",\n            format = {\n                indent = 4,\n                margin = 92\n            }\n        }\n    }\n}","category":"page"},{"location":"devdocs/#PlanarDev-Utilities","page":"Developer Documentation","title":"PlanarDev Utilities","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The PlanarDev package assists developers by providing helper functions for working with Planar and for conducting tests.","category":"page"},{"location":"devdocs/#Precompilation-Control","page":"Developer Documentation","title":"Precompilation Control","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"To skip precompilation for selected modules, set the JULIA_NOPRECOMP environment variable:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Alternatively, you can manage environment variables with direnv (refer to the .envrc in the repository). To disable precompilation entirely for certain packages, use JULIA_NOPRECOMP=all. This is recommended only when altering low-level components of the module stack. Remember to clear the compilation cache when changing precompilation settings:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The Exchanges and Fetch packages contain a compile.jl file to generate precompile statements using CompileBot.jl. This is particularly useful for precompilation tasks that involve numerous web requests. However, this method is not currently used as it does not compile as many methods as PrecompileTools.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"warning: Custom Precompilation\nFor custom method precompilation, enclose your code with py_start_loop and py_stop_loop from the Python package to prevent Pkg from stalling due to lingering threads.","category":"page"},{"location":"devdocs/#Method-Invalidation-Strategy","page":"Developer Documentation","title":"Method Invalidation Strategy","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The order of using ... statements when loading modules can influence method invalidation. To minimize invalidation, arrange the module imports starting with the ones most likely to cause invalidations to the ones least likely. For instance, placing using Python at the beginning can expedite loading times:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Modules known for heavy invalidations:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Python\nCcxt (initiates the Python async loop)\nData (relies on Zarr and DataFrames)\nPlots (depends on Makie)","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"To reduce invalidations, include external modules in only one local package and then use that package as a dependency in other local packages. For instance, if DataFrames is a dependency of the local package Data, and you want to use DataFrames in the Stats package, do not add DataFrames to Stats dependencies. Instead, use Data and import DataFrames from there:","category":"page"},{"location":"devdocs/#Handling-Segfaults","page":"Developer Documentation","title":"Handling Segfaults","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"In rare cases involving complex multi-threaded scenarios, disable and re-enable the garbage collector (GC) around the loading of Planar to avoid segmentation faults:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Refer to PythonCall.jl issue #201 for more details.","category":"page"},{"location":"devdocs/#Dependency-Management","page":"Developer Documentation","title":"Dependency Management","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"When adding dependencies, ensure that a dependency is only included in one subpackage. If you need the same dependency in another subpackage, add the first subpackage as the dependency, not the external module.","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"The order of using or import statements within packages is crucial. Always import external dependencies before internal ones to minimize method invalidations.","category":"page"},{"location":"devdocs/#See-Also","page":"Developer Documentation","title":"See Also","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"devdocs/#Contribution-Guidelines","page":"Developer Documentation","title":"Contribution Guidelines","text":"","category":"section"},{"location":"devdocs/#Code-Style-and-Standards","page":"Developer Documentation","title":"Code Style and Standards","text":"","category":"section"},{"location":"devdocs/#Julia-Formatting","page":"Developer Documentation","title":"Julia Formatting","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Planar uses JuliaFormatter with Blue style:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Configuration in .JuliaFormatter.toml:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"style = \"blue\"\nmargin = 92\nindent = 4\nalways_for_in = true\nwhitespace_typedefs = true\nwhitespace_ops_in_indices = true\nremove_extra_newlines = true","category":"page"},{"location":"devdocs/#Naming-Conventions","page":"Developer Documentation","title":"Naming Conventions","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Types: PascalCase (MyCustomType)\nFunctions: snakecase (`myfunction`)\nConstants: UPPERCASE (`MYCONSTANT`)\nModules: PascalCase (MyModule)\nVariables: snakecase (`myvariable`)","category":"page"},{"location":"devdocs/#Documentation-Standards","page":"Developer Documentation","title":"Documentation Standards","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"All public functions must have docstrings:","category":"page"},{"location":"devdocs/#Testing-Patterns","page":"Developer Documentation","title":"Testing Patterns","text":"","category":"section"},{"location":"devdocs/#Unit-Testing-Structure","page":"Developer Documentation","title":"Unit Testing Structure","text":"","category":"section"},{"location":"devdocs/#Integration-Testing","page":"Developer Documentation","title":"Integration Testing","text":"","category":"section"},{"location":"devdocs/#Property-Based-Testing","page":"Developer Documentation","title":"Property-Based Testing","text":"","category":"section"},{"location":"devdocs/#Extension-Best-Practices","page":"Developer Documentation","title":"Extension Best Practices","text":"","category":"section"},{"location":"devdocs/#Creating-New-Modules","page":"Developer Documentation","title":"Creating New Modules","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Module Structure:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"MyNewModule/\n├── Project.toml\n├── Manifest.toml\n├── src/\n│   ├── MyNewModule.jl\n│   ├── types.jl\n│   ├── functions.jl\n│   └── utils.jl\n├── test/\n│   ├── runtests.jl\n│   └── test_functions.jl\n└── README.md","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Project.toml Template:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"name = \"MyNewModule\"\nuuid = \"generate-new-uuid\"\nauthors = [\"Your Name <your.email@example.com>\"]\nversion = \"0.1.0\"\n\n[deps]\n# Only essential dependencies\nEngine = {path = \"../Engine\"}\n\n[compat]\njulia = \"1.11\"","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Module Definition:","category":"page"},{"location":"devdocs/#Implementing-Custom-Strategies","page":"Developer Documentation","title":"Implementing Custom Strategies","text":"","category":"section"},{"location":"devdocs/#Performance-Optimization-Guidelines","page":"Developer Documentation","title":"Performance Optimization Guidelines","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Type Stability:\nMemory Allocation:\nBenchmarking:","category":"page"},{"location":"devdocs/#Debugging-and-Profiling","page":"Developer Documentation","title":"Debugging and Profiling","text":"","category":"section"},{"location":"devdocs/#Debugging-Strategies","page":"Developer Documentation","title":"Debugging Strategies","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Logging:\nInteractive Debugging:\nTesting Utilities:","category":"page"},{"location":"devdocs/#Performance-Profiling","page":"Developer Documentation","title":"Performance Profiling","text":"","category":"section"},{"location":"devdocs/#Continuous-Integration","page":"Developer Documentation","title":"Continuous Integration","text":"","category":"section"},{"location":"devdocs/#GitHub-Actions-Workflow","page":"Developer Documentation","title":"GitHub Actions Workflow","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"# .github/workflows/ci.yml\nname: CI\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        julia-version: ['1.11', '1.12']\n    \n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n    \n    - uses: julia-actions/setup-julia@v1\n      with:\n        version: ${{ matrix.julia-version }}\n    \n    - uses: julia-actions/cache@v1\n    \n    - uses: julia-actions/julia-buildpkg@v1\n      with:\n        project: Planar\n    \n    - uses: julia-actions/julia-runtest@v1\n      with:\n        project: Planar\n    \n    - uses: julia-actions/julia-processcoverage@v1\n    \n    - uses: codecov/codecov-action@v3","category":"page"},{"location":"devdocs/#Release-Process","page":"Developer Documentation","title":"Release Process","text":"","category":"section"},{"location":"devdocs/#Version-Management","page":"Developer Documentation","title":"Version Management","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Semantic Versioning: Follow SemVer (MAJOR.MINOR.PATCH)\nMAJOR: Breaking changes\nMINOR: New features, backward compatible\nPATCH: Bug fixes, backward compatible\nRelease Checklist:\n[ ] Update version in Project.toml\n[ ] Update CHANGELOG.md\n[ ] Run full test suite\n[ ] Update documentation\n[ ] Create release tag\n[ ] Build and test Docker images","category":"page"},{"location":"devdocs/#Documentation-Updates","page":"Developer Documentation","title":"Documentation Updates","text":"","category":"section"},{"location":"devdocs/#Community-Guidelines","page":"Developer Documentation","title":"Community Guidelines","text":"","category":"section"},{"location":"devdocs/#Issue-Reporting","page":"Developer Documentation","title":"Issue Reporting","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"When reporting issues, include:","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Julia version and Planar version\nMinimal reproducible example\nExpected vs actual behavior\nError messages and stack traces\nSystem information (OS, architecture)","category":"page"},{"location":"devdocs/#Pull-Request-Process","page":"Developer Documentation","title":"Pull Request Process","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Fork the repository\nCreate feature branch from develop\nMake changes with tests\nUpdate documentation\nSubmit pull request with clear description\nAddress review feedback\nMerge after approval","category":"page"},{"location":"devdocs/#Code-Review-Standards","page":"Developer Documentation","title":"Code Review Standards","text":"","category":"section"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"Functionality: Does the code work as intended?\nPerformance: Are there performance implications?\nStyle: Does it follow project conventions?\nTests: Are there adequate tests?\nDocumentation: Is it properly documented?\nBreaking Changes: Are breaking changes justified and documented?","category":"page"},{"location":"devdocs/","page":"Developer Documentation","title":"Developer Documentation","text":"This comprehensive development guide ensures consistent, high-quality contributions to the Planar ecosystem.","category":"page"},{"location":"API/ccxt/#Ccxt","page":"CCXT","title":"Ccxt","text":"","category":"section"},{"location":"API/ccxt/","page":"CCXT","title":"CCXT","text":"The Ccxt module handles the (python) ccxt library. Wraps the ccxt api.","category":"page"},{"location":"API/ccxt/#Ccxt.MARKETS_PATH","page":"CCXT","title":"Ccxt.MARKETS_PATH","text":"The path to the markets data directory.\n\n\n\n\n\n","category":"constant"},{"location":"API/ccxt/#Ccxt.ccxt","page":"CCXT","title":"Ccxt.ccxt","text":"The ccxt python module reference\n\n\n\n\n\n","category":"constant"},{"location":"API/ccxt/#Ccxt.ccxt_errors","page":"CCXT","title":"Ccxt.ccxt_errors","text":"Ccxt exception names\n\n\n\n\n\n","category":"constant"},{"location":"API/ccxt/#Ccxt.ccxt_ws","page":"CCXT","title":"Ccxt.ccxt_ws","text":"The ccxt.pro (websockets) python module reference\n\n\n\n\n\n","category":"constant"},{"location":"API/ccxt/#Ccxt._ccxt_errors!-Tuple{}","page":"CCXT","title":"Ccxt._ccxt_errors!","text":"Populates the ccxt_errors array with error names from the ccxt library.\n\n_ccxt_errors!()\n\n\nThis function checks if the ccxt_errors array is empty. If it is, it imports the ccxt.base.errors module from the ccxt library, retrieves the directory of the module, and iterates over each error. It then checks if the first character of the error name is uppercase. If it is, the error name is added to the ccxt_errors array.\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt._init-Tuple{}","page":"CCXT","title":"Ccxt._init","text":"Initializes the Python environment and creates the markets data directory.\n\n_init() -> Union{Nothing, Bool}\n\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt._issupported-Tuple{Py, Any}","page":"CCXT","title":"Ccxt._issupported","text":"Check if the key k is in the dictionary has and return its boolean value.\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt._multifunc","page":"CCXT","title":"Ccxt._multifunc","text":"Choose correct ccxt function according to what the exchange supports.\n\n\n\n\n\n","category":"function"},{"location":"API/ccxt/#Ccxt._out_as_input-Tuple{Any, Any}","page":"CCXT","title":"Ccxt._out_as_input","text":"A dictionary for storing function wrappers with their unique identifiers.\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt.ccxt_exchange","page":"CCXT","title":"Ccxt.ccxt_exchange","text":"Instantiate a CCXT exchange.\n\nccxt_exchange(name::Symbol; ...) -> Py\nccxt_exchange(name::Symbol, params; kwargs...) -> Py\n\n\nThis function creates an instance of a CCXT exchange. It checks if the exchange is available in the WebSocket (ws) module, otherwise it looks in the asynchronous (async) module. If optional parameters are provided, they are passed to the exchange constructor.\n\n\n\n\n\n","category":"function"},{"location":"API/ccxt/#Ccxt.choosefunc-Tuple{Any, Any, AbstractVector}","page":"CCXT","title":"Ccxt.choosefunc","text":"Chooses a function based on the provided parameters and executes it.\n\nchoosefunc(\n    exc,\n    suffix,\n    inputs::AbstractVector;\n    elkey,\n    kwargs...\n) -> Union{Ccxt.var\"#default_func#24\"{Base.Pairs{Symbol, Union{}, Nothing, @NamedTuple{}}}, Ccxt.var\"#multi_func#20\"{Nothing, Base.Pairs{Symbol, Union{}, Nothing, @NamedTuple{}}, <:AbstractVector{T}} where T, Ccxt.var\"#single_func#21\"{Nothing, Base.Pairs{Symbol, Union{}, Nothing, @NamedTuple{}}, <:AbstractVector{T}} where T}\n\n\nThis function selects a function based on the provided exception, suffix, and inputs. It then executes the chosen function with the provided inputs and keyword arguments. The function can handle multiple types of inputs and can execute multiple functions concurrently if necessary.\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt.isccxterror-Tuple{PyException}","page":"CCXT","title":"Ccxt.isccxterror","text":"Determines if a Python exception is a ccxt error.\n\nisccxterror(err::PyException) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt.isinitialized-Tuple{}","page":"CCXT","title":"Ccxt.isinitialized","text":"Checks if the ccxt object is initialized.\n\nisinitialized() -> Bool\n\n\nThis function checks if the global variable ccxt is initialized by checking if it's not nothing and not null in the Python context.\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt.issupported-Tuple{Any, Any}","page":"CCXT","title":"Ccxt.issupported","text":"Check if the key k is supported in the exc.py.has dictionary.\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#Ccxt.upgrade-Tuple{}","page":"CCXT","title":"Ccxt.upgrade","text":"Upgrades the ccxt library to the latest version.\n\nupgrade() -> Py\n\n\nThis function upgrades the ccxt library to the latest version available. It checks the current version of the ccxt library, and if a newer version is available, it upgrades the library using pip.\n\n\n\n\n\n","category":"method"},{"location":"API/ccxt/#See-Also","page":"CCXT","title":"See Also","text":"","category":"section"},{"location":"API/ccxt/","page":"CCXT","title":"CCXT","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration","category":"page"},{"location":"resources/#Resources","page":"Resources","title":"Resources","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Additional resources and reference materials for Planar users.","category":"page"},{"location":"resources/#Available-Resources","page":"Resources","title":"Available Resources","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Glossary - Terms and concepts\nMigration Guides - Version update guides\nCommunity - Support and contacts","category":"page"},{"location":"resources/#External-Resources","page":"Resources","title":"External Resources","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Julia Documentation - Julia language reference\nCCXT Documentation - Exchange API reference\nPlanar GitHub - Source code and issues","category":"page"},{"location":"resources/#See-Also","page":"Resources","title":"See Also","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration","category":"page"},{"location":"resources/#Contributing","page":"Resources","title":"Contributing","text":"","category":"section"},{"location":"resources/","page":"Resources","title":"Resources","text":"Interested in contributing to Planar? See our contribution guidelines and community resources.","category":"page"},{"location":"guides/execution-modes/#Execution-Modes-Guide","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"This comprehensive guide covers Planar's three execution modes and how to safely transition between them. Learn how to develop strategies in simulation, validate them in paper mode, and deploy them for live trading with proper risk management.","category":"page"},{"location":"guides/execution-modes/#Quick-Navigation","page":"Execution Modes Guide","title":"Quick Navigation","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Mode Overview - Understanding the three execution modes\nSimulation Mode - Backtesting with historical data\nPaper Mode - Real-time simulation without capital risk\nLive Mode - Real trading with actual capital\nMode Transitions - Safe progression between modes\nBest Practices - Guidelines for each mode\ntroubleshooting - Common issues and solutions","category":"page"},{"location":"guides/execution-modes/#Prerequisites","page":"Execution Modes Guide","title":"Prerequisites","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Completed the Getting Started Guide\nBasic understanding of Strategy Development)\nFamiliarity with Data Management","category":"page"},{"location":"guides/execution-modes/#Related-Topics","page":"Execution Modes Guide","title":"Related Topics","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Strategy Development) - Building trading strategies\nRisk Management - Managing trading risks\noptimization - Parameter tuning and backtesting","category":"page"},{"location":"guides/execution-modes/#Mode-Overview","page":"Execution Modes Guide","title":"Mode Overview","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Planar supports three distinct execution modes, each designed for different stages of strategy development and deployment:","category":"page"},{"location":"guides/execution-modes/#Mode-Comparison-Matrix","page":"Execution Modes Guide","title":"Mode Comparison Matrix","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Feature Sim Mode Paper Mode Live Mode\nData Source Historical Live Market Data Live Market Data\nOrder Execution Simulated Simulated Real Exchange API\nCapital Risk None None Real Money\nMarket Impact None None Real\nLatency None Real Network Real Network + Exchange\nSlippage Modeled Modeled from Order Book Real Market Slippage\nFees Modeled Modeled Real Exchange Fees\nOrder Book Historical/Modeled Real-time Real-time\nSpeed Very Fast Real-time Real-time\nAPI Limits None Rate Limited Rate Limited\nFunding Costs Modeled Modeled Real","category":"page"},{"location":"guides/execution-modes/#Development-Workflow","page":"Execution Modes Guide","title":"Development Workflow","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"The recommended development workflow follows a systematic progression through all three modes:","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"graph TD\n    A[Strategy Idea] --> B[Sim Mode Development]\n    B --> C[Parameter Optimization]\n    C --> D[Historical Validation]\n    D --> E{Results Satisfactory?}\n    E -->|No| B\n    E -->|Yes| F[Paper Mode Testing]\n    F --> G[Real-time Validation]\n    G --> H[Market Condition Testing]\n    H --> I{Paper Results Good?}\n    I -->|No| J[Refine Strategy]\n    J --> B\n    I -->|Yes| K[Live Mode Preparation]\n    K --> L[Small Capital Test]\n    L --> M[Gradual Scale-up]\n    M --> N[Full Deployment]","category":"page"},{"location":"guides/execution-modes/#Simulation-Mode","page":"Execution Modes Guide","title":"Simulation Mode","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Simulation mode (Sim) is designed for strategy development and backtesting using historical data. It provides fast execution with no capital risk, making it ideal for initial development and optimization.","category":"page"},{"location":"guides/execution-modes/#Basic-Sim-Mode-Setup","page":"Execution Modes Guide","title":"Basic Sim Mode Setup","text":"","category":"section"},{"location":"guides/execution-modes/#Advanced-Sim-Configuration","page":"Execution Modes Guide","title":"Advanced Sim Configuration","text":"","category":"section"},{"location":"guides/execution-modes/#Sim-Mode-Features","page":"Execution Modes Guide","title":"Sim Mode Features","text":"","category":"section"},{"location":"guides/execution-modes/#Realistic-Order-Execution","page":"Execution Modes Guide","title":"Realistic Order Execution","text":"","category":"section"},{"location":"guides/execution-modes/#Performance-Optimization","page":"Execution Modes Guide","title":"Performance Optimization","text":"","category":"section"},{"location":"guides/execution-modes/#Walk-Forward-Analysis","page":"Execution Modes Guide","title":"Walk-Forward Analysis","text":"","category":"section"},{"location":"guides/execution-modes/#Sim-Mode-Best-Practices","page":"Execution Modes Guide","title":"Sim Mode Best Practices","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Avoid Overfitting: Use out-of-sample testing and walk-forward analysis\nModel Reality: Include realistic slippage, fees, and execution delays\nValidate Assumptions: Test across different market conditions\nPerformance Monitoring: Track key metrics throughout development","category":"page"},{"location":"guides/execution-modes/#Paper-Mode","page":"Execution Modes Guide","title":"Paper Mode","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Paper mode provides real-time simulation using live market data without risking actual capital. It's essential for validating strategies with current market conditions before live deployment.","category":"page"},{"location":"guides/execution-modes/#Basic-Paper-Mode-Setup","page":"Execution Modes Guide","title":"Basic Paper Mode Setup","text":"","category":"section"},{"location":"guides/execution-modes/#Advanced-Paper-Configuration","page":"Execution Modes Guide","title":"Advanced Paper Configuration","text":"","category":"section"},{"location":"guides/execution-modes/#Paper-Mode-Features","page":"Execution Modes Guide","title":"Paper Mode Features","text":"","category":"section"},{"location":"guides/execution-modes/#Real-Time-Order-Execution","page":"Execution Modes Guide","title":"Real-Time Order Execution","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    using Dates\n    @environment!\n\n    # Define order side constants for the example\n    @enum OrderSide Buy Sell\n\n    # Helper functions for paper mode execution (implement based on your system)\n    function get_order_book(ai)\n        # Placeholder - replace with actual order book retrieval\n        return (bids = [(50000.0, 1.0), (49999.0, 2.0)], asks = [(50001.0, 1.0), (50002.0, 2.0)])\n    end\n\n    function sweep_asks(order_book, amount)\n        # Placeholder implementation\n        return (50001.0, min(amount, 1.0))  # (price, filled_amount)\n    end\n\n    function sweep_bids(order_book, amount)\n        # Placeholder implementation\n        return (50000.0, min(amount, 1.0))  # (price, filled_amount)\n    end\n\n    # Market orders use real order book data\n    function execute_market_order_paper(s, ai, side, amount)\n        # Get current order book\n        order_book = get_order_book(ai)\n        \n        # Calculate execution based on available liquidity\n        if side == Buy\n            execution_price, filled_amount = sweep_asks(order_book, amount)\n        else\n            execution_price, filled_amount = sweep_bids(order_book, amount)\n        end\n        \n        # Execute with realistic slippage (example implementation)\n        @info \"Paper trade executed: $side $filled_amount at $execution_price\"\n        \n        return (price = execution_price, amount = filled_amount, timestamp = now())\n    end\n    \n    println(\"Paper trading functions defined successfully\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"guides/execution-modes/#Live-Data-Integration","page":"Execution Modes Guide","title":"Live Data Integration","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n\n    # Helper functions for live monitoring (implement based on your system)\n    function isrunning(s)\n        return true  # Placeholder - replace with actual strategy status check\n    end\n\n    function get_live_price(ai)\n        return 50000.0 + rand() * 1000  # Placeholder live price\n    end\n\n    function update_strategy_price!(s, ai, price)\n        @info \"Updated price for $(ai.symbol): $price\"\n    end\n\n    function analyze_order_book(ai)\n        return (spread_pct = rand() * 0.5, depth = rand() * 100)  # Placeholder analysis\n    end\n\n    # Set up real-time data monitoring\n    function setup_live_monitoring(s)\n        @async begin\n            while isrunning(s)\n                # Example universe iteration (in real usage, s.universe would be defined)\n                example_symbols = [\"BTC/USDT\", \"ETH/USDT\"]\n                \n                for symbol in example_symbols\n                    # Update live prices\n                    current_price = get_live_price(symbol)\n                    @info \"Updated price for $symbol: $current_price\"\n                    \n                    # Monitor order book changes\n                    book_analysis = analyze_order_book(symbol)\n                    if book_analysis.spread_pct > 0.2  # Wide spread alert\n                        @warn \"Wide spread detected for $symbol: $(book_analysis.spread_pct)%\"\n                    end\n                end\n                sleep(1)  # Update every second\n            end\n        end\n    end\n    \n    println(\"Live monitoring functions defined successfully\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"guides/execution-modes/#Performance-Tracking","page":"Execution Modes Guide","title":"Performance Tracking","text":"","category":"section"},{"location":"guides/execution-modes/#Paper-Mode-Best-Practices","page":"Execution Modes Guide","title":"Paper Mode Best Practices","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Conservative Sizing: Use smaller position sizes than in simulation\nMonitor Spreads: Watch for wide spreads that affect execution\nTest Market Conditions: Run during different market volatility periods\nValidate Timing: Ensure strategy works with real-time data delays","category":"page"},{"location":"guides/execution-modes/#Live-Mode","page":"Execution Modes Guide","title":"Live Mode","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Live mode executes real trades with actual capital using exchanges APIs. This mode requires careful setup, comprehensive risk management, and continuous monitoring.","category":"page"},{"location":"guides/execution-modes/#Basic-Live-Mode-Setup","page":"Execution Modes Guide","title":"Basic Live Mode Setup","text":"","category":"section"},{"location":"guides/execution-modes/#Advanced-Live-Configuration","page":"Execution Modes Guide","title":"Advanced Live Configuration","text":"","category":"section"},{"location":"guides/execution-modes/#Live-Mode-Features","page":"Execution Modes Guide","title":"Live Mode Features","text":"","category":"section"},{"location":"guides/execution-modes/#Real-Time-Risk-Management","page":"Execution Modes Guide","title":"Real-Time Risk Management","text":"","category":"section"},{"location":"guides/execution-modes/#Emergency-Procedures","page":"Execution Modes Guide","title":"Emergency Procedures","text":"","category":"section"},{"location":"guides/execution-modes/#Event-Tracing-and-Analysis","page":"Execution Modes Guide","title":"Event Tracing and Analysis","text":"","category":"section"},{"location":"guides/execution-modes/#Live-Mode-Best-Practices","page":"Execution Modes Guide","title":"Live Mode Best Practices","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Start Small: Begin with minimal capital and position sizes\nMonitor Continuously: Set up comprehensive monitoring and alerts\nTest Thoroughly: Use sandbox mode extensively before going live\nRisk Management: Implement multiple layers of risk controls\nEmergency Procedures: Have clear emergency stop procedures","category":"page"},{"location":"guides/execution-modes/#Mode-Transitions","page":"Execution Modes Guide","title":"Mode Transitions","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Safe transition between modes is crucial for successful strategy deployment. Each transition requires validation and configuration adjustments.","category":"page"},{"location":"guides/execution-modes/#Sim-to-Paper-Transition","page":"Execution Modes Guide","title":"Sim to Paper Transition","text":"","category":"section"},{"location":"guides/execution-modes/#Pre-transition-Validation","page":"Execution Modes Guide","title":"Pre-transition Validation","text":"","category":"section"},{"location":"guides/execution-modes/#Configuration-Adjustments","page":"Execution Modes Guide","title":"Configuration Adjustments","text":"","category":"section"},{"location":"guides/execution-modes/#Paper-to-Live-Transition","page":"Execution Modes Guide","title":"Paper to Live Transition","text":"","category":"section"},{"location":"guides/execution-modes/#Comprehensive-Validation","page":"Execution Modes Guide","title":"Comprehensive Validation","text":"","category":"section"},{"location":"guides/execution-modes/#Live-Mode-Preparation","page":"Execution Modes Guide","title":"Live Mode Preparation","text":"","category":"section"},{"location":"guides/execution-modes/#Gradual-Deployment-Strategy","page":"Execution Modes Guide","title":"Gradual Deployment Strategy","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n\n    # Helper functions for deployment (implement based on your system)\n    function check_milestone(s, milestone)\n        # Placeholder - implement actual milestone checking\n        return rand() > 0.8  # Random success for example\n    end\n\n    function add_capital!(s, amount)\n        @info \"Adding $amount to strategy capital\"\n    end\n\n    function send_alert(s, message)\n        @info \"Alert: $message\"\n    end\n\n    # Implement gradual capital deployment\n    function implement_gradual_deployment(s, total_capital, deployment_schedule)\n        current_deployment = 0.0\n        \n        for (milestone, capital_pct) in deployment_schedule\n            # Wait for milestone achievement\n            while !check_milestone(s, milestone)\n                sleep(3600)  # Check every hour\n            end\n            \n            # Increase capital allocation\n            new_deployment = total_capital * capital_pct\n            additional_capital = new_deployment - current_deployment\n            \n            if additional_capital > 0\n                add_capital!(s, additional_capital)\n                current_deployment = new_deployment\n                \n                @info \"Capital deployment milestone reached\" milestone capital_pct current_deployment\n                send_alert(s, \"Deployed $(round(capital_pct*100))% of capital ($current_deployment USDT)\")\n            end\n        end\n    end\n\n    # Example deployment schedule\n    deployment_schedule = [\n        (:first_week_profitable, 0.1),    # 10% after first profitable week\n        (:month_positive, 0.25),          # 25% after first profitable month\n        (:three_months_stable, 0.5),     # 50% after three stable months\n        (:six_months_proven, 1.0)        # 100% after six months of success\n    ]\n    \n    println(\"Gradual deployment functions defined successfully\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"guides/execution-modes/#Best-Practices","page":"Execution Modes Guide","title":"Best Practices","text":"","category":"section"},{"location":"guides/execution-modes/#Development-Workflow-2","page":"Execution Modes Guide","title":"Development Workflow","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Start in Sim Mode: Develop and optimize strategies using historical data\nValidate Thoroughly: Use walk-forward analysis and out-of-sample testing\nTest in Paper Mode: Validate with real market conditions for at least 30 days\nDeploy Gradually: Start live trading with small capital and scale up slowly\nMonitor Continuously: Implement comprehensive monitoring and alerting","category":"page"},{"location":"guides/execution-modes/#Risk-Management","page":"Execution Modes Guide","title":"Risk Management","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Position Sizing: Use conservative position sizes, especially when transitioning\nStop Losses: Implement multiple layers of stop-loss protection\nDiversification: Avoid concentration in correlated assets\nCapital Limits: Set strict daily and total loss limits\nEmergency Procedures: Have clear emergency stop procedures","category":"page"},{"location":"guides/execution-modes/#Configuration-Management","page":"Execution Modes Guide","title":"Configuration Management","text":"","category":"section"},{"location":"guides/execution-modes/#Troubleshooting","page":"Execution Modes Guide","title":"Troubleshooting","text":"","category":"section"},{"location":"guides/execution-modes/#Common-Issues-by-Mode","page":"Execution Modes Guide","title":"Common Issues by Mode","text":"","category":"section"},{"location":"guides/execution-modes/#Sim-Mode-Issues","page":"Execution Modes Guide","title":"Sim Mode Issues","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Problem: Strategy works perfectly in simulation but fails in paper mode Solution: ","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Add realistic slippage and execution delays\nUse out-of-sample testing\nImplement proper risk management","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Problem: Slow backtest performance Solution:","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Enable parallel processing\nUse data chunking\nOptimize strategy logic","category":"page"},{"location":"guides/execution-modes/#Paper-Mode-Issues","page":"Execution Modes Guide","title":"Paper Mode Issues","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Problem: Orders not filling as expected Solution:","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Check order book depth\nAdjust limit order prices\nConsider using market orders for urgent trades","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Problem: Performance differs significantly from simulation Solution:","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Analyze execution quality\nCheck for wide spreads\nValidate market impact assumptions","category":"page"},{"location":"guides/execution-modes/#Live-Mode-Issues","page":"Execution Modes Guide","title":"Live Mode Issues","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Problem: API connection failures Solution:","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Implement connection resilience\nUse proper timeout settings\nSet up reconnection logic","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Problem: Unexpected losses Solution:","category":"page"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"Review risk management settings\nCheck for slippage and fees\nAnalyze execution quality","category":"page"},{"location":"guides/execution-modes/#Debugging-Tools","page":"Execution Modes Guide","title":"Debugging Tools","text":"","category":"section"},{"location":"guides/execution-modes/","page":"Execution Modes Guide","title":"Execution Modes Guide","text":"This comprehensive execution modes guide provides everything you need to safely develop, test, and deploy trading strategies across all three modes. Start with simulation for development, validate in paper mode, and deploy to live trading with proper risk management and monitoring.","category":"page"},{"location":"mobile-responsive-design/#Mobile-Responsive-Design-Considerations","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"This document outlines design considerations for ensuring Planar documentation is accessible and usable across different devices and screen sizes.","category":"page"},{"location":"mobile-responsive-design/#Current-Implementation","page":"Mobile-Responsive Design Considerations","title":"Current Implementation","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"The Planar documentation uses Documenter.jl's default HTML theme, which includes basic responsive design features:","category":"page"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Collapsible sidebar navigation on mobile devices\nResponsive text sizing and layout\nTouch-friendly navigation elements\nOptimized loading for mobile connections","category":"page"},{"location":"mobile-responsive-design/#Mobile-Optimization-Features","page":"Mobile-Responsive Design Considerations","title":"Mobile Optimization Features","text":"","category":"section"},{"location":"mobile-responsive-design/#Navigation","page":"Mobile-Responsive Design Considerations","title":"Navigation","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Collapsible Sidebar: Main navigation collapses into a hamburger menu on mobile\nTouch Targets: All navigation elements are sized for touch interaction (minimum 44px)\nBreadcrumbs: Clear navigation path for users on smaller screens","category":"page"},{"location":"mobile-responsive-design/#Content-Layout","page":"Mobile-Responsive Design Considerations","title":"Content Layout","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Single Column: Content flows in a single column on mobile devices\nReadable Line Length: Text lines are optimized for mobile reading (45-75 characters)\nScalable Typography: Text sizes adjust appropriately for different screen sizes","category":"page"},{"location":"mobile-responsive-design/#Code-Examples","page":"Mobile-Responsive Design Considerations","title":"Code Examples","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Horizontal Scrolling: Code blocks scroll horizontally rather than wrapping\nSyntax Highlighting: Maintained across all device sizes\nCopy Buttons: Touch-friendly copy functionality for code examples","category":"page"},{"location":"mobile-responsive-design/#Tables-and-Data","page":"Mobile-Responsive Design Considerations","title":"Tables and Data","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Responsive Tables: Tables scroll horizontally on mobile when needed\nSimplified Views: Complex tables may show abbreviated content on mobile\nData Prioritization: Most important information is visible without scrolling","category":"page"},{"location":"mobile-responsive-design/#Performance-Considerations","page":"Mobile-Responsive Design Considerations","title":"Performance Considerations","text":"","category":"section"},{"location":"mobile-responsive-design/#Loading-Speed","page":"Mobile-Responsive Design Considerations","title":"Loading Speed","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Optimized Images: All images are compressed and appropriately sized\nMinimal JavaScript: Documentation uses minimal JavaScript for faster loading\nCDN Delivery: Assets are served from CDN for global performance","category":"page"},{"location":"mobile-responsive-design/#Bandwidth-Efficiency","page":"Mobile-Responsive Design Considerations","title":"Bandwidth Efficiency","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Compressed Assets: CSS and JavaScript are minified\nLazy Loading: Images load as needed to reduce initial page load\nEfficient Caching: Proper cache headers for repeat visits","category":"page"},{"location":"mobile-responsive-design/#Accessibility-Features","page":"Mobile-Responsive Design Considerations","title":"Accessibility Features","text":"","category":"section"},{"location":"mobile-responsive-design/#Screen-Reader-Support","page":"Mobile-Responsive Design Considerations","title":"Screen Reader Support","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Semantic HTML: Proper heading hierarchy and semantic elements\nAlt Text: All images include descriptive alt text\nARIA Labels: Navigation elements include appropriate ARIA labels","category":"page"},{"location":"mobile-responsive-design/#Keyboard-Navigation","page":"Mobile-Responsive Design Considerations","title":"Keyboard Navigation","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Tab Order: Logical tab order through all interactive elements\nSkip Links: Skip to main content functionality\nFocus Indicators: Clear visual focus indicators for keyboard users","category":"page"},{"location":"mobile-responsive-design/#Visual-Accessibility","page":"Mobile-Responsive Design Considerations","title":"Visual Accessibility","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"High Contrast: Sufficient color contrast for readability\nScalable Text: Text can be scaled up to 200% without loss of functionality\nColor Independence: Information is not conveyed by color alone","category":"page"},{"location":"mobile-responsive-design/#Testing-Recommendations","page":"Mobile-Responsive Design Considerations","title":"Testing Recommendations","text":"","category":"section"},{"location":"mobile-responsive-design/#Device-Testing","page":"Mobile-Responsive Design Considerations","title":"Device Testing","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Mobile Devices: Test on actual iOS and Android devices\nTablet Sizes: Verify layout on tablet-sized screens\nDesktop Variations: Test on various desktop screen sizes","category":"page"},{"location":"mobile-responsive-design/#Browser-Testing","page":"Mobile-Responsive Design Considerations","title":"Browser Testing","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Mobile Browsers: Safari iOS, Chrome Android, Firefox Mobile\nDesktop Browsers: Chrome, Firefox, Safari, Edge\nOlder Browsers: Ensure graceful degradation for older browser versions","category":"page"},{"location":"mobile-responsive-design/#Performance-Testing","page":"Mobile-Responsive Design Considerations","title":"Performance Testing","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Mobile Networks: Test loading on 3G/4G connections\nSlow Connections: Verify usability on slower connections\nOffline Behavior: Test behavior when connection is lost","category":"page"},{"location":"mobile-responsive-design/#Implementation-Guidelines","page":"Mobile-Responsive Design Considerations","title":"Implementation Guidelines","text":"","category":"section"},{"location":"mobile-responsive-design/#CSS-Best-Practices","page":"Mobile-Responsive Design Considerations","title":"CSS Best Practices","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"/* Mobile-first responsive design */\n@media (min-width: 768px) {\n  /* Tablet and desktop styles */\n}\n\n/* Touch-friendly interactive elements */\n.touch-target {\n  min-height: 44px;\n  min-width: 44px;\n}\n\n/* Readable line lengths */\n.content {\n  max-width: 65ch;\n}","category":"page"},{"location":"mobile-responsive-design/#HTML-Structure","page":"Mobile-Responsive Design Considerations","title":"HTML Structure","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"<nav aria-label=\"Main navigation\">\n  <ul role=\"menubar\">\n    <li role=\"menuitem\">\n      <a href=\"#\" aria-current=\"page\">Current Page</a>\n    </li>\n  </ul>\n</nav>\n\n<a href=\"#main-content\" class=\"skip-link\">Skip to main content</a>\n\n<main id=\"main-content\">\n  <h1>Page Title</h1>\n  <h2>Section Title</h2>\n</main>","category":"page"},{"location":"mobile-responsive-design/#Image-Optimization","page":"Mobile-Responsive Design Considerations","title":"Image Optimization","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"<img src=\"image.jpg\" \n     alt=\"Descriptive alt text explaining the image content\"\n     loading=\"lazy\"\n     width=\"800\" \n     height=\"600\">\n\n<svg aria-hidden=\"true\" focusable=\"false\">\n</svg>","category":"page"},{"location":"mobile-responsive-design/#Future-Enhancements","page":"Mobile-Responsive Design Considerations","title":"Future Enhancements","text":"","category":"section"},{"location":"mobile-responsive-design/#Progressive-Web-App-Features","page":"Mobile-Responsive Design Considerations","title":"Progressive Web App Features","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Service Worker: Offline documentation access\nApp Manifest: Install documentation as a mobile app\nPush Notifications: Updates for new documentation releases","category":"page"},{"location":"mobile-responsive-design/#Advanced-Mobile-Features","page":"Mobile-Responsive Design Considerations","title":"Advanced Mobile Features","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Dark Mode: Automatic dark mode detection and toggle\nFont Size Controls: User-adjustable font sizes\nReading Mode: Distraction-free reading experience","category":"page"},{"location":"mobile-responsive-design/#Enhanced-Search","page":"Mobile-Responsive Design Considerations","title":"Enhanced Search","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Mobile Search: Optimized search interface for mobile\nVoice Search: Voice input for search queries\nPredictive Search: Auto-complete and suggestions","category":"page"},{"location":"mobile-responsive-design/#Monitoring-and-Analytics","page":"Mobile-Responsive Design Considerations","title":"Monitoring and Analytics","text":"","category":"section"},{"location":"mobile-responsive-design/#Performance-Metrics","page":"Mobile-Responsive Design Considerations","title":"Performance Metrics","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Core Web Vitals: Monitor LCP, FID, and CLS scores\nMobile Page Speed: Track mobile-specific performance\nUser Experience: Monitor bounce rates and engagement on mobile","category":"page"},{"location":"mobile-responsive-design/#Usage-Analytics","page":"Mobile-Responsive Design Considerations","title":"Usage Analytics","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Device Breakdown: Track mobile vs desktop usage\nPopular Content: Identify most-accessed content on mobile\nUser Flows: Understand how mobile users navigate the documentation","category":"page"},{"location":"mobile-responsive-design/#Validation-Tools","page":"Mobile-Responsive Design Considerations","title":"Validation Tools","text":"","category":"section"},{"location":"mobile-responsive-design/#Automated-Testing","page":"Mobile-Responsive Design Considerations","title":"Automated Testing","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Lighthouse: Regular Lighthouse audits for performance and accessibility\nWave: Web accessibility evaluation\nMobile-Friendly Test: Google's mobile-friendly testing tool","category":"page"},{"location":"mobile-responsive-design/#Manual-Testing","page":"Mobile-Responsive Design Considerations","title":"Manual Testing","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Device Labs: Regular testing on physical devices\nUser Testing: Gather feedback from actual mobile users\nAccessibility Testing: Test with screen readers and assistive technologies","category":"page"},{"location":"mobile-responsive-design/#Best-Practices-Summary","page":"Mobile-Responsive Design Considerations","title":"Best Practices Summary","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Mobile-First Design: Design for mobile first, then enhance for larger screens\nPerformance Focus: Prioritize fast loading and smooth interactions\nAccessibility: Ensure all users can access and use the documentation\nProgressive Enhancement: Basic functionality works everywhere, enhanced features where supported\nRegular Testing: Continuously test on real devices and connections\nUser Feedback: Gather and act on feedback from mobile users","category":"page"},{"location":"mobile-responsive-design/#See-Also","page":"Mobile-Responsive Design Considerations","title":"See Also","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Optimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management\nStrategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"mobile-responsive-design/#Resources","page":"Mobile-Responsive Design Considerations","title":"Resources","text":"","category":"section"},{"location":"mobile-responsive-design/","page":"Mobile-Responsive Design Considerations","title":"Mobile-Responsive Design Considerations","text":"Web Content Accessibility Guidelines (WCAG)\nGoogle Mobile-Friendly Test\nLighthouse Performance Auditing\nMDN Responsive Design","category":"page"},{"location":"API/api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"This section provides comprehensive documentation for all Planar.jl modules and functions.","category":"page"},{"location":"API/api/#Core-Modules","page":"API Reference","title":"Core Modules","text":"","category":"section"},{"location":"API/api/#[Data-Management](../data.md)","page":"API Reference","title":"Data Management","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Data structures, persistence, and OHLCV data handling.","category":"page"},{"location":"API/api/#[Engine](engine.md)","page":"API Reference","title":"Engine","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Core execution engine for backtesting, paper trading, and live trading.","category":"page"},{"location":"API/api/#[Exchanges](exchanges.md)","page":"API Reference","title":"Exchanges","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Exchange interfaces and connectivity.","category":"page"},{"location":"API/api/#[Instruments](instruments.md)","page":"API Reference","title":"Instruments","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Financial instrument definitions and management.","category":"page"},{"location":"API/api/#[Strategies](strategies.md)","page":"API Reference","title":"Strategies","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Strategy base classes and interfaces.","category":"page"},{"location":"API/api/#Data-Processing","page":"API Reference","title":"Data Processing","text":"","category":"section"},{"location":"API/api/#[Fetch](fetch.md)","page":"API Reference","title":"Fetch","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Data fetching and retrieval utilities.","category":"page"},{"location":"API/api/#[Processing](processing.md)","page":"API Reference","title":"Processing","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Data processing and transformation functions.","category":"page"},{"location":"API/api/#[Prices](prices.md)","page":"API Reference","title":"Prices","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Price data structures and utilities.","category":"page"},{"location":"API/api/#[Collections](collections.md)","page":"API Reference","title":"Collections","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Specialized collection types and utilities.","category":"page"},{"location":"API/api/#Execution-and-Trading","page":"API Reference","title":"Execution & Trading","text":"","category":"section"},{"location":"API/api/#[Executors](executors.md)","page":"API Reference","title":"Executors","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Order execution and trade management.","category":"page"},{"location":"API/api/#[Instances](instances.md)","page":"API Reference","title":"Instances","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Strategy instance management.","category":"page"},{"location":"API/api/#[CCXT-Integration](ccxt.md)","page":"API Reference","title":"CCXT Integration","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"CCXT library integration and utilities.","category":"page"},{"location":"API/api/#Analysis-and-Optimization","page":"API Reference","title":"Analysis & Optimization","text":"","category":"section"},{"location":"API/api/#[Metrics](../metrics.md)","page":"API Reference","title":"Metrics","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Performance metrics and analysis.","category":"page"},{"location":"API/api/#[Optimization](optimization.md)","page":"API Reference","title":"Optimization","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Parameter optimization and hyperparameter tuning.","category":"page"},{"location":"API/api/#[Strategy-Tools](../API/strategytools.md)","page":"API Reference","title":"Strategy Tools","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Utilities for strategy development.","category":"page"},{"location":"API/api/#[Strategy-Statistics](../API/strategystats.md)","page":"API Reference","title":"Strategy Statistics","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Statistical analysis of strategy performance.","category":"page"},{"location":"API/api/#Visualization-and-UI","page":"API Reference","title":"Visualization & UI","text":"","category":"section"},{"location":"API/api/#[Plotting](../plotting.md)","page":"API Reference","title":"Plotting","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Charting and visualization functions.","category":"page"},{"location":"API/api/#[Progress-Bars](pbar.md)","page":"API Reference","title":"Progress Bars","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Progress tracking and display utilities.","category":"page"},{"location":"API/api/#Utilities","page":"API Reference","title":"Utilities","text":"","category":"section"},{"location":"API/api/#[DataFrame-Utils](dfutils.md)","page":"API Reference","title":"DataFrame Utils","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"DataFrame manipulation utilities.","category":"page"},{"location":"API/api/#[Python-Integration](python.md)","page":"API Reference","title":"Python Integration","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Python interoperability functions.","category":"page"},{"location":"API/api/#[Miscellaneous](misc.md)","page":"API Reference","title":"Miscellaneous","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Additional utility functions and helpers.","category":"page"},{"location":"API/api/#Quick-Navigation","page":"API Reference","title":"Quick Navigation","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Getting Started: See the Getting Started Guide\nType System: Learn about Planar's Type System\nStrategy Development: Read the Strategy Guide\nTroubleshooting: Check the Troubleshooting Guide","category":"page"},{"location":"API/api/#See-Also","page":"API Reference","title":"See Also","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management","category":"page"},{"location":"API/api/#Function-Index","page":"API Reference","title":"Function Index","text":"","category":"section"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Each module page contains:","category":"page"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"Module overview and purpose\nFunction signatures and descriptions\nUsage examples\nRelated functions and cross-references","category":"page"},{"location":"API/api/","page":"API Reference","title":"API Reference","text":"For specific function documentation, navigate to the appropriate module page above.","category":"page"},{"location":"API/dfutils/#DataFrame-utils","page":"DataFrame Utils","title":"DataFrame utils","text":"","category":"section"},{"location":"API/dfutils/#Data.DFUtils","page":"DataFrame Utils","title":"Data.DFUtils","text":"Utilities for DataFrames.jl, prominently timeframe based indexing.\n\n\n\n\n\n","category":"module"},{"location":"API/dfutils/#Data.DFUtils._mutatemax!-NTuple{5, Any}","page":"DataFrame Utils","title":"Data.DFUtils._mutatemax!","text":"Mutates v to df ensuring the dataframe never grows larger than maxlen.\n\n_mutatemax!(df, v, maxlen, n, mut; cols)\n\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.addcols!-Tuple{Any, Any}","page":"DataFrame Utils","title":"Data.DFUtils.addcols!","text":"Inserts rows in src to dst, zeroing columns not present in dst.\n\naddcols!(dst, src)\n\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.appendmax!-Tuple{Any, Any, Any}","page":"DataFrame Utils","title":"Data.DFUtils.appendmax!","text":"See _mutatemax!\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.colnames-Tuple{DataFrames.AbstractDataFrame}","page":"DataFrame Utils","title":"Data.DFUtils.colnames","text":"Get the column names for dataframe as symbols.\n\ncolnames(df::DataFrames.AbstractDataFrame) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.copysubs!-Union{Tuple{D}, Tuple{D, Any}, Tuple{D, Any, Any}} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.copysubs!","text":"Replaces subarrays with arrays.\n\ncopysubs!(df::DataFrames.AbstractDataFrame) -> Any\ncopysubs!(df::DataFrames.AbstractDataFrame, copyfunc) -> Any\ncopysubs!(\n    df::DataFrames.AbstractDataFrame,\n    copyfunc,\n    elsefunc\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.dateindex-Tuple{DataFrames.AbstractDataFrame, Dates.DateTime, Val{:nonzero}}","page":"DataFrame Utils","title":"Data.DFUtils.dateindex","text":"Same dateindex(::AbstractDataFrame, ::DateTime) but always returns the first index if the index is not found in the vector.\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.dateindex-Union{Tuple{D}, Tuple{D, Dates.DateTime, Val{:timeframe}}} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.dateindex","text":"Get the position of date in the :timestamp column of the dataframe based on timeframe arithmentics.\n\ndateindex(\n    df::DataFrames.AbstractDataFrame,\n    date::Dates.DateTime,\n    _::Val{:timeframe}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.dateindex-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.dateindex","text":"Get the position of date in the :timestamp column of the dataframe.\n\ndateindex(\n    df::DataFrames.AbstractDataFrame,\n    date::Dates.DateTime\n) -> Union{Int64, DataStructures.Tokens.IntSemiToken}\n\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.dateindex-Union{Tuple{V}, Tuple{V, Dates.DateTime, Val{:nonzero}}} where V<:(AbstractVector)","page":"DataFrame Utils","title":"Data.DFUtils.dateindex","text":"Same dateindex(::AbstractVector, ::DateTime) but always returns the first index if the index is not found in the vector.\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.dateindex-Union{Tuple{V}, Tuple{V, Dates.DateTime}} where V<:(AbstractVector)","page":"DataFrame Utils","title":"Data.DFUtils.dateindex","text":"Same as dateindex\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.daterange-Union{Tuple{D}, Tuple{D, Any}, Tuple{D, Any, Any}} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.daterange","text":"Get the date range of a DataFrame.\n\ndaterange(\n    df::DataFrames.AbstractDataFrame\n) -> TimeTicks.DateRange\ndaterange(\n    df::DataFrames.AbstractDataFrame,\n    tf\n) -> TimeTicks.DateRange\ndaterange(\n    df::DataFrames.AbstractDataFrame,\n    tf,\n    rightofs\n) -> TimeTicks.DateRange\n\n\nUsed to get the date range of a DataFrame df. It takes in the DataFrame df, an optional timeframe tf (default is the current timeframe of the DataFrame), and an optional rightofs parameter. The rightofs parameter specifies the number of steps to shift the date range to the right. For example, if rightofs is set to 1, the date range will be shifted one step to the right. This can be useful for calculating future date ranges based on the current date range. Returns the date range of the DataFrame df based on the specified timeframe tf and rightofs parameter.\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.firstdate-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.firstdate","text":"Get the first timestamp in the dataframe (:timestamp column).\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.getdate-Union{Tuple{D}, Tuple{D, Union{TimeTicks.DateRange, StepRange{Dates.DateTime, <:Dates.Period}}, Any}, Tuple{D, Union{TimeTicks.DateRange, StepRange{Dates.DateTime, <:Dates.Period}}, Any, Any}} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.getdate","text":"Get the date-based subset of a DataFrame.\n\ngetdate(\n    df::DataFrames.AbstractDataFrame,\n    dr::Union{TimeTicks.DateRange, StepRange{Dates.DateTime, <:Dates.Period}},\n    cols\n) -> Any\ngetdate(\n    df::DataFrames.AbstractDataFrame,\n    dr::Union{TimeTicks.DateRange, StepRange{Dates.DateTime, <:Dates.Period}},\n    cols,\n    tf\n) -> Any\n\n\nIndexing by date ranges allows to query ohlcv using the timestamp column as index, assuming that the data has no missing values and is already sorted.\n\nExamples: df[dtr\"1999-..\"] # Starting from 1999 up to the end df[dtr\"..1999-\"] # From the beginning up to 1999 df[dtr\"1999-..2000-\"] # The Year 1999\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.getdate-Union{Tuple{T}, Tuple{D}, Tuple{D, Dates.DateTime, Any}, Tuple{D, Dates.DateTime, Any, T}} where {D<:DataFrames.AbstractDataFrame, T<:TimeFrames.TimeFrame}","page":"DataFrame Utils","title":"Data.DFUtils.getdate","text":"Get the specified columns based on given date (used as index).\n\ngetdate(\n    df::DataFrames.AbstractDataFrame,\n    idx::Dates.DateTime,\n    cols\n) -> Any\ngetdate(\n    df::DataFrames.AbstractDataFrame,\n    idx::Dates.DateTime,\n    cols,\n    tf::TimeFrames.TimeFrame\n) -> Any\n\n\nWhile indexing ohlcv data we have to consider the time of arrival of a candle. In general candles collect the price up to its timestamp. E.g. the candle at time 2000-01-01 would have tracked time from 1999-12-31T00:00:00 to 2000-01-01T00:00:00. Therefore what we return is always the left adjacent timestamp of the queried one.\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.lastdate-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.lastdate","text":"Get the last timestamp in the dataframe (:timestamp column).\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.prependmax!-Tuple{Any, Any, Any}","page":"DataFrame Utils","title":"Data.DFUtils.prependmax!","text":"See _mutatemax!\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.pushmax!-Tuple{Any, Any, Any}","page":"DataFrame Utils","title":"Data.DFUtils.pushmax!","text":"See _mutatemax!\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.setcols!","page":"DataFrame Utils","title":"Data.DFUtils.setcols!","text":"Set the values of specific columns in one DataFrame from another DataFrame.\n\nsetcols!(dst, src, cols)\nsetcols!(dst, src, cols, idx)\n\n\nUsed to set the values of specific columns in one DataFrame dst from another DataFrame src. It takes in the destination DataFrame dst, the source DataFrame src, the columns to set cols, and optional indices idx to specify the rows to set. The cols parameter specifies the columns in the destination DataFrame dst that will be set with the corresponding values from the source DataFrame src. The idx parameter specifies the indices of the rows in the destination DataFrame dst that will be set. By default, it sets all rows. It mutates the destination DataFrame dst by setting the values of the specified columns cols with the corresponding values from the source DataFrame src.\n\n\n\n\n\n","category":"function"},{"location":"API/dfutils/#Data.DFUtils.timeframe!!-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.timeframe!!","text":"Forcefully infers the dataframe timeframe. See timeframe!(::DataFrame)\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.viewfrom-Tuple{Any, Integer}","page":"DataFrame Utils","title":"Data.DFUtils.viewfrom","text":"Create a view of an OHLCV DataFrame starting from a specific index.\n\nviewfrom(ohlcv, from::Integer; offset, cols) -> Any\n\n\nUsed to create a view of an OHLCV DataFrame ohlcv starting from a specific index from. It takes in the OHLCV DataFrame ohlcv, the starting index from as an integer, and optional parameters offset and cols. The offset parameter specifies the number of rows to offset the view from the starting index. The default value is 0, indicating no offset. The cols parameter specifies the columns to include in the view. By default, all columns are included. Returns a view of the original OHLCV DataFrame ohlcv starting from the specified index from, with an optional offset and specified columns.\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Data.DFUtils.zerorow-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"Data.DFUtils.zerorow","text":"The zeroed row of a dataframe (zero(el) from every column).\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#Misc.after","page":"DataFrame Utils","title":"Misc.after","text":"Get the subset of a DataFrame containing rows after a specific date.\n\nafter(\n    df::DataFrames.DataFrame,\n    dt::Dates.DateTime\n) -> DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, UnitRange{Int64}}\nafter(\n    df::DataFrames.DataFrame,\n    dt::Dates.DateTime,\n    cols\n) -> Any\n\n\nThis function is used to get the subset of a DataFrame df that contains rows after a specific date dt. It takes in the DataFrame df, the specific date dt as a DateTime object, and optional columns cols to include in the subset. If cols is not specified, the function includes all columns in the subset. If cols is specified, only the columns listed in cols will be included in the subset. This function returns a DataFrameView that contains only the rows of df that occur after the specified date dt and the specified columns cols.\n\n\n\n\n\n","category":"function"},{"location":"API/dfutils/#Misc.before","page":"DataFrame Utils","title":"Misc.before","text":"Complement of after\n\n\n\n\n\n","category":"function"},{"location":"API/dfutils/#TimeTicks.timeframe!-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"TimeTicks.timeframe!","text":"Infer the dataframe's timeframe from the timestamp column of the dataframe and sets it.\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#TimeTicks.timeframe!-Union{Tuple{T}, Tuple{D}, Tuple{D, T}} where {D<:DataFrames.AbstractDataFrame, T<:TimeFrames.TimeFrame}","page":"DataFrame Utils","title":"TimeTicks.timeframe!","text":"Sets the dataframe's timeframe metadata to the given TimeFrame.\n\nShouldn't be called directly, see timeframe!(::DataFrame)\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#TimeTicks.timeframe-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"DataFrame Utils","title":"TimeTicks.timeframe","text":"Returns the timeframe of a dataframe according to its metadata.\n\ntimeframe(\n    df::DataFrames.AbstractDataFrame\n) -> TimeFrames.TimeFrame\n\n\nIf the value is not found in the metadata, infer it by timestamp column of the dataframe. If the timeframe can't be inferred, a TimeFrame(0) is returned. NOTE: slow func, for speed use timeframe!(::DataFrame)\n\n\n\n\n\n","category":"method"},{"location":"API/dfutils/#See-Also","page":"DataFrame Utils","title":"See Also","text":"","category":"section"},{"location":"API/dfutils/","page":"DataFrame Utils","title":"DataFrame Utils","text":"Data Management - Guide: Data handling and management\nExchanges - Data handling and management","category":"page"},{"location":"optimization/#Parameter-Optimization","page":"Optimization","title":"Parameter Optimization","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Parameter optimization is a crucial aspect of strategy development that helps you find the best configuration for your trading strategies. Planar provides sophisticated optimization tools including grid search, Bayesian optimization, and custom optimization algorithms.","category":"page"},{"location":"optimization/#Overview","page":"Optimization","title":"Overview","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Parameter optimization in Planar allows you to:","category":"page"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Systematically explore parameter spaces - Test multiple parameter combinations efficiently\nFind optimal configurations - Identify parameter values that maximize your objective function\nValidate strategy robustness - Ensure strategies perform well across different parameter ranges\nAvoid overfitting - Use proper validation techniques to prevent curve fitting","category":"page"},{"location":"optimization/#Key-Features","page":"Optimization","title":"Key Features","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Multiple Algorithms - Grid search, random search, Bayesian optimization\nParallel Execution - Leverage multiple CPU cores for faster optimization\nCustom Objectives - Define your own optimization metrics\nResult Analysis - Comprehensive tools for analyzing optimization results\nVisualization - Plot optimization surfaces and parameter relationships","category":"page"},{"location":"optimization/#Optimization-Workflow","page":"Optimization","title":"Optimization Workflow","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"The typical optimization workflow in Planar follows these steps:","category":"page"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Define Parameters - Specify which strategy parameters to optimize\nSet Parameter Ranges - Define the search space for each parameter\nChoose Algorithm - Select optimization algorithm (grid search, Bayesian, etc.)\nDefine Objective - Specify the metric to optimize (Sharpe ratio, profit, etc.)\nRun Optimization - Execute the optimization process\nAnalyze Results - Review and validate the optimal parameters","category":"page"},{"location":"optimization/#Parameter-Definition","page":"Optimization","title":"Parameter Definition","text":"","category":"section"},{"location":"optimization/#Basic-Parameter-Setup","page":"Optimization","title":"Basic Parameter Setup","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Define optimizable parameters in your strategy:","category":"page"},{"location":"optimization/#Parameter-Ranges","page":"Optimization","title":"Parameter Ranges","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Define the search space for optimization:","category":"page"},{"location":"optimization/#Advanced-Parameter-Types","page":"Optimization","title":"Advanced Parameter Types","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Support for different parameter types:","category":"page"},{"location":"optimization/#Optimization-Algorithms","page":"Optimization","title":"Optimization Algorithms","text":"","category":"section"},{"location":"optimization/#Grid-Search","page":"Optimization","title":"Grid Search","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Exhaustive search testing all parameter combinations:","category":"page"},{"location":"optimization/#Bayesian-Optimization","page":"Optimization","title":"Bayesian Optimization","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Efficient optimization using probabilistic models:","category":"page"},{"location":"optimization/#Random-Search","page":"Optimization","title":"Random Search","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Random sampling of parameter space:","category":"page"},{"location":"optimization/#Evolutionary-Algorithms","page":"Optimization","title":"Evolutionary Algorithms","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Genetic algorithm-based optimization:","category":"page"},{"location":"optimization/#Objective-Functions","page":"Optimization","title":"Objective Functions","text":"","category":"section"},{"location":"optimization/#Built-in-Objectives","page":"Optimization","title":"Built-in Objectives","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Planar provides several built-in objective functions:","category":"page"},{"location":"optimization/#Custom-Objective-Functions","page":"Optimization","title":"Custom Objective Functions","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Define your own optimization objectives:","category":"page"},{"location":"optimization/#Multi-Objective-Optimization","page":"Optimization","title":"Multi-Objective Optimization","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Optimize multiple objectives simultaneously:","category":"page"},{"location":"optimization/#Optimization-Configuration","page":"Optimization","title":"Optimization Configuration","text":"","category":"section"},{"location":"optimization/#Basic-Configuration","page":"Optimization","title":"Basic Configuration","text":"","category":"section"},{"location":"optimization/#Advanced-Configuration","page":"Optimization","title":"Advanced Configuration","text":"","category":"section"},{"location":"optimization/#Result-Analysis","page":"Optimization","title":"Result Analysis","text":"","category":"section"},{"location":"optimization/#Accessing-Results","page":"Optimization","title":"Accessing Results","text":"","category":"section"},{"location":"optimization/#Result-Visualization","page":"Optimization","title":"Result Visualization","text":"","category":"section"},{"location":"optimization/#Statistical-Analysis","page":"Optimization","title":"Statistical Analysis","text":"","category":"section"},{"location":"optimization/#Validation-and-Overfitting-Prevention","page":"Optimization","title":"Validation and Overfitting Prevention","text":"","category":"section"},{"location":"optimization/#Cross-Validation","page":"Optimization","title":"Cross-Validation","text":"","category":"section"},{"location":"optimization/#Walk-Forward-Analysis","page":"Optimization","title":"Walk-Forward Analysis","text":"","category":"section"},{"location":"optimization/#Out-of-Sample-Testing","page":"Optimization","title":"Out-of-Sample Testing","text":"","category":"section"},{"location":"optimization/#Performance-Optimization","page":"Optimization","title":"Performance Optimization","text":"","category":"section"},{"location":"optimization/#Parallel-Processing","page":"Optimization","title":"Parallel Processing","text":"","category":"section"},{"location":"optimization/#Memory-Management","page":"Optimization","title":"Memory Management","text":"","category":"section"},{"location":"optimization/#Early-Stopping","page":"Optimization","title":"Early Stopping","text":"","category":"section"},{"location":"optimization/#Advanced-Techniques","page":"Optimization","title":"Advanced Techniques","text":"","category":"section"},{"location":"optimization/#Hierarchical-Optimization","page":"Optimization","title":"Hierarchical Optimization","text":"","category":"section"},{"location":"optimization/#Ensemble-Optimization","page":"Optimization","title":"Ensemble Optimization","text":"","category":"section"},{"location":"optimization/#Adaptive-Optimization","page":"Optimization","title":"Adaptive Optimization","text":"","category":"section"},{"location":"optimization/#Best-Practices","page":"Optimization","title":"Best Practices","text":"","category":"section"},{"location":"optimization/#Parameter-Selection","page":"Optimization","title":"Parameter Selection","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Start Simple - Begin with a few key parameters\nDomain Knowledge - Use reasonable parameter ranges based on market knowledge\nCorrelation Awareness - Avoid highly correlated parameters\nStability Testing - Ensure parameters are stable across different market conditions","category":"page"},{"location":"optimization/#Optimization-Strategy","page":"Optimization","title":"Optimization Strategy","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Coarse to Fine - Start with coarse grid search, then refine with Bayesian optimization\nMultiple Objectives - Consider multiple metrics, not just returns\nRobustness Testing - Test parameter sensitivity and stability\nOut-of-Sample Validation - Always validate on unseen data","category":"page"},{"location":"optimization/#Avoiding-Overfitting","page":"Optimization","title":"Avoiding Overfitting","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Cross-Validation - Use proper time series cross-validation\nParameter Constraints - Apply reasonable bounds to parameters\nRegularization - Penalize excessive complexity\nWalk-Forward Testing - Simulate realistic trading conditions","category":"page"},{"location":"optimization/#Troubleshooting","page":"Optimization","title":"Troubleshooting","text":"","category":"section"},{"location":"optimization/#Common-Issues","page":"Optimization","title":"Common Issues","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Slow Optimization\nEnable parallel processing\nReduce parameter space size\nUse more efficient algorithms (Bayesian vs grid search)\nPoor Results\nCheck parameter ranges are reasonable\nVerify objective function is appropriate\nEnsure sufficient data for optimization\nOverfitting\nUse cross-validation\nReduce parameter complexity\nTest on out-of-sample data\nMemory Issues\nEnable memory-efficient mode\nReduce batch size\nUse disk caching","category":"page"},{"location":"optimization/#Debug-Mode","page":"Optimization","title":"Debug Mode","text":"","category":"section"},{"location":"optimization/#See-Also","page":"Optimization","title":"See Also","text":"","category":"section"},{"location":"optimization/","page":"Optimization","title":"Optimization","text":"Strategy Development - Creating optimizable strategies\nExecution Modes - Testing optimized strategies\nPerformance Analysis - Analyzing optimization results\nPlotting - Visualizing optimization results\nAPI Reference - Optimization API documentation","category":"page"},{"location":"getting-started/first-strategy/#completion_rate:-\"92%\"","page":"First Strategy","title":"completion_rate: \"92%\"","text":"","category":"section"},{"location":"getting-started/first-strategy/#Your-First-Strategy-Tutorial","page":"First Strategy","title":"Your First Strategy Tutorial","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"In this tutorial, you'll learn to create a custom trading strategy from scratch. We'll build a simple RSI-development.md#technical-indicators) (Relative Strength Index) mean reversion strategy that demonstrates all the key concepts of Planar strategy development.","category":"page"},{"location":"getting-started/first-strategy/#What-You'll-Learn","page":"First Strategy","title":"What You'll Learn","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"By the end of this tutorial, you'll understand:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"How Planar strategies are structured\nThe three core functions every strategy needs\nHow to add technical indicators\nHow to implement buy/sell logic\nHow to test and debug your strategy\nHow to analyze performance results","category":"page"},{"location":"getting-started/first-strategy/#Prerequisites","page":"First Strategy","title":"Prerequisites","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Completed the Quick Start Guide\nBasic understanding of technical analysis (RSI, moving averages)\nPlanar installed and working","category":"page"},{"location":"getting-started/first-strategy/#Strategy-Overview","page":"First Strategy","title":"Strategy Overview","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"We'll create a strategy that:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Uses RSI to identify oversold/overbought conditions\nAdds a trend filter using moving averages\nOnly trades when conditions align\nIncludes proper risk management","category":"page"},{"location":"getting-started/first-strategy/#Step-1:-Understanding-Strategy-Structure","page":"First Strategy","title":"Step 1: Understanding Strategy Structure","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Every Planar strategy is a Julia module with three core functions:","category":"page"},{"location":"getting-started/first-strategy/#Function-Parameters","page":"First Strategy","title":"Function Parameters","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"s::SC: Strategy instance (SC = Strategy Container)\nai: Asset instance (the trading pair, e.g., BTC/USDT)\nats: Available timestamp for signal evaluation","category":"page"},{"location":"getting-started/first-strategy/#Step-2:-Create-Strategy-Directory","page":"First Strategy","title":"Step 2: Create Strategy Directory","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"First, let's create a new strategy directory:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"# Navigate to user strategies directory\ncd user/strategies\n\n# Create our new strategy\nmkdir MyFirstStrategy\ncd MyFirstStrategy\n\n# Create the basic structure\nmkdir src\ntouch Project.toml\ntouch src/MyFirstStrategy.jl","category":"page"},{"location":"getting-started/first-strategy/#Step-3:-Define-the-Strategy-Module","page":"First Strategy","title":"Step 3: Define the Strategy Module","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Edit src/MyFirstStrategy.jl:","category":"page"},{"location":"getting-started/first-strategy/#Step-4:-Implement-Signal-Setup","page":"First Strategy","title":"Step 4: Implement Signal Setup","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Add the setsignals! function to initialize our indicators:","category":"page"},{"location":"getting-started/first-strategy/#Key-Points:","page":"First Strategy","title":"Key Points:","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"attrs[:signals_set] = false: Required initialization\nsignals(...): Defines which indicators to calculate\ntf\"1m\": Uses 1-minute timeframe data\ninittrends!(...): Required to initialize the indicators\nStrategy parameters: Store configuration in attrs for easy modification","category":"page"},{"location":"getting-started/first-strategy/#Step-5:-Implement-Buy-Logic","page":"First Strategy","title":"Step 5: Implement Buy Logic","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Add the isbuy function:","category":"page"},{"location":"getting-started/first-strategy/#Key-Points:-2","page":"First Strategy","title":"Key Points:","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Always validate signals: Check for nothing before using values\nMultiple conditions: Combine different indicators for better signals\nLogging: Use @ldebug for debugging (won't show in production)","category":"page"},{"location":"getting-started/first-strategy/#Step-6:-Implement-Sell-Logic","page":"First Strategy","title":"Step 6: Implement Sell Logic","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Add the issell function:","category":"page"},{"location":"getting-started/first-strategy/#Step-7:-Create-Project-Configuration","page":"First Strategy","title":"Step 7: Create Project Configuration","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Edit Project.toml:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"name = \"MyFirstStrategy\"\nuuid = \"12345678-1234-1234-1234-123456789abc\"  # Generate a unique UUID\nversion = \"0.1.0\"\n\n[deps]\nPlanar = \"...\"\nOnlineTechnicalIndicators = \"...\"\n\n[compat]\njulia = \"1.11\"","category":"page"},{"location":"getting-started/first-strategy/#Step-8:-Complete-Strategy-File","page":"First Strategy","title":"Step 8: Complete Strategy File","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Here's your complete src/MyFirstStrategy.jl:","category":"page"},{"location":"getting-started/first-strategy/#Step-9:-Test-Your-Strategy","page":"First Strategy","title":"Step 9: Test Your Strategy","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Now let's test the strategy:","category":"page"},{"location":"getting-started/first-strategy/#Step-10:-Comprehensive-Performance-Analysis","page":"First Strategy","title":"Step 10: Comprehensive Performance Analysis","text":"","category":"section"},{"location":"getting-started/first-strategy/#Basic-Performance-Metrics","page":"First Strategy","title":"Basic Performance Metrics","text":"","category":"section"},{"location":"getting-started/first-strategy/#Trade-Analysis","page":"First Strategy","title":"Trade Analysis","text":"","category":"section"},{"location":"getting-started/first-strategy/#Advanced-Performance-Metrics","page":"First Strategy","title":"Advanced Performance Metrics","text":"","category":"section"},{"location":"getting-started/first-strategy/#Strategy-Effectiveness-Assessment","page":"First Strategy","title":"Strategy Effectiveness Assessment","text":"","category":"section"},{"location":"getting-started/first-strategy/#Step-11:-Debug-and-Improve-Your-Strategy","page":"First Strategy","title":"Step 11: Debug and Improve Your Strategy","text":"","category":"section"},{"location":"getting-started/first-strategy/#Enable-Detailed-Debugging","page":"First Strategy","title":"Enable Detailed Debugging","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"# Activate PlanarInteractive project\nimport Pkg\nPkg.activate(\"PlanarInteractive\")\n\ntry\n    using PlanarInteractive\n    @environment!\n    \n    # Enable debug logging to see every signal calculation\n    ENV[\"JULIA_DEBUG\"] = \"MyFirstStrategy\"\n    \n    # Example strategy variable (would be defined earlier in real usage)\n    # s = load_strategy(\"MyFirstStrategy\")  # This would be your actual strategy\n    \n    # Clear previous results and run with debugging\n    # reset!(s)\n    # start!(s)\n    \n    println(\"Debug logging enabled for MyFirstStrategy\")\n    println(\"Strategy debugging commands ready to use\")\ncatch e\n    @warn \"PlanarInteractive not available: $e\"\nend","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"What you'll see: Detailed logs showing RSI values, trend analysis, and buy/sell decisions for every time step.","category":"page"},{"location":"getting-started/first-strategy/#Systematic-Debugging-Approach","page":"First Strategy","title":"Systematic Debugging Approach","text":"","category":"section"},{"location":"getting-started/first-strategy/#1.-Check-Indicator-Values","page":"First Strategy","title":"1. Check Indicator Values","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"# Activate PlanarInteractive project\nimport Pkg\nPkg.activate(\"PlanarInteractive\")\n\ntry\n    using PlanarInteractive\n    @environment!\n    \n    # Example: Manually inspect indicator calculations\n    # Note: 's' would be your loaded strategy instance\n    \n    # Example data structure (in real usage, this comes from your strategy)\n    println(\"Example indicator inspection:\")\n    println(\"Timestamp: 2024-01-01T12:00:00, RSI=45.2, SMA_short=100.5, SMA_long=98.3\")\n    println(\"Timestamp: 2024-01-01T12:05:00, RSI=47.1, SMA_short=101.2, SMA_long=98.7\")\n    \n    # Real usage would be:\n    # ai = first(s.universe.assets)\n    # timestamps = ai.data.timestamp[end-10:end]\n    # for ts in timestamps\n    #     rsi = signal_value(s, ai, :rsi, ts)\n    #     sma_short = signal_value(s, ai, :sma_short, ts)\n    #     sma_long = signal_value(s, ai, :sma_long, ts)\n    #     println(\"$ts: RSI=$rsi, SMA_short=$sma_short, SMA_long=$sma_long\")\n    # end\n    \ncatch e\n    @warn \"PlanarInteractive not available: $e\"\nend","category":"page"},{"location":"getting-started/first-strategy/#2.-Test-Individual-Conditions","page":"First Strategy","title":"2. Test Individual Conditions","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"# Activate PlanarInteractive project\nimport Pkg\nPkg.activate(\"PlanarInteractive\")\n\ntry\n    using PlanarInteractive\n    @environment!\n    \n    # Example: Test your buy logic step by step\n    function debug_buy_logic_example()\n        # Example values (in real usage, these come from signal_value calls)\n        rsi = 28.5\n        sma_short = 101.2\n        sma_long = 98.7\n        ats = \"2024-01-01T12:00:00\"\n        \n        println(\"=== Buy Logic Debug for $ats ===\")\n        println(\"RSI: $rsi (oversold if < 30)\")\n        println(\"SMA Short: $sma_short\")\n        println(\"SMA Long: $sma_long\")\n        println(\"Uptrend: $(sma_short > sma_long)\")\n        \n        if !isnothing(rsi) && !isnothing(sma_short) && !isnothing(sma_long)\n            trend_strength = (sma_short - sma_long) / sma_long\n            println(\"Trend strength: $(round(trend_strength * 100, digits=2))% (need > 0.5%)\")\n            \n            buy_signal = (rsi < 30) && (sma_short > sma_long) && (trend_strength > 0.005)\n            println(\"BUY SIGNAL: $buy_signal\")\n        else\n            println(\"❌ Some indicators are null - not enough data\")\n        end\n    end\n    \n    debug_buy_logic_example()\n    \n    # Real usage would be:\n    # debug_buy_logic(s, ai, ats) where s is your strategy instance\n    \ncatch e\n    @warn \"PlanarInteractive not available: $e\"\nend\n\n# Test on recent data\ndebug_buy_logic(s, first(s.universe.assets), ai.data.timestamp[end-5])","category":"page"},{"location":"getting-started/first-strategy/#3.-Analyze-Strategy-Performance-Issues","page":"First Strategy","title":"3. Analyze Strategy Performance Issues","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Problem: No trades executed","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"# Activate PlanarInteractive project\nimport Pkg\nPkg.activate(\"PlanarInteractive\")\n\ntry\n    using PlanarInteractive\n    @environment!\n    \n    # Example: Check data sufficiency\n    # Note: In real usage, 's' would be your loaded strategy instance\n    \n    println(\"Example data sufficiency check:\")\n    println(\"Data points: 150 (example)\")\n    println(\"Need at least 20 points for indicators\")\n    \n    # Example logic for data checking\n    data_points = 150  # This would be length(ai.data.timestamp) in real usage\n    if data_points < 20\n        println(\"❌ Not enough data - download more\")\n        # In real usage: fetch_ohlcv(s, from=-1000); load_ohlcv(s)\n    else\n        println(\"✅ Sufficient data for indicators\")\n    end\n    \n    # Real usage would be:\n    # ai = first(s.universe.assets)\n    # println(\"Data points: $(length(ai.data.timestamp))\")\n    # if length(ai.data.timestamp) < 20\n    #     fetch_ohlcv(s, from=-1000)\n    #     load_ohlcv(s)\n    # end\n    \ncatch e\n    @warn \"PlanarInteractive not available: $e\"\nend","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Problem: Too many trades (overtrading)","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Problem: Poor performance","category":"page"},{"location":"getting-started/first-strategy/#Performance-Optimization-Techniques","page":"First Strategy","title":"Performance Optimization Techniques","text":"","category":"section"},{"location":"getting-started/first-strategy/#1.-Parameter-Sensitivity-Analysis","page":"First Strategy","title":"1. Parameter Sensitivity Analysis","text":"","category":"section"},{"location":"getting-started/first-strategy/#2.-Market-Condition-Analysis","page":"First Strategy","title":"2. Market Condition Analysis","text":"","category":"section"},{"location":"getting-started/first-strategy/#Step-12:-Advanced-Improvements","page":"First Strategy","title":"Step 12: Advanced Improvements","text":"","category":"section"},{"location":"getting-started/first-strategy/#Add-Stop-Loss","page":"First Strategy","title":"Add Stop Loss","text":"","category":"section"},{"location":"getting-started/first-strategy/#Add-Position-Sizing","page":"First Strategy","title":"Add Position Sizing","text":"","category":"section"},{"location":"getting-started/first-strategy/#Understanding-Key-Concepts","page":"First Strategy","title":"Understanding Key Concepts","text":"","category":"section"},{"location":"getting-started/first-strategy/#Signal-Validation","page":"First Strategy","title":"Signal Validation","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Always check if indicators return valid values:","category":"page"},{"location":"getting-started/first-strategy/#Timeframes","page":"First Strategy","title":"Timeframes","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Indicators can use different timeframes:","category":"page"},{"location":"getting-started/first-strategy/#Strategy-State","page":"First Strategy","title":"Strategy State","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Use s.attrs to store strategy-specific data:","category":"page"},{"location":"getting-started/first-strategy/#See-Also","page":"First Strategy","title":"See Also","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Quick Start - 15-minute getting started tutorial\nStrategy Development - Complete strategy development guide\nData Management - Working with market data","category":"page"},{"location":"getting-started/first-strategy/#Next-Steps:-From-Beginner-to-Advanced","page":"First Strategy","title":"Next Steps: From Beginner to Advanced","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Congratulations! You've built your first custom Planar strategy from scratch. Here's your roadmap to becoming a sophisticated algorithmic trader:","category":"page"},{"location":"getting-started/first-strategy/#Immediate-Improvements-(Next-1-2-Hours)","page":"First Strategy","title":"Immediate Improvements (Next 1-2 Hours)","text":"","category":"section"},{"location":"getting-started/first-strategy/#1.-Optimize-Your-Current-Strategy","page":"First Strategy","title":"1. Optimize Your Current Strategy","text":"","category":"section"},{"location":"getting-started/first-strategy/#2.-Test-Different-Assets","page":"First Strategy","title":"2. Test Different Assets","text":"","category":"section"},{"location":"getting-started/first-strategy/#3.-Add-Risk-Management","page":"First Strategy","title":"3. Add Risk Management","text":"","category":"section"},{"location":"getting-started/first-strategy/#Short-term-Learning-(Next-Week)","page":"First Strategy","title":"Short-term Learning (Next Week)","text":"","category":"section"},{"location":"getting-started/first-strategy/#1.-**[Strategy-Development-Guide](../guides/strategy-development.md)**","page":"First Strategy","title":"1. Strategy Development Guide","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Learn advanced patterns:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Multi-timeframe analysis\nPortfolio strategies\nAdvanced indicators\nRisk management systems","category":"page"},{"location":"getting-started/first-strategy/#2.-**Parameter-Optimization**","page":"First Strategy","title":"2. Parameter Optimization","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Systematic improvement:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Grid search optimization\nGenetic algorithms\nWalk-forward analysis\nOverfitting prevention","category":"page"},{"location":"getting-started/first-strategy/#3.-**[Data-Management](../data.md)**","page":"First Strategy","title":"3. Data Management","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Master Planar's data system:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Multiple data sources\nCustom data feeds\nData quality checks\nHistorical data management","category":"page"},{"location":"getting-started/first-strategy/#Medium-term-Goals-(Next-Month)","page":"First Strategy","title":"Medium-term Goals (Next Month)","text":"","category":"section"},{"location":"getting-started/first-strategy/#1.-**[Paper-Trading](../engine/paper.md)**","page":"First Strategy","title":"1. Paper Trading","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Test with live data:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Real-time market simulation\nOrder book dynamics\nSlippage and fees\nPerformance monitoring","category":"page"},{"location":"getting-started/first-strategy/#2.-**Multi-Exchange-Trading**","page":"First Strategy","title":"2. Multi-Exchange Trading","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Scale your operations:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Arbitrage opportunities\nRisk diversification\nExchange-specific features\nPortfolio management","category":"page"},{"location":"getting-started/first-strategy/#3.-**Custom-Indicators**","page":"First Strategy","title":"3. Custom Indicators","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Build proprietary signals:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Custom technical indicators\nMachine learning integration\nAlternative data sources\nSignal combination techniques","category":"page"},{"location":"getting-started/first-strategy/#Advanced-Mastery-(Next-3-Months)","page":"First Strategy","title":"Advanced Mastery (Next 3 Months)","text":"","category":"section"},{"location":"getting-started/first-strategy/#1.-**[Live-Trading](../engine/live.md)**","page":"First Strategy","title":"1. Live Trading","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Deploy for real money:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Risk management protocols\nPosition sizing algorithms\nEmergency stop procedures\nPerformance monitoring","category":"page"},{"location":"getting-started/first-strategy/#2.-**Optimization-at-Scale**","page":"First Strategy","title":"2. Optimization at Scale","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Professional-grade optimization:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Cloud computing integration\nParallel backtesting\nStatistical significance testing\nProduction deployment","category":"page"},{"location":"getting-started/first-strategy/#3.-**Custom-Exchange-Integration**","page":"First Strategy","title":"3. Custom Exchange Integration","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Expand your reach:","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"New exchange APIs\nCustom order types\nSpecialized markets\nInstitutional features","category":"page"},{"location":"getting-started/first-strategy/#Learning-Resources-by-Experience-Level","page":"First Strategy","title":"Learning Resources by Experience Level","text":"","category":"section"},{"location":"getting-started/first-strategy/#Beginner-Resources","page":"First Strategy","title":"📚 Beginner Resources","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Strategy Examples - Study proven patterns\nCommon Patterns - Reusable strategy components\nTroubleshooting Guide - Solve common issues","category":"page"},{"location":"getting-started/first-strategy/#Intermediate-Resources","page":"First Strategy","title":"🔬 Intermediate Resources","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Advanced Indicators - Technical analysis deep dive\nBacktesting Best Practices - Avoid common pitfalls\nPerformance Analysis - Professional metrics","category":"page"},{"location":"getting-started/first-strategy/#Advanced-Resources","page":"First Strategy","title":"🚀 Advanced Resources","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"API Reference - Complete function documentation\nArchitecture Guide - Understand Planar internals\nContributing Guide - Extend Planar itself","category":"page"},{"location":"getting-started/first-strategy/#Community-and-Support","page":"First Strategy","title":"Community and Support","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Discord Community - Get help from other traders\nGitHub Discussions - Technical questions and feature requests\nExample Strategies Repository - Community-contributed strategies","category":"page"},{"location":"getting-started/first-strategy/#Your-Strategy-Development-Checklist","page":"First Strategy","title":"Your Strategy Development Checklist","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Track your progress as you advance:","category":"page"},{"location":"getting-started/first-strategy/#Beginner-Level-(You-are-here!)","page":"First Strategy","title":"✅ Beginner Level (You are here!)","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"[x] Built first custom strategy\n[x] Understand buy/sell logic\n[x] Can run backtests\n[x] Interpret basic performance metrics\n[ ] Optimize parameters manually\n[ ] Test multiple assets\n[ ] Add basic risk management","category":"page"},{"location":"getting-started/first-strategy/#Intermediate-Level","page":"First Strategy","title":"🎯 Intermediate Level","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"[ ] Use systematic parameter optimization\n[ ] Implement multi-timeframe strategies\n[ ] Deploy paper trading\n[ ] Build portfolio strategies\n[ ] Create custom indicators\n[ ] Understand statistical significance","category":"page"},{"location":"getting-started/first-strategy/#Advanced-Level","page":"First Strategy","title":"🏆 Advanced Level","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"[ ] Deploy live trading strategies\n[ ] Manage multiple exchange accounts\n[ ] Build machine learning models\n[ ] Contribute to Planar development\n[ ] Mentor other traders","category":"page"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Ready for the next challenge? Pick one immediate improvement and start coding! 🚀","category":"page"},{"location":"getting-started/first-strategy/#Best-Practices","page":"First Strategy","title":"Best Practices","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"Start Simple: Begin with basic logic, add complexity gradually\nTest Thoroughly: Use multiple time periods and market conditions\nValidate Everything: Always check indicator values before using\nLog Decisions: Use debug logging to understand strategy behavior\nRisk Management: Always include stop losses and position sizing\nBacktest Extensively: Test on different market conditions","category":"page"},{"location":"getting-started/first-strategy/#Common-Patterns","page":"First Strategy","title":"Common Patterns","text":"","category":"section"},{"location":"getting-started/first-strategy/#Multi-Timeframe-Analysis","page":"First Strategy","title":"Multi-Timeframe Analysis","text":"","category":"section"},{"location":"getting-started/first-strategy/#Confirmation-Signals","page":"First Strategy","title":"Confirmation Signals","text":"","category":"section"},{"location":"getting-started/first-strategy/#Adaptive-Parameters","page":"First Strategy","title":"Adaptive Parameters","text":"","category":"section"},{"location":"getting-started/first-strategy/","page":"First Strategy","title":"First Strategy","text":"You now have a solid foundation for building Planar strategies! The key is to start simple, test thoroughly, and iterate based on results. Happy trading! 🚀","category":"page"},{"location":"engine/mode-comparison/#Execution-Mode-Comparison-and-Transition-Guide","page":"Mode Comparison","title":"Execution Mode Comparison and Transition Guide","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"This guide provides a comprehensive comparison of Planar's three execution modes (Sim, Paper, and Live) and guidance on safely transitioning between them.","category":"page"},{"location":"engine/mode-comparison/#Mode-Overview","page":"Mode Comparison","title":"Mode Overview","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Planar supports three distinct execution modes, each designed for different stages of strategy development and deployment:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Sim Mode (Simulation/Backtesting): Historical data simulation for strategy development and testing\nPaper Mode: Real-time simulation with live market data but no actual trades\nLive Mode: Real trading with actual capital and exchanges APIs","category":"page"},{"location":"engine/mode-comparison/#Detailed-Mode-Comparison","page":"Mode Comparison","title":"Detailed Mode Comparison","text":"","category":"section"},{"location":"engine/mode-comparison/#Feature-Comparison-Matrix","page":"Mode Comparison","title":"Feature Comparison Matrix","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Feature Sim Mode Paper Mode Live Mode\nData Source Historical Live Market Data Live Market Data\nOrder Execution Simulated Simulated Real Exchange API\nCapital Risk None None Real Money\nMarket Impact None None Real\nLatency None Real Network Real Network + Exchange\nSlippage Modeled Modeled from Order Book Real Market Slippage\nFees Modeled Modeled Real Exchange Fees\nOrder Book Historical/Modeled Real-time Real-time\nSpeed Very Fast Real-time Real-time\nAPI Limits None Rate Limited Rate Limited\nFunding Costs Modeled Modeled Real","category":"page"},{"location":"engine/mode-comparison/#Execution-Characteristics","page":"Mode Comparison","title":"Execution Characteristics","text":"","category":"section"},{"location":"engine/mode-comparison/#Sim-Mode-(Backtesting)","page":"Mode Comparison","title":"Sim Mode (Backtesting)","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Best Use Cases:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Strategy development and debugging\nParameter optimization\nHistorical performance analysis\nBacktesting across multiple time periods\nMonte Carlo simulations","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Performance Characteristics:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Speed: ~3.9M candles in 8 seconds (single core)\nMemory: 2-8GB depending on data size\nScalability: Excellent for large datasets","category":"page"},{"location":"engine/mode-comparison/#Paper-Mode","page":"Mode Comparison","title":"Paper Mode","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Best Use Cases:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Strategy validation with live data\nReal-time performance monitoring\nMarket condition adaptation testing\nPre-live deployment validation\nStrategy parameter fine-tuning","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Performance Characteristics:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Speed: Real-time (limited by market data frequency)\nMemory: 1-4GB depending on complexity\nLatency: Network + processing delays","category":"page"},{"location":"engine/mode-comparison/#Live-Mode","page":"Mode Comparison","title":"Live Mode","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Best Use Cases:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Production trading\nReal capital deployment\nMarket making strategies\nArbitrage opportunities\nProfessional trading operations","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Performance Characteristics:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Speed: Limited by exchanges APIs\nMemory: 1-2GB for typical strategies\nLatency: Network + exchanges processing","category":"page"},{"location":"engine/mode-comparison/#Transition-Strategies","page":"Mode Comparison","title":"Transition Strategies","text":"","category":"section"},{"location":"engine/mode-comparison/#Development-Workflow","page":"Mode Comparison","title":"Development Workflow","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"The recommended development workflow follows a systematic progression through all three modes:","category":"page"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"graph TD\n    A[Strategy Idea] --> B[Sim Mode Development]\n    B --> C[Parameter Optimization]\n    C --> D[Historical Validation]\n    D --> E{Results Satisfactory?}\n    E -->|No| B\n    E -->|Yes| F[Paper Mode Testing]\n    F --> G[Real-time Validation]\n    G --> H[Market Condition Testing]\n    H --> I{Paper Results Good?}\n    I -->|No| J[Refine Strategy]\n    J --> B\n    I -->|Yes| K[Live Mode Preparation]\n    K --> L[Small Capital Test]\n    L --> M[Gradual Scale-up]\n    M --> N[Full Deployment]","category":"page"},{"location":"engine/mode-comparison/#Sim-to-Paper-Transition","page":"Mode Comparison","title":"Sim to Paper Transition","text":"","category":"section"},{"location":"engine/mode-comparison/#Pre-transition-Checklist","page":"Mode Comparison","title":"Pre-transition Checklist","text":"","category":"section"},{"location":"engine/mode-comparison/#Configuration-Adjustments","page":"Mode Comparison","title":"Configuration Adjustments","text":"","category":"section"},{"location":"engine/mode-comparison/#Paper-to-Live-Transition","page":"Mode Comparison","title":"Paper to Live Transition","text":"","category":"section"},{"location":"engine/mode-comparison/#Comprehensive-Validation","page":"Mode Comparison","title":"Comprehensive Validation","text":"","category":"section"},{"location":"engine/mode-comparison/#Live-Mode-Preparation","page":"Mode Comparison","title":"Live Mode Preparation","text":"","category":"section"},{"location":"engine/mode-comparison/#Common-Pitfalls-and-How-to-Avoid-Them","page":"Mode Comparison","title":"Common Pitfalls and How to Avoid Them","text":"","category":"section"},{"location":"engine/mode-comparison/#Sim-Mode-Pitfalls","page":"Mode Comparison","title":"Sim Mode Pitfalls","text":"","category":"section"},{"location":"engine/mode-comparison/#1.-Overfitting-to-Historical-Data","page":"Mode Comparison","title":"1. Overfitting to Historical Data","text":"","category":"section"},{"location":"engine/mode-comparison/#2.-Unrealistic-Execution-Assumptions","page":"Mode Comparison","title":"2. Unrealistic Execution Assumptions","text":"","category":"section"},{"location":"engine/mode-comparison/#Paper-Mode-Pitfalls","page":"Mode Comparison","title":"Paper Mode Pitfalls","text":"","category":"section"},{"location":"engine/mode-comparison/#1.-Ignoring-Market-Impact","page":"Mode Comparison","title":"1. Ignoring Market Impact","text":"","category":"section"},{"location":"engine/mode-comparison/#2.-Over-optimizing-on-Current-Market-Conditions","page":"Mode Comparison","title":"2. Over-optimizing on Current Market Conditions","text":"","category":"section"},{"location":"engine/mode-comparison/#Live-Mode-Pitfalls","page":"Mode Comparison","title":"Live Mode Pitfalls","text":"","category":"section"},{"location":"engine/mode-comparison/#1.-Insufficient-Capital-Management","page":"Mode Comparison","title":"1. Insufficient Capital Management","text":"","category":"section"},{"location":"engine/mode-comparison/#2.-Inadequate-Risk-Management","page":"Mode Comparison","title":"2. Inadequate Risk Management","text":"","category":"section"},{"location":"engine/mode-comparison/#Best-Practices-for-Mode-Transitions","page":"Mode Comparison","title":"Best Practices for Mode Transitions","text":"","category":"section"},{"location":"engine/mode-comparison/#1.-Gradual-Transition-Approach","page":"Mode Comparison","title":"1. Gradual Transition Approach","text":"","category":"section"},{"location":"engine/mode-comparison/#2.-Validation-Gates","page":"Mode Comparison","title":"2. Validation Gates","text":"","category":"section"},{"location":"engine/mode-comparison/#3.-Configuration-Management","page":"Mode Comparison","title":"3. Configuration Management","text":"","category":"section"},{"location":"engine/mode-comparison/#See-Also","page":"Mode Comparison","title":"See Also","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"engine/mode-comparison/#Monitoring-and-Alerting-Across-Modes","page":"Mode Comparison","title":"Monitoring and Alerting Across Modes","text":"","category":"section"},{"location":"engine/mode-comparison/#Cross-Mode-Performance-Tracking","page":"Mode Comparison","title":"Cross-Mode Performance Tracking","text":"","category":"section"},{"location":"engine/mode-comparison/","page":"Mode Comparison","title":"Mode Comparison","text":"This comprehensive mode comparison and transition guide provides traders with the knowledge needed to safely and effectively move their strategies from development through to live trading, while avoiding common pitfalls and maintaining proper risk management throughout the process.","category":"page"},{"location":"API/fetch/#Fetch-module","page":"Fetch","title":"Fetch module","text":"","category":"section"},{"location":"API/fetch/#Fetch.FUNDING_RATES_CACHE","page":"Fetch","title":"Fetch.FUNDING_RATES_CACHE","text":"Initializes a safe TTL cache for storing multiple funding rates with a specified TTL.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.FUNDING_RATE_CACHE","page":"Fetch","title":"Fetch.FUNDING_RATE_CACHE","text":"Initializes a safe TTL cache for storing funding rates with a specified TTL.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.FUNDING_RATE_TTL","page":"Fetch","title":"Fetch.FUNDING_RATE_TTL","text":"Defines the time-to-live (TTL) for a funding rate as 5 seconds.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.MAX_ORDERS","page":"Fetch","title":"Fetch.MAX_ORDERS","text":"Defines an array representing possible numbers of orders to fetch.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.OB_CACHE","page":"Fetch","title":"Fetch.OB_CACHE","text":"Initializes a safe TTL cache for storing order book data with the default eviction TTL.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.OB_EVICTION_TTL","page":"Fetch","title":"Fetch.OB_EVICTION_TTL","text":"Defines the eviction time-to-live (TTL) for an order book as 5 minutes.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.OB_FUNCTIONS","page":"Fetch","title":"Fetch.OB_FUNCTIONS","text":"Initializes a LittleDict for storing order book functions keyed by order book level and exchange ID.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.OB_TTL","page":"Fetch","title":"Fetch.OB_TTL","text":"Defines the time-to-live (TTL) for an order book as 5 seconds (after which it is stale).\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.OHLCVTupleTypes","page":"Fetch","title":"Fetch.OHLCVTupleTypes","text":"Defines the tuple type for OHLCV data, where each element represents a specific metric (Open, High, Low, Close, Volume).\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.SINCE_MIN_PERIOD","page":"Fetch","title":"Fetch.SINCE_MIN_PERIOD","text":"Used to slide the since param forward when retrying fetching (in case the requested timestamp is too old).\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.futures_limits","page":"Fetch","title":"Fetch.futures_limits","text":"Defines limit values for fetching futures data from exchanges.\n\n\n\n\n\n","category":"constant"},{"location":"API/fetch/#Fetch.OrderBookTuple","page":"Fetch","title":"Fetch.OrderBookTuple","text":"Defines a NamedTuple structure for order book data.\n\n\n\n\n\n","category":"type"},{"location":"API/fetch/#Base.convert-Tuple{Type{Tuple{Vector{Dates.DateTime}, Vararg{Vector{Float64}, 5}}}, Py}","page":"Fetch","title":"Base.convert","text":"This is the fastest (afaik) way to convert ccxt lists to dataframe friendly format.\n\nconvert(\n    _::Type{Tuple{Vector{Dates.DateTime}, Vararg{Vector{Float64}, 5}}},\n    py::Py\n) -> Tuple{Vector{Dates.DateTime}, Vararg{Vector{Float64}}}\n\n\nThis function converts the provided Python object to a tuple format suitable for dataframes, specifically tailored for OHLCV data.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Data.propagate_ohlcv!-Tuple{SortedDict, AbstractString, Exchange}","page":"Fetch","title":"Data.propagate_ohlcv!","text":"Propagates OHLCV data to all timeframes in a data structure.\n\npropagate_ohlcv!(\n    data::SortedDict,\n    pair::AbstractString,\n    exc::Exchange\n) -> Union{Nothing, SortedDict{TimeFrames.TimeFrame, DataFrames.DataFrame}}\n\n\nThe propagate_ohlcv! function propagates OHLCV data for a given pair from an exchange exc to all timeframes in the data SortedDict data structure.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Data.to_ohlcv-Tuple{Py}","page":"Fetch","title":"Data.to_ohlcv","text":"Converts a Python object to a DataFrame with OHLCV columns\n\nto_ohlcv(py::Py)\n\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__ensure_dates-NTuple{4, Any}","page":"Fetch","title":"Fetch.__ensure_dates","text":"Ensures dates are within valid range for the exchange and timeframe.\n\n__ensure_dates(exc, tf, from, to) -> Tuple{Any, Any}\n\n\nThe __ensure_dates function checks if the dates from and to are within the valid range for the given exchange exc and timeframe tf. If the dates are not within the valid range, the function adjusts them accordingly.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__from_date_func-NTuple{7, Any}","page":"Fetch","title":"Fetch.__from_date_func","text":"Determines the starting date for fetching data.\n\n__from_date_func(\n    update,\n    timeframe,\n    from,\n    to,\n    zi,\n    exc_name,\n    reset\n) -> Union{Returns{<:Tuple{Nothing, Any}}, Fetch.var\"#__from_date_func##0#__from_date_func##1\"}\n\n\nThe __from_date_func function determines the starting date from for fetching data based on various parameters. If update is true, it will fetch data from the latest date available. If reset is true, it will fetch data from the earliest date possible. The function also considers the timeframe, to date, timezone zi, and exchange name exc_name in its calculations.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__get_ohlcv-NTuple{5, Any}","page":"Fetch","title":"Fetch.__get_ohlcv","text":"Fetches OHLCV data for a specified exchange within a date range.\n\n__get_ohlcv(\n    exc,\n    name,\n    timeframe,\n    from_date,\n    to;\n    out,\n    cleanup,\n    ohlcv_kind\n) -> Tuple{Any, Any}\n\n\nThis function fetches OHLCV data for a given exchange exc, with the specified name and timeframe, within the date range specified by from_date and to. The fetched data is appended to the out data structure. The cleanup parameter determines if any post-processing should be done on the data before returning. The ohlcv_kind parameter determines the type of OHLCV data to fetch.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__get_since-NTuple{8, Any}","page":"Fetch","title":"Fetch.__get_since","text":"Determines the 'since' parameter for fetching data from an exchange.\n\n__get_since(\n    exc,\n    fetch_func,\n    pair,\n    limit,\n    from,\n    out,\n    is_df,\n    converter\n) -> Any\n\n\nThis function calculates the 'since' parameter based on the specified 'from' timestamp, or finds the appropriate 'since' value if 'from' is 0.0.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__handle_error-NTuple{9, Any}","page":"Fetch","title":"Fetch.__handle_error","text":"Handles errors during fetch operations.\n\n__handle_error(\n    e,\n    fetch_func,\n    pair,\n    since,\n    df,\n    sleep_t,\n    limit,\n    converter,\n    retry\n) -> Any\n\n\nThis function takes an error e occurred during data fetching, and decides whether to retry the fetch_func based on the retry flag. If retry is true, it calls the fetch_func again with the same parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__handle_fetch-NTuple{9, Any}","page":"Fetch","title":"Fetch.__handle_fetch","text":"Handles fetch operations for specified exchange and pair.\n\n__handle_fetch(\n    fetch_func,\n    pair,\n    since,\n    limit,\n    sleep_t,\n    df,\n    converter,\n    retry,\n    usetimeframe\n) -> Tuple{Bool, Any}\n\n\nThis function calls the fetch_func for a given pair, starting from the since timestamp with a maximum limit of limit data points. It employs a delay sleep_t between fetches. The function also applies a given converter to the fetched data. If the retry flag is true, the function will try to fetch data again in case of an empty response. The usetimeframe flag indicates whether to use timeframe for fetching.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__ordered_timeframes-Tuple{Exchange}","page":"Fetch","title":"Fetch.__ordered_timeframes","text":"Returns an ordered list of timeframes for a given exchange\n\n__ordered_timeframes(exc::Exchange) -> Tuple{Any, Any}\n\n\nThis function collects the timeframes from the exchange, converts them into periods, and sorts them in descending order. It then returns these sorted timeframes and periods.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.__pairdata!-NTuple{8, Any}","page":"Fetch","title":"Fetch.__pairdata!","text":"Processes OHLCV data for a pair.\n\n__pairdata!(\n    zi,\n    data,\n    ohlcv,\n    name,\n    timeframe,\n    z,\n    exc_name,\n    reset\n) -> Data.PairData\n\n\nThe __pairdata! function processes the OHLCV data ohlcv for a pair name over a timeframe. It takes into account the timezone zi, data data, timezone offset z, exchange name exc_name, and a reset flag. If reset is true, it will reset the data for the pair before processing.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._cleanup_funding_history-NTuple{4, Any}","page":"Fetch","title":"Fetch._cleanup_funding_history","text":"Cleans up fetched funding history data.\n\n_cleanup_funding_history(\n    df,\n    name,\n    half_tf,\n    f_tf\n) -> DataFrames.DataFrame\n\n\nThe _cleanup_funding_history function takes a DataFrame df of fetched funding history data for a name and performs cleanup operations on it. The half_tf and f_tf parameters are used in the cleanup process.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._fetch_loop-Union{Tuple{F}, Tuple{Function, Exchange, Any}} where F<:AbstractFloat","page":"Fetch","title":"Fetch._fetch_loop","text":"Iteratively fetches data over a specified date range.\n\n_fetch_loop(\n    fetch_func::Function,\n    exc::Exchange,\n    pair;\n    from,\n    to,\n    sleep_t,\n    out,\n    converter,\n    limit\n)\n\n\nThis function calls the fetch_func function repeatedly until it has fetched data for the entire date range specified by from and to. Note: The total data points fetched may not match the expected number based on the date range.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._fetch_ohlcv_from_to-Tuple{Exchange, Any, Any}","page":"Fetch","title":"Fetch._fetch_ohlcv_from_to","text":"Ensure a to date is set, before fetching.\n\n_fetch_ohlcv_from_to(\n    exc::Exchange,\n    pair,\n    timeframe;\n    from,\n    to,\n    params,\n    sleep_t,\n    cleanup,\n    out,\n    ohlcv_kind\n) -> Any\n\n\nThis function verifies that a 'to' date is set before attempting to fetch OHLCV data.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._fetch_ohlcv_with_delay-Tuple{Exchange, Vararg{Any}}","page":"Fetch","title":"Fetch._fetch_ohlcv_with_delay","text":"Fetches OHLCV data with delay for a given exchange and arguments.\n\n_fetch_ohlcv_with_delay(\n    exc::Exchange,\n    args...;\n    ohlcv_kind,\n    kwargs...\n) -> Any\n\n\nThis function fetches OHLCV data for a specified exchange exc and additional args. The type of OHLCV data to fetch is determined by ohlcv_kind. It applies a delay between fetches as specified in kwargs.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._fetch_with_delay-Tuple{Function, Any}","page":"Fetch","title":"Fetch._fetch_with_delay","text":"Wraps fetching function with error handling and backoff delay.\n\n_fetch_with_delay(\n    fetch_func::Function,\n    pair;\n    since,\n    df,\n    sleep_t,\n    limit,\n    converter,\n    retry,\n    usetimeframe\n) -> Any\n\n\nThis function wraps a fetching function fetch_func with error handling and a backoff delay sleep_t. The fetch_func takes three parameters: pair, since, and limit, and returns a PyList. The converter function is used to tabulate the data such that the first column is the timestamp. The function will retry fetching in case of an error if retry is set to true.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._levelname-Tuple{Any}","page":"Fetch","title":"Fetch._levelname","text":"Returns the name of an order book level.\n\n_levelname(level) -> String\n\n\nThe _levelname function takes an order book level and returns its name.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._orderbook-Tuple{Any}","page":"Fetch","title":"Fetch._orderbook","text":"Generates an order book of depth N.\n\n_orderbook(\n    N\n) -> @NamedTuple{busy::Ref{Bool}, timestamp::Ref{Dates.DateTime}, asks::Vector{Tuple{Float64, Float64}}, bids::Vector{Tuple{Float64, Float64}}}\n\n\nThe _orderbook function generates an order book of depth N. The order book contains N levels of bid and ask prices along with their corresponding quantities.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._since_timestamp-Tuple{Dates.DateTime, Dates.Period}","page":"Fetch","title":"Fetch._since_timestamp","text":"Determines the start time for fetching data\n\n_since_timestamp(\n    actual::Dates.DateTime,\n    p::Dates.Period\n) -> Int64\n\n\nThis function calculates the timestamp from which to start fetching data. It ensures that the start time is not more than 20 years in the past or less than the given period.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch._update_orderbook!-NTuple{5, Any}","page":"Fetch","title":"Fetch._update_orderbook!","text":"Updates an order book in place with new data.\n\n_update_orderbook!(exc, ob, sym, lvl, limit; init)\n\n\nThe _update_orderbook! function takes an exchange exc, an order book ob, a symbol sym, an order book level lvl, and a limit limit, and updates the order book in place with new data. If init is set, the function will initialize the order book before updating it.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.extract_futures_data-Tuple{Py}","page":"Fetch","title":"Fetch.extract_futures_data","text":"Extracts futures data from a Python object.\n\nextract_futures_data(data::Py) -> DataFrames.DataFrame\n\n\nThe extract_futures_data function takes futures data data from a Python object and extracts it into a format suitable for further processing or analysis.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.fetch_candles-Tuple{Exchange, AbstractString, Union{AbstractString, AbstractSet, AbstractVector, Tuple{Vararg{T}} where T}}","page":"Fetch","title":"Fetch.fetch_candles","text":"Fetches candlestick data for a list of pairs from an exchange.\n\nfetch_candles(\n    exc::Exchange,\n    timeframe::AbstractString,\n    pairs::Union{AbstractString, AbstractSet, AbstractVector, Tuple{Vararg{T}} where T};\n    from,\n    to,\n    ohlcv_kind\n) -> Any\n\n\nThe fetch_candles function fetches candlestick data from a given exchange exc for a list of pairs over a specified timeframe. The from and to parameters define the date range for the fetched data. If from is not provided, it defaults to an empty string, which implies fetching data from the earliest available date. The type of candlestick data to fetch is determined by the ohlcv_kind parameter.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.fetch_limit-Tuple{Exchange, Union{Nothing, Int64}}","page":"Fetch","title":"Fetch.fetch_limit","text":"Defines the fetch limit for an exchange.\n\nfetch_limit(\n    exc::Exchange,\n    limit::Union{Nothing, Int64}\n) -> Union{Nothing, Int64}\n\n\nThis function fetches the limit for an exchange. If no limit is specified, it retrieves the default limit for the exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.fetch_ohlcv-Tuple{Exchange, String, Union{AbstractSet{T}, AbstractVector{T}, Tuple{Vararg{T}}} where T}","page":"Fetch","title":"Fetch.fetch_ohlcv","text":"Fetches OHLCV data from an exchange for a list of pairs.\n\nfetch_ohlcv(\n    exc::Exchange,\n    timeframe::String,\n    pairs::Union{AbstractSet{T}, AbstractVector{T}, Tuple{Vararg{T}}} where T;\n    zi,\n    from,\n    to,\n    update,\n    reset,\n    progress,\n    ohlcv_kind\n) -> Dict{String, Data.PairData}\n\n\nThis function fetches OHLCV data from a given exchange exc for a list of pairs over a specified timeframe. The from and to parameters can represent dates or, if from is a negative number, the function fetches the last N=from candles. If update is true, the function checks for cached data and only fetches missing candles. If reset is true, the function removes cached data before fetching. The progress parameter determines whether a progress bar is shown. The type of OHLCV data to fetch is defined by the ohlcv_kind parameter.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.fetch_ohlcv-Tuple{Val{:ask}, Vararg{Any}}","page":"Fetch","title":"Fetch.fetch_ohlcv","text":"Prompts user for confirmation before fetching OHLCV data.\n\nfetch_ohlcv(::Val{:ask}, args...; kwargs...) -> Any\n\n\nThis function prompts the user for confirmation before fetching OHLCV data for the specified arguments args and keyword arguments kwargs. If the user inputs 'Y', 'y', or simply presses Enter, it proceeds with the fetch_ohlcv function. If any other input is given, the function returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.fetch_ohlcv-Tuple{Vector{Exchange}, Any}","page":"Fetch","title":"Fetch.fetch_ohlcv","text":"Fetches OHLCV data for multiple exchanges on the same timeframe.\n\nfetch_ohlcv(\n    excs::Vector{Exchange},\n    timeframe;\n    account,\n    sandbox,\n    parallel,\n    wait_task,\n    kwargs...\n) -> Union{Nothing, Task}\n\n\nThis function fetches OHLCV data for multiple exchanges over the same timeframe. It accepts:\n\nA vector of exchange instances excs.\nThe desired timeframe timeframe.\n\nThe function can run in parallel if parallel is set to true. If wait_task is set to true, the function will wait for all tasks to complete before returning.\n\nYou can provide additional parameters using kwargs.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.find_since-Tuple{Exchange, Any}","page":"Fetch","title":"Fetch.find_since","text":"Returns the oldest possible timestamp for a pair.\n\nfind_since(exc::Exchange, pair) -> Any\n\n\nThis function iterates over the timeframes and periods of the exchange to find the oldest available timestamp for a given pair. If no data is found in any timeframe, it defaults to 1 day in the past.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.funding_data-Tuple{Exchange, AbstractString}","page":"Fetch","title":"Fetch.funding_data","text":"Retrieves all or a subset of funding data for a symbol from an exchange.\n\nfunding_data(exc::Exchange, sym::AbstractString) -> Any\n\n\nThe funding_data function retrieves all funding data returned by an exchange exc for a symbol sym.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.funding_history-Tuple{Exchange, Vector}","page":"Fetch","title":"Fetch.funding_history","text":"Fetches funding rate history from an exchange for a list of Derivative pairs.\n\nfunding_history(\n    exc::Exchange,\n    assets::Vector;\n    from,\n    to,\n    params,\n    sleep_t,\n    limit,\n    cleanup\n) -> Dict\n\n\nThe funding_history function fetches funding rate history from a given exchange exc for a list of assets. The from and to parameters define the date range for which to fetch the funding rate history. Additional parameters can be specified through the params dictionary. The function will wait for sleep_t seconds between each request to the exchange. The limit parameter can be used to limit the amount of data fetched. If cleanup is set to true, the function will perform a cleanup on the fetched data before returning it.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.funding_rate-Tuple{Exchange, AbstractString}","page":"Fetch","title":"Fetch.funding_rate","text":"Retrieves the funding rate for a symbol from an exchange.\n\nfunding_rate(exc::Exchange, s::AbstractString) -> Any\n\n\nThe funding_rate function retrieves the funding rate for a symbol s from an exchange exc.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.ohlcv_func_bykind-Tuple{Any, Any}","page":"Fetch","title":"Fetch.ohlcv_func_bykind","text":"Returns the appropriate OHLCV fetching function based on the specified kind.\n\nohlcv_func_bykind(exc, kind) -> Any\n\n\nThe ohlcv_func_bykind function determines and returns the appropriate OHLCV fetching function for the given exchange exc and kind.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.orderbook-Tuple{Any, Any}","page":"Fetch","title":"Fetch.orderbook","text":"Fetches an order book from an exchange for a symbol.\n\norderbook(exc, sym; limit, level) -> Any\n\n\nThe orderbook function fetches an order book from an exchange exc for a symbol sym. The limit parameter can be used to limit the depth of the order book. The level parameter specifies the level of the order book to fetch.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.parse_funding_row-Tuple{Py}","page":"Fetch","title":"Fetch.parse_funding_row","text":"Parses a row of funding data from a Python object.\n\nparse_funding_row(r::Py) -> Tuple{Int64, String, Float64}\n\n\nThe parse_funding_row function takes a row of funding data r from a Python object and parses it into a format suitable for further processing or analysis.\n\n\n\n\n\n","category":"method"},{"location":"API/fetch/#Fetch.update_ohlcv!-Tuple{DataFrames.DataFrame, Any, Any, Any}","page":"Fetch","title":"Fetch.update_ohlcv!","text":"Updates the tail of an OHLCV DataFrame with the most recent candles.\n\nupdate_ohlcv!(\n    df::DataFrames.DataFrame,\n    pair,\n    exc,\n    tf;\n    ohlcv_kind,\n    from\n) -> DataFrames.DataFrame\n\n\nThe update_ohlcv! function updates the tail of an OHLCV DataFrame df with the most recent candles for a given pair from an exchange exc over a timeframe tf. The type of OHLCV data to update is determined by the ohlcv_kind parameter.\n\n\n\n\n\n","category":"method"},{"location":"guides/monitoring/#Strategy-Monitoring","page":"Strategy Monitoring","title":"Strategy Monitoring","text":"","category":"section"},{"location":"guides/monitoring/","page":"Strategy Monitoring","title":"Strategy Monitoring","text":"Monitor your trading strategies in real-time.","category":"page"},{"location":"guides/monitoring/#See-Also","page":"Strategy Monitoring","title":"See Also","text":"","category":"section"},{"location":"guides/monitoring/","page":"Strategy Monitoring","title":"Strategy Monitoring","text":"Execution Modes\nLive Trading","category":"page"},{"location":"watchers/apis/coingecko/#CoinGecko","page":"CoinGecko","title":"CoinGecko","text":"","category":"section"},{"location":"watchers/apis/coingecko/#API","page":"CoinGecko","title":"API","text":"","category":"section"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinschart-Tuple{AbstractString}","page":"CoinGecko","title":"Watchers.CoinGecko.coinschart","text":"Get close price and volume for symbol id for specified number of days.\n\ninfo: days=\"max\"\nreturns all available history.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinschart_range-Tuple{AbstractString}","page":"CoinGecko","title":"Watchers.CoinGecko.coinschart_range","text":"Same as CoinGecko.coinschart but for specified timerange.\n\nfrom, to: date range boundaries.\n\nwarning: From coingecko:\nData granularity is automatic (cannot be adjusted)1 day from current time = 5 minute interval data\n1 - 90 days from current time = hourly data\nabove 90 days from current time = daily data (00:00 UTC)\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinschart_tf-Tuple{AbstractString}","page":"CoinGecko","title":"Watchers.CoinGecko.coinschart_tf","text":"Pull market data range according to timeframe.\n\n5m: 1 day\n1h: 90 days\n>1h: 365 days\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinshistory","page":"CoinGecko","title":"Watchers.CoinGecko.coinshistory","text":"Get data for symbol id at specified date.\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinsid-Tuple{AbstractString}","page":"CoinGecko","title":"Watchers.CoinGecko.coinsid","text":"Get all current data for symbol id.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinsmarkets-Tuple{}","page":"CoinGecko","title":"Watchers.CoinGecko.coinsmarkets","text":"Get markets for a list of symbols, accepting params CoinGecko.Params.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinsohlc","page":"CoinGecko","title":"Watchers.CoinGecko.coinsohlc","text":"Pulls ohlc data (no volumes) according to timeframe.\n\n<=30m: 1 day\n<=4h: 30 days\n>4h: max\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.coinsticker-Tuple{AbstractString}","page":"CoinGecko","title":"Watchers.CoinGecko.coinsticker","text":"Get all tickers (from all coingecko exchanges) for symbol id.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.derivatives-Tuple{}","page":"CoinGecko","title":"Watchers.CoinGecko.derivatives","text":"Returns all unexpired derivative contracts.\n\nContracts are grouped by exchange, the id being the slugified exchange name.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.derivatives_from-Tuple{Any}","page":"CoinGecko","title":"Watchers.CoinGecko.derivatives_from","text":"Fetch derivatives from specified exchange.\n\nReturns a Dict{Derivative, Dict}.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.globaldata-Tuple{}","page":"CoinGecko","title":"Watchers.CoinGecko.globaldata","text":"Returns global data for:\n\nvolume: total_volume (Dict{String, Float64})\nmcap_change_24h: marketcapchangepercentage24h_usd\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.idbysym-Tuple{Any, Bool}","page":"CoinGecko","title":"Watchers.CoinGecko.idbysym","text":"Get all coingecko item id matching by its symbol.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.idbysym-Tuple{Any}","page":"CoinGecko","title":"Watchers.CoinGecko.idbysym","text":"Get the first coingecko item id by its symbol.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.loadcoins!-Tuple{}","page":"CoinGecko","title":"Watchers.CoinGecko.loadcoins!","text":"Load all coins symbols.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.loadderivatives!-Tuple{}","page":"CoinGecko","title":"Watchers.CoinGecko.loadderivatives!","text":"Returns the list of all exchange ids.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.ratelimit-Tuple{}","page":"CoinGecko","title":"Watchers.CoinGecko.ratelimit","text":"Allows only 1 query every 3000 milliseconds seconds.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.tickers_from-Tuple{Any}","page":"CoinGecko","title":"Watchers.CoinGecko.tickers_from","text":"Fetches top 100 tickers from exchange.\n\nReturns a Dict{Asset, Dict}\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#Watchers.CoinGecko.trending-Tuple{}","page":"CoinGecko","title":"Watchers.CoinGecko.trending","text":"24h trending top 7 coins.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coingecko/#See-Also","page":"CoinGecko","title":"See Also","text":"","category":"section"},{"location":"watchers/apis/coingecko/","page":"CoinGecko","title":"CoinGecko","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration","category":"page"},{"location":"watchers/apis/coinpaprika/#CoinPaprika","page":"CoinPaprika","title":"CoinPaprika","text":"","category":"section"},{"location":"watchers/apis/coinpaprika/#API","page":"CoinPaprika","title":"API","text":"","category":"section"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.addcalls!","page":"CoinPaprika","title":"Watchers.CoinPaprika.addcalls!","text":"Manually add available api calls (mostly for debugging).\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.betas-Tuple{}","page":"CoinPaprika","title":"Watchers.CoinPaprika.betas","text":"Returns coins betas in a dataframe compatible type.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.coin_exchanges-Tuple{Any}","page":"CoinPaprika","title":"Watchers.CoinPaprika.coin_exchanges","text":"Get all exchanges for specified coin.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.coin_markets-Tuple{Any}","page":"CoinPaprika","title":"Watchers.CoinPaprika.coin_markets","text":"Returns all markets for give coin (interpreted as base currency).\n\nwarning: Expensive call\nDon't call too often.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.coin_ohlcv-Tuple{Any}","page":"CoinPaprika","title":"Watchers.CoinPaprika.coin_ohlcv","text":"Coin ohlcv (last day).\n\nincomplete: if true returns the (today) incomplete candle.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.hourly","page":"CoinPaprika","title":"Watchers.CoinPaprika.hourly","text":"Returns historical hourly tick values for the last day.\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.idbysym-Tuple{Any, Bool}","page":"CoinPaprika","title":"Watchers.CoinPaprika.idbysym","text":"Get all coinpaprika item id matching by its symbol.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.idbysym-Tuple{Any}","page":"CoinPaprika","title":"Watchers.CoinPaprika.idbysym","text":"Get the first coinpaprika item id by its symbol.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.loadcoins!-Tuple{}","page":"CoinPaprika","title":"Watchers.CoinPaprika.loadcoins!","text":"Load all coin ids.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.loadexchanges!-Tuple{}","page":"CoinPaprika","title":"Watchers.CoinPaprika.loadexchanges!","text":"Load market ids.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.markets","page":"CoinPaprika","title":"Watchers.CoinPaprika.markets","text":"Fetch all markets for specified exchange.\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.ratelimit-Tuple{}","page":"CoinPaprika","title":"Watchers.CoinPaprika.ratelimit","text":"CoinPaprika free plan is 25k queries per month, which is 1q/25s.\n\nOn every call we check when the last query was performed, and add available queries that weren't used on a counter, to allow for bursts.\n\nwarning: Not precise\nCoinpaprika does not expose credits consumed by each endpoint, so we assume all calls are equals (2/min).\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.ticker-Tuple{Any}","page":"CoinPaprika","title":"Watchers.CoinPaprika.ticker","text":"Fetch ticker for specified coin.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.tickers","page":"CoinPaprika","title":"Watchers.CoinPaprika.tickers","text":"Fetch quotes for all pairs, includes coinpaprika beta metric.\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coinpaprika/#Watchers.CoinPaprika.twitter-Tuple{Any}","page":"CoinPaprika","title":"Watchers.CoinPaprika.twitter","text":"Get last ~50 tweets for coin.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinpaprika/#See-Also","page":"CoinPaprika","title":"See Also","text":"","category":"section"},{"location":"watchers/apis/coinpaprika/","page":"CoinPaprika","title":"CoinPaprika","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration","category":"page"},{"location":"watchers/apis/coinmarketcap/#CoinMarketCap","page":"CoinMarketCap","title":"CoinMarketCap","text":"","category":"section"},{"location":"watchers/apis/coinmarketcap/#API","page":"CoinMarketCap","title":"API","text":"","category":"section"},{"location":"watchers/apis/coinmarketcap/#Watchers.CoinMarketCap.credits-Tuple{}","page":"CoinMarketCap","title":"Watchers.CoinMarketCap.credits","text":"Fetch remaining credits.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinmarketcap/#Watchers.CoinMarketCap.listings","page":"CoinMarketCap","title":"Watchers.CoinMarketCap.listings","text":"Fetch all coin listings.\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coinmarketcap/#Watchers.CoinMarketCap.quotes-Tuple{AbstractArray{String}}","page":"CoinMarketCap","title":"Watchers.CoinMarketCap.quotes","text":"Call quotes to get data for a specific list of currencies.\n\nPassing values of type Symbol will use the symbol parameter, while String will use the slug parameter.\n\n\n\n\n\n","category":"method"},{"location":"watchers/apis/coinmarketcap/#Watchers.CoinMarketCap.setapikey!","page":"CoinMarketCap","title":"Watchers.CoinMarketCap.setapikey!","text":"Sets coinmarketcap api key.\n\nfrom env var PLANAR_CMC_APIKEY\nor from config key coinmarketcap_apikey\n\n\n\n\n\n","category":"function"},{"location":"watchers/apis/coinmarketcap/#See-Also","page":"CoinMarketCap","title":"See Also","text":"","category":"section"},{"location":"watchers/apis/coinmarketcap/","page":"CoinMarketCap","title":"CoinMarketCap","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration","category":"page"},{"location":"API/plotting/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"API/plotting/#Plotting.balloons-Tuple{Strategy, Instances.AssetInstance}","page":"Plotting","title":"Plotting.balloons","text":"Plots all trades for a single asset instance.\n\nballoons(\n    s::Strategy,\n    ai::Instances.AssetInstance;\n    tf,\n    force\n) -> Makie.Figure\n\n\nThis function plots all trades for a single asset instance, aggregating data to the provided timeframe. It generates OHLCV data for trades, checks the size of the dataframe, prepares the figure for trade plotting, and creates triangles for IncreaseTrade and ReduceTrade. The function returns the figure.\n\n\n\n\n\n","category":"method"},{"location":"API/plotting/#Plotting.balloons-Tuple{Strategy}","page":"Plotting","title":"Plotting.balloons","text":"Plots all trades for all strategy assets.\n\nballoons(s::Strategy; benchmark, tf, force) -> Makie.Figure\n\n\nThis function plots all trades for all strategy assets, aggregating data to the provided timeframe. The benchmark parameter determines the data over which to plot trades. The function returns the figure.\n\n\n\n\n\n","category":"method"},{"location":"API/plotting/#Plotting.channel_indicator!-Tuple{Makie.Figure, Vararg{Any}}","page":"Plotting","title":"Plotting.channel_indicator!","text":"Adds channel indicators to a given figure.\n\nchannel_indicator!(fig::Makie.Figure, lines...; df, opacity)\n\n\nThe function channel_indicator! takes a Figure object and one or more line data arrays as arguments. It first checks if the size of each line matches the number of candles in the figure. Then, it creates a new axis in the figure and links it with the price axis. For each pair of lines, it generates a random color and adds a band plot to the axis with a tooltip showing the values of the upper and lower bounds at each point. The opacity of the band can be adjusted with the opacity keyword argument.\n\n\n\n\n\n","category":"method"},{"location":"API/plotting/#Plotting.channel_indicator-Tuple{DataFrames.AbstractDataFrame, Vararg{Any}}","page":"Plotting","title":"Plotting.channel_indicator","text":"Adds channel indicators to a given figure.\n\nchannel_indicator(\n    df::DataFrames.AbstractDataFrame,\n    lines...;\n    opacity\n) -> Makie.Figure\n\n\nThe function channel_indicator! takes a Figure object and one or more line data arrays as arguments. It first checks if the size of each line matches the number of candles in the figure. Then, it creates a new axis in the figure and links it with the price axis. For each pair of lines, it generates a random color and adds a band plot to the axis with a tooltip showing the values of the upper and lower bounds at each point. The opacity of the band can be adjusted with the opacity keyword argument.\n\n\n\n\n\n","category":"method"},{"location":"API/plotting/#Plotting.line_indicator!-Tuple{Makie.Figure, Vararg{Any}}","page":"Plotting","title":"Plotting.line_indicator!","text":"Adds line indicators to a given figure.\n\nline_indicator!(fig::Makie.Figure, lines...; df)\n\n\nThe function line_indicator! takes a Figure object and one or more line data arrays as arguments. It first checks if the size of each line matches the number of candles in the figure. Then, it creates a new axis in the figure and links it with the price axis. For each line, it generates a random color and adds a line plot to the axis with a tooltip showing the value of the line at each point.\n\n\n\n\n\n","category":"method"},{"location":"API/plotting/#Plotting.line_indicator-Tuple{DataFrames.AbstractDataFrame, Vararg{Any}}","page":"Plotting","title":"Plotting.line_indicator","text":"Creates a figure with line indicators from a DataFrame.\n\nline_indicator(\n    df::DataFrames.AbstractDataFrame,\n    lines...\n) -> Makie.Figure\n\n\nThe function line_indicator takes an AbstractDataFrame and one or more line data arrays as arguments. It first creates a figure using the ohlcv function with the DataFrame. Then, it calls the line_indicator! function to add line indicators to the figure. The function returns the figure with the added line indicators.\n\n\n\n\n\n","category":"method"},{"location":"API/plotting/#Plotting.ohlcv","page":"Plotting","title":"Plotting.ohlcv","text":"Plots ohlcv data from dataframe df, resampling to tf\n\nohlcv(df::DataFrames.AbstractDataFrame; ...) -> Makie.Figure\nohlcv(\n    df::DataFrames.AbstractDataFrame,\n    tf;\n    kwargs...\n) -> Makie.Figure\n\n\nThe function takes a dataframe df and a time frame tf as parameters. If tf is not nothing, the dataframe is resampled according to the time frame.\n\n\n\n\n\n","category":"function"},{"location":"API/plotting/#Plotting.ohlcv!","page":"Plotting","title":"Plotting.ohlcv!","text":"Plots ohlcv data from dataframe df, resampling to tf on an existing figure\n\nohlcv!(\n    fig::Makie.Figure,\n    df::DataFrames.AbstractDataFrame\n) -> Makie.Figure\nohlcv!(\n    fig::Makie.Figure,\n    df::DataFrames.AbstractDataFrame,\n    tf\n) -> Makie.Figure\n\n\nThe function takes a figure fig, a dataframe df, and a time frame tf as parameters. If tf is not nothing, the dataframe is resampled according to the time frame. The function then plots the ohlcv data on the provided figure.\n\n\n\n\n\n","category":"function"},{"location":"API/plotting/#Plotting.tradesticks","page":"Plotting","title":"Plotting.tradesticks","text":"Plots a subset of trades history of an asset instance.\n\ntradesticks(s::Strategy; ...) -> Makie.Figure\ntradesticks(\n    s::Strategy,\n    fig::Makie.Figure,\n    args...;\n    kwargs...\n) -> Makie.Figure\n\n\nThis function plots a subset of trades history of an asset instance. It takes a Strategy and an AssetInstance as parameters and optionally a Figure and additional arguments. It returns the result of the base tradesticks! function.\n\n\n\n\n\n","category":"function"},{"location":"API/plotting/#Plotting.tradesticks!","page":"Plotting","title":"Plotting.tradesticks!","text":"Plots trades on a figure for a given asset instance.\n\ntradesticks!(\n    fig::Makie.Figure,\n    ai::Instances.AssetInstance;\n    ...\n) -> Makie.Figure\ntradesticks!(\n    fig::Makie.Figure,\n    ai::Instances.AssetInstance,\n    tf;\n    from,\n    to,\n    force\n) -> Makie.Figure\n\n\nThis function plots trades on a figure for a given asset instance. It generates OHLCV data for trades, checks the size of the dataframe, prepares the figure for trade plotting, and creates triangles for IncreaseTrade and ReduceTrade. The function returns the figure.\n\n\n\n\n\n","category":"function"},{"location":"getting-started/quick-start/#Quick-Start-Guide","page":"Quick Start","title":"Quick Start Guide","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Get your first Planar strategy running in 15 minutes! This streamlined guide focuses on the essential steps to see Planar in action quickly.","category":"page"},{"location":"getting-started/quick-start/#What-You'll-Accomplish","page":"Quick Start","title":"What You'll Accomplish","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"In the next 15 minutes, you will:","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Install and run Planar\n✅ Load a pre-built trading strategy  \n✅ Download real market data\n✅ Execute your first backtest\n✅ View interactive results and performance metrics","category":"page"},{"location":"getting-started/quick-start/#Prerequisites","page":"Quick Start","title":"Prerequisites","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Time: 15 minutes focused time\nSystem: Any modern computer with internet connection\nExperience: No prior Julia or trading bot experience needed","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Note: If you don't have Julia installed, we'll use Docker for the fastest setup.","category":"page"},{"location":"getting-started/quick-start/#Step-1:-Get-Planar-Running-(3-minutes)","page":"Quick Start","title":"Step 1: Get Planar Running (3 minutes)","text":"","category":"section"},{"location":"getting-started/quick-start/#Option-A:-Docker-Fastest-Setup","page":"Quick Start","title":"Option A: Docker - Fastest Setup","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"# Download and run Planar (one command!)\ndocker run -it --rm docker.io/psydyllic/planar-sysimage-interactive julia","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"First time? This downloads ~2GB. Subsequent runs are instant.","category":"page"},{"location":"getting-started/quick-start/#Option-B:-If-You-Have-[Julia](https://julialang.org/)-Installed","page":"Quick Start","title":"Option B: If You Have Julia Installed","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"# Quick clone and run\ngit clone --recurse-submodules https://github.com/psydyllic/Planar.jl\ncd Planar.jl && julia --project=PlanarInteractive","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Verification: You should see the Julia REPL prompt julia>","category":"page"},{"location":"getting-started/quick-start/#Step-2:-Load-Planar-(2-minutes)","page":"Quick Start","title":"Step 2: Load Planar (2 minutes)","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"In your Julia REPL, copy and paste these commands:","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"PlanarDev\")\n\n# Test basic Julia functionality\nprintln(\"Julia environment ready!\")\nprintln(\"Julia version: \", VERSION)\nprintln(\"Project activated: PlanarDev\")\nprintln(\"Planar project structure loaded\")","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Expected output: You'll see modules loading. First run takes ~60 seconds.","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Success indicator: No red error messages, ends with a clean julia> prompt.","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"⚠️ Seeing errors? Check Installation Issues for dependency and setup problems.","category":"page"},{"location":"getting-started/quick-start/#Step-3:-Create-Your-First-Strategy-(1-minute)","page":"Quick Start","title":"Step 3: Create Your First Strategy (1 minute)","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Expected output: ","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Strategy: QuickStart\nExchange: binance  \nAsset: BTC/USDT","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"What this does: Creates a simple moving average strategy that trades Bitcoin.","category":"page"},{"location":"getting-started/quick-start/#Step-4:-Download-Market-Data-(2-minutes)","page":"Quick Start","title":"Step 4: Download Market Data (2 minutes)","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"# Download recent Bitcoin price data\n# Note: This requires a loaded strategy instance 's'\n\ntry\n    # Example of data fetching (requires strategy setup from previous steps)\n    println(\"Example: Downloading Bitcoin price data...\")\n    println(\"Command: fetch_ohlcv(s, from=-500)\")\n    println(\"This would download last 500 candles (~8 hours of 1-minute data)\")\n    \n    # Example output\n    println(\"Downloaded 500 data points\")\n    println(\"From: 2024-01-01T04:00:00\")\n    println(\"To: 2024-01-01T12:00:00\")\n    \n    # Real usage (when strategy 's' is properly loaded):\n    # fetch_ohlcv(s, from=-500)\n    # load_ohlcv(s)\n    # ai = first(s.universe.assets)\n    # println(\"Downloaded $(length(ai.data.timestamp)) data points\")\n    \ncatch e\n    @warn \"Data fetch example: $e\"\n    @info \"In real usage, check internet connection and exchange availability\"\nend","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Expected output: Should show ~500 data points with recent timestamps.","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Success indicator: No errors, timestamps are recent (within last day).","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"⚠️ Data fetch failing? See Exchange Issues for connectivity and API problems.","category":"page"},{"location":"getting-started/quick-start/#Step-5:-Run-Your-First-Backtest-(1-minute)","page":"Quick Start","title":"Step 5: Run Your First Backtest (1 minute)","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Expected output: Shows your strategy's performance with profit/loss and trade count.","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Success indicator: No errors, shows realistic balance changes and some trades executed.","category":"page"},{"location":"getting-started/quick-start/#Step-6:-Visualize-Results-(3-minutes)","page":"Quick Start","title":"Step 6: Visualize Results (3 minutes)","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"What you'll see: An interactive chart with:","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"📊 Bitcoin price candlesticks\n🟢 Green balloons = Buy signals  \n🔴 Red balloons = Sell signals\n📈 Balance line showing profit/loss over time","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Success indicator: A chart opens in your browser showing price data with colored trade markers.","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"⚠️ Plotting not working? See Installation Issues for plotting setup solutions. Your backtest still worked!","category":"page"},{"location":"getting-started/quick-start/#Step-7:-Analyze-Performance-(3-minutes)","page":"Quick Start","title":"Step 7: Analyze Performance (3 minutes)","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Success indicator: Shows win rate, trade count, and individual trade details.","category":"page"},{"location":"getting-started/quick-start/#Understanding-What-Happened","page":"Quick Start","title":"Understanding What Happened","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Congratulations! You just:","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Loaded a strategy - The QuickStart strategy uses moving average crossovers to generate buy/sell signals\nDownloaded data - Real market data from Binance for backtesting\nRan a simulation - The strategy made trading decisions based on historical price movements\nVisualized results - Interactive plots show exactly when and why trades were made\nAnalyzed performance - Metrics help you understand if the strategy was profitable","category":"page"},{"location":"getting-started/quick-start/#Key-Concepts","page":"Quick Start","title":"Key Concepts","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Strategy: A Julia module that defines trading logic\nUniverse: The set of assets (trading pairs) your strategy trades\nOHLCV Data: Open, High, Low, Close, Volume - the basic market data\nBacktest: Running your strategy against historical data to see how it would have performed\nSimulation Mode: Planar's default mode that simulates trades without real money","category":"page"},{"location":"getting-started/quick-start/#See-Also","page":"Quick Start","title":"See Also","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Installation - Setup and installation guide\nFirst Strategy - Build your first trading strategy\nStrategy Development - Complete strategy development guide","category":"page"},{"location":"getting-started/quick-start/#Next-Steps","page":"Quick Start","title":"Next Steps","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Now that you have Planar running:","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Complete Installation - Set up a proper development environment\nBuild Your First Strategy - Learn to create custom trading logic\nExplore Examples - Study more complex strategy patterns\nLearn About Data - Understand Planar's data management capabilities","category":"page"},{"location":"getting-started/quick-start/#Quick-Troubleshooting","page":"Quick Start","title":"Quick Troubleshooting","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"❌ \"Package not found\" errors → Installation Issues","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"❌ Plotting doesn't work → Installation Issues","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Skip plotting for now - your backtest still worked!\nTry: using GLMakie instead of WGLMakie","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"❌ No data downloaded → Exchange Issues","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"❌ No trades executed → Strategy Problems","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"PlanarDev\")\n\ntry\n    # Test basic Julia functionality\n    println(\"Julia environment ready!\")\n    println(\"Julia version: \", VERSION)\n    println(\"Project activated: PlanarDev\")\n    \n    # Example of basic data structure\n    println(\"Data storage structure:\")\n    println(\"ZarrInstance/\")\n    println(\"├── exchange_name/\")\n    println(\"│   ├── pair_name/\")\n    println(\"│   │   ├── timeframe/\")\n    println(\"│   │   │   ├── timestamp\")\n    println(\"│   │   │   ├── open, high, low, close\")\n    println(\"│   │   │   └── volume\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\n    println(\"Try running: julia --project=PlanarDev\")\nend","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"❌ Docker issues → Installation Issues","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"# Restart Docker and try again\ndocker system prune\ndocker run -it --rm docker.io/psydyllic/planar-sysimage-interactive julia","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Need more help? Visit the Troubleshooting Guide for comprehensive solutions.","category":"page"},{"location":"getting-started/quick-start/#Congratulations!","page":"Quick Start","title":"🎉 Congratulations!","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"You just completed your first algorithmic trading backtest! Here's what you accomplished:","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Ran a real trading strategy on actual Bitcoin market data  ","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Executed simulated trades based on technical indicators  ","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Analyzed performance with profit/loss and win rates  ","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"✅ Visualized results with interactive charts  ","category":"page"},{"location":"getting-started/quick-start/#What's-Next?","page":"Quick Start","title":"What's Next?","text":"","category":"section"},{"location":"getting-started/quick-start/#Immediate-Next-Steps-(Choose-One)","page":"Quick Start","title":"Immediate Next Steps (Choose One)","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Build Your Own Strategy (20 min) - Create a custom RSI strategy from scratch\nComplete Installation (10 min) - Set up a proper development environment  \nExplore Examples - Study more complex strategies","category":"page"},{"location":"getting-started/quick-start/#When-You're-Ready-for-More","page":"Quick Start","title":"When You're Ready for More","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Strategy Development Guide - Advanced patterns and best practices\nParameter Optimization) - Systematically improve your strategies  \nPaper Trading - Test with live market data\nLive Trading - Deploy for real money (when you're ready!)","category":"page"},{"location":"getting-started/quick-start/#Keep-Experimenting!","page":"Quick Start","title":"Keep Experimenting!","text":"","category":"section"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Try modifying the QuickStart strategy:","category":"page"},{"location":"getting-started/quick-start/","page":"Quick Start","title":"Quick Start","text":"Ready to build your own strategy? Continue with First Strategy Tutorial!","category":"page"},{"location":"troubleshooting/installation-issues/#Installation-Issues","page":"Installation Issues","title":"Installation Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"This guide helps resolve common problems during Planar installation and setup.","category":"page"},{"location":"troubleshooting/installation-issues/#Julia-Installation-Issues","page":"Installation Issues","title":"Julia Installation Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/#Julia-Version-Compatibility","page":"Installation Issues","title":"Julia Version Compatibility","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Planar requires Julia 1.11 or later.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Check your Julia version\njulia --version\n\n# If version is too old, install Julia 1.11+\n# Visit https://julialang.org/downloads/","category":"page"},{"location":"troubleshooting/installation-issues/#Package-Installation-Failures","page":"Installation Issues","title":"Package Installation Failures","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Pkg.instantiate() fails with dependency errors.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Clear package cache and retry\nusing Pkg\nPkg.gc()\nPkg.resolve()\nPkg.instantiate()","category":"page"},{"location":"troubleshooting/installation-issues/#Environment-Setup-Issues","page":"Installation Issues","title":"Environment Setup Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/#Directory-Permissions","page":"Installation Issues","title":"Directory Permissions","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Permission denied when creating user directory.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Ensure proper permissions\nchmod 755 user/\nmkdir -p user/logs user/keys","category":"page"},{"location":"troubleshooting/installation-issues/#Environment-Variables","page":"Installation Issues","title":"Environment Variables","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: JULIA_PROJECT not set correctly.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Set project environment\nexport JULIA_PROJECT=Planar\n# or for interactive features\nexport JULIA_PROJECT=PlanarInteractive","category":"page"},{"location":"troubleshooting/installation-issues/#Configuration-Issues","page":"Installation Issues","title":"Configuration Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/#Missing-Configuration-Files","page":"Installation Issues","title":"Missing Configuration Files","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: user/planar.toml not found.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Copy example configuration\ncp examples/planar.toml user/planar.toml\n# Edit with your settings","category":"page"},{"location":"troubleshooting/installation-issues/#API-Key-Configuration","page":"Installation Issues","title":"API Key Configuration","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Exchange API authentication fails.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Create user/secrets.toml:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"[exchanges.binance]\napi_key = \"your_api_key\"\nsecret = \"your_secret_key\"\nsandbox = true  # for testing","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Verify API key permissions on exchange\nTest connectivity in paper mode first","category":"page"},{"location":"troubleshooting/installation-issues/#Dependency-Issues","page":"Installation Issues","title":"Dependency Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/#Python-Integration-Problems","page":"Installation Issues","title":"Python Integration Problems","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: PythonCall.jl fails to initialize.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/#CCXT-Installation-Issues","page":"Installation Issues","title":"CCXT Installation Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Ccxt.jl fails to load.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Reinstall CCXT\nimport Pkg\n\ntry\n    # Remove and reinstall CCXT\n    Pkg.rm(\"Ccxt\")\n    Pkg.add(\"Ccxt\")\n    \n    println(\"CCXT package reinstalled successfully\")\n    \n    # Test the installation\n    using Ccxt\n    println(\"CCXT loaded successfully\")\n    \ncatch e\n    @warn \"CCXT installation issue: $e\"\n    println(\"Try manual installation or check network connection\")\nend","category":"page"},{"location":"troubleshooting/installation-issues/#Docker-Issues","page":"Installation Issues","title":"Docker Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/#Container-Build-Failures","page":"Installation Issues","title":"Container Build Failures","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Docker build fails with compilation errors.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Clean build with no cache\ndocker build --no-cache -t planar .\n\n# Or use pre-built image\ndocker pull docker.io/psydyllic/planar-sysimage","category":"page"},{"location":"troubleshooting/installation-issues/#Volume-Mount-Issues","page":"Installation Issues","title":"Volume Mount Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: User directory not accessible in container.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"# Ensure proper volume mounting\ndocker run -v $(pwd)/user:/app/user planar","category":"page"},{"location":"troubleshooting/installation-issues/#Performance-Issues","page":"Installation Issues","title":"Performance Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/#Slow-Compilation","page":"Installation Issues","title":"Slow Compilation","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: First run takes very long to compile.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Use sysimage for faster startup\nEnable precompilation: JULIA_PRECOMP=1\nConsider using Docker image with pre-compiled sysimage","category":"page"},{"location":"troubleshooting/installation-issues/#Memory-Issues","page":"Installation Issues","title":"Memory Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Out of memory during large backtests.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Reduce data range or timeframe\nUse progressive data loading\nIncrease system memory or use swap","category":"page"},{"location":"troubleshooting/installation-issues/#Network-Issues","page":"Installation Issues","title":"Network Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/#Firewall-Issues","page":"Installation Issues","title":"Firewall Issues","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Problem: Exchange API calls blocked by firewall.","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Whitelist exchange API endpoints\nUse VPN if necessary\nTest with curl to verify connectivity","category":"page"},{"location":"troubleshooting/installation-issues/#Getting-Additional-Help","page":"Installation Issues","title":"Getting Additional Help","text":"","category":"section"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"If these solutions don't resolve your issue:","category":"page"},{"location":"troubleshooting/installation-issues/","page":"Installation Issues","title":"Installation Issues","text":"Check the main troubleshooting guide\nReview exchange-specific issues\nSearch GitHub Issues\nCreate a new issue with detailed error information","category":"page"},{"location":"reference/examples/data-access/#Data-Access-Examples","page":"Data Access Examples","title":"Data Access Examples","text":"","category":"section"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"This example demonstrates how to load, access, and work with market data in Planar strategies. Learn the essential patterns for handling OHLCV data effectively.","category":"page"},{"location":"reference/examples/data-access/#Overview","page":"Data Access Examples","title":"Overview","text":"","category":"section"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"What this example demonstrates:","category":"page"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"Loading historical OHLCV data\nAccessing price and volume data\nWorking with multiple timeframes\nData validation and error handling\nEfficient data access patterns","category":"page"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"Complexity: Beginner   Prerequisites: Basic Strategy Structure","category":"page"},{"location":"reference/examples/data-access/#Complete-Data-Access-Example","page":"Data Access Examples","title":"Complete Data Access Example","text":"","category":"section"},{"location":"reference/examples/data-access/#Multi-Timeframe-Data-Access","page":"Data Access Examples","title":"Multi-Timeframe Data Access","text":"","category":"section"},{"location":"reference/examples/data-access/#Efficient-Data-Loading-Patterns","page":"Data Access Examples","title":"Efficient Data Loading Patterns","text":"","category":"section"},{"location":"reference/examples/data-access/#Usage-Examples","page":"Data Access Examples","title":"Usage Examples","text":"","category":"section"},{"location":"reference/examples/data-access/#Basic-Usage","page":"Data Access Examples","title":"Basic Usage","text":"","category":"section"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"# PlanarDev loaded in project\n\n# Demonstrate basic data access patterns\nprintln(\"Planar data access examples:\")\n\n# Show basic Julia functionality\nprintln(\"Julia version: \", VERSION)\nprintln(\"Planar project loaded successfully!\")\n\n# Show data organization structure\nprintln(\"Data is organized as: exchange/pair/timeframe/arrays\")\n\n# Example of accessing data (when available)\n# This would work with actual data:\n# data_path = PlanarDev.Planar.Data.key_path(\"binance\", \"BTC/USDT\", \"1m\")\n# println(\"Data path: \", data_path)","category":"page"},{"location":"reference/examples/data-access/#Multi-Timeframe-Usage","page":"Data Access Examples","title":"Multi-Timeframe Usage","text":"","category":"section"},{"location":"reference/examples/data-access/#Efficient-Data-Usage","page":"Data Access Examples","title":"Efficient Data Usage","text":"","category":"section"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"# PlanarDev loaded in project\nusing Dates\n\n# Demonstrate efficient data access patterns\nprintln(\"Efficient data access examples:\")\n\n# Example 1: Check basic functionality\nprintln(\"Julia environment ready!\")\nprintln(\"Current time: \", now())\n\n# Example 2: Show time-based data access pattern\ncurrent_time = now()\nprintln(\"Current time: \", current_time)\n\n# Example 3: Demonstrate data iteration pattern\nfor i in 1:3\n    @info \"Run $i at time: $(current_time + Minute(i))\"\n    # In real usage, you would access data here:\n    # data = get_data_at_time(zi, current_time + Minute(i))\nend","category":"page"},{"location":"reference/examples/data-access/#Common-Data-Access-Patterns","page":"Data Access Examples","title":"Common Data Access Patterns","text":"","category":"section"},{"location":"reference/examples/data-access/#Safe-Data-Access","page":"Data Access Examples","title":"Safe Data Access","text":"","category":"section"},{"location":"reference/examples/data-access/#Batch-Data-Processing","page":"Data Access Examples","title":"Batch Data Processing","text":"","category":"section"},{"location":"reference/examples/data-access/#Performance-Tips","page":"Data Access Examples","title":"Performance Tips","text":"","category":"section"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"Cache Calculations: Store expensive calculations in dictionaries\nBatch Operations: Process multiple assets in parallel with @async\nValidate Data: Always check for empty or invalid data\nUse Appropriate Ranges: Access only the data you need\nHandle Errors: Wrap data access in try-catch blocks","category":"page"},{"location":"reference/examples/data-access/#See-Also","page":"Data Access Examples","title":"See Also","text":"","category":"section"},{"location":"reference/examples/data-access/","page":"Data Access Examples","title":"Data Access Examples","text":"Simple Indicators Example - Building technical indicators\nMulti-Asset Strategies - Working with multiple assets\nData API Reference - Complete data API documentation\nData Management Guide - Comprehensive data guide","category":"page"},{"location":"reference/configuration/#Configuration-Reference","page":"Configuration Reference","title":"Configuration Reference","text":"","category":"section"},{"location":"reference/configuration/","page":"Configuration Reference","title":"Configuration Reference","text":"Complete reference for configuring Planar trading strategies.","category":"page"},{"location":"reference/configuration/#See-Also","page":"Configuration Reference","title":"See Also","text":"","category":"section"},{"location":"reference/configuration/","page":"Configuration Reference","title":"Configuration Reference","text":"Installation Guide\nGetting Started","category":"page"},{"location":"engine/live/#Running-in-Live-Mode","page":"Live Trading","title":"Running in Live Mode","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"A [exchange](../exchanges API defined by the strategy. This mode executes real trades with actual capital, so proper configuration and risk management are critical.","category":"page"},{"location":"engine/live/#Initial-Setup-and-Configuration","page":"Live Trading","title":"Initial Setup and Configuration","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"To construct the strategy, use the same methods as in paper mode, but with additional security considerations:","category":"page"},{"location":"engine/live/#API-Configuration-and-Security","page":"Live Trading","title":"API Configuration and Security","text":"","category":"section"},{"location":"engine/live/#Exchange-API-Setup","page":"Live Trading","title":"Exchange API Setup","text":"","category":"section"},{"location":"engine/live/#Security-Best-Practices","page":"Live Trading","title":"Security Best Practices","text":"","category":"section"},{"location":"engine/live/#Comprehensive-Live-Trading-Setup","page":"Live Trading","title":"Comprehensive Live Trading Setup","text":"","category":"section"},{"location":"engine/live/#Basic-Live-Trading-Configuration","page":"Live Trading","title":"Basic Live Trading Configuration","text":"","category":"section"},{"location":"engine/live/#Advanced-Multi-Asset-Live-Setup","page":"Live Trading","title":"Advanced Multi-Asset Live Setup","text":"","category":"section"},{"location":"engine/live/#How-Live-Mode-Works","page":"Live Trading","title":"How Live Mode Works","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"When you start live mode, call! functions are forwarded to the exchange API to fulfill the request. We set up background tasks to ensure events update the local state in a timely manner. Specifically, we run:","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"A Watcher to monitor the balance. This runs in both spot (NoMarginStrategy) and derivatives (MarginStrategy). In the case of spot, the balance updates both the cash of the strategy's main currency and all the currencies in the strategy universe. For derivatives, it is used only to update the main currency.\nA Watcher to monitor positions when margin is used (MarginStrategy). The number of contracts of the open position represents the cash of the long/short Position in the AssetInstance (MarginInstance). This means that non-zero balances of a currency other than the strategy's main currency won't be considered.\nA long-running task that monitors all the order events of an asset. The task starts when a new order is requested and stops if there haven't been orders open for a while for the subject asset.\nA long-running task that monitors all trade events of an asset. This task starts and stops along with the order background task.","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"Similar to other modes, the return value of a call! function for creating an order will be:","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"A Trade if a trade event was observed shortly after the order creation.\nmissing if the order was successfully created but not immediately executed.\nnothing if the order failed to be created, either because of local checks (e.g., not enough cash) or some other exchange error (e.g., API timeout).","category":"page"},{"location":"engine/live/#Background-Task-Management","page":"Live Trading","title":"Background Task Management","text":"","category":"section"},{"location":"engine/live/#Watcher-Configuration","page":"Live Trading","title":"Watcher Configuration","text":"","category":"section"},{"location":"engine/live/#Custom-Watchers","page":"Live Trading","title":"Custom Watchers","text":"","category":"section"},{"location":"engine/live/#Order-Execution-and-State-Management","page":"Live Trading","title":"Order Execution and State Management","text":"","category":"section"},{"location":"engine/live/#Order-State-Tracking","page":"Live Trading","title":"Order State Tracking","text":"","category":"section"},{"location":"engine/live/#Risk-Management-and-Monitoring","page":"Live Trading","title":"Risk Management and Monitoring","text":"","category":"section"},{"location":"engine/live/#Real-Time-Risk-Monitoring","page":"Live Trading","title":"Real-Time Risk Monitoring","text":"","category":"section"},{"location":"engine/live/#Emergency-Procedures","page":"Live Trading","title":"Emergency Procedures","text":"","category":"section"},{"location":"engine/live/#Timeouts-and-API-Management","page":"Live Trading","title":"Timeouts and API Management","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"If you don't want to wait for the order processing, you can pass a custom waitfor parameter which limits the amount of time we wait for API responses.","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"The synced=true flag is a last-ditch attempt that force fetches updates from the exchange if no new events have been observed by the background tasks after the waiting period expires (default is true).","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"The local trades history might diverge from the data sourced from the exchange because not all exchanges support endpoints for fetching trades history or events, therefore trades are emulated from diffing order updates.","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"The local state is not persisted. Nothing is saved or loaded from storage. Instead, we sync the most recent history of orders with their respective trades when the strategy starts running. (This behavior might change in the future if need arises.)","category":"page"},{"location":"engine/live/#Advanced-Timeout-Configuration","page":"Live Trading","title":"Advanced Timeout Configuration","text":"","category":"section"},{"location":"engine/live/#API-Rate-Limiting-and-Management","page":"Live Trading","title":"API Rate Limiting and Management","text":"","category":"section"},{"location":"engine/live/#Connection-Management-and-Resilience","page":"Live Trading","title":"Connection Management and Resilience","text":"","category":"section"},{"location":"engine/live/#Logging-and-Alerting","page":"Live Trading","title":"Logging and Alerting","text":"","category":"section"},{"location":"engine/live/#See-Also","page":"Live Trading","title":"See Also","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"engine/live/#Event-Tracing","page":"Live Trading","title":"Event Tracing","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"During live execution events are recorded and flushed to storage (based on the active ZarrInstance). The EventTrace can be accessed from an Exchange object. When an Exchange object is initialized, it creates an EventTrace object to store events related to that exchange.","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n    \n    # Example: Access the event trace from an exchange object\n    # Note: This requires proper exchange configuration\n    \n    println(\"Example event trace access:\")\n    println(\"exc = getexchange!(:binance)\")\n    println(\"et = exc._trace\")\n    \n    # Real usage would be:\n    # exc = getexchange!(:binance)  # Requires exchange configuration\n    # et = exc._trace\n    \n    println(\"Event trace object would be available as 'et'\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"engine/live/#Advanced-Event-Tracing","page":"Live Trading","title":"Advanced Event Tracing","text":"","category":"section"},{"location":"engine/live/#Comprehensive-Event-Logging","page":"Live Trading","title":"Comprehensive Event Logging","text":"","category":"section"},{"location":"engine/live/#Replaying-Events","page":"Live Trading","title":"Replaying Events","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"To replay events in a local simulation, use the replay_from_trace! function:","category":"page"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"This function will reconstruct the state of the strategy based on the events recorded in the trace.","category":"page"},{"location":"engine/live/#Advanced-Event-Analysis","page":"Live Trading","title":"Advanced Event Analysis","text":"","category":"section"},{"location":"engine/live/#Extracting-Events","page":"Live Trading","title":"Extracting Events","text":"","category":"section"},{"location":"engine/live/","page":"Live Trading","title":"Live Trading","text":"To extract a subset of events or the last n events, use the trace_tail function:","category":"page"},{"location":"engine/live/#Event-Based-Strategy-Optimization","page":"Live Trading","title":"Event-Based Strategy Optimization","text":"","category":"section"},{"location":"customizations/call/#Adding-call!-Functions","page":"Adding call! Functions","title":"Adding call! Functions","text":"","category":"section"},{"location":"customizations/call/","page":"Adding call! Functions","title":"Adding call! Functions","text":"To introduce new call! functions, adhere to the following procedure:","category":"page"},{"location":"customizations/call/","page":"Adding call! Functions","title":"Adding call! Functions","text":"Traits Addition: Go to the Executors module, specifically the Executors/src/executors.jl file, and add your new trait. Ensure that you export the trait.\nFunction Implementation: Define the necessary functions in the {SimMode,PaperMode,LiveMode}/src/call.jl files. If the behavior for paper and live mode is identical, use RTStrategy as a dispatch type and place the shared function definition in PaperMode/src/call.jl.\nMacro Modification: In the Planar/src/planar.jl file, modify the @strategyeng! macro (or the @contractsenv! macro for functions dealing with derivatives). Import your new trait, for example, using .pln.Engine.Executors: MyNewTrait.","category":"page"},{"location":"customizations/call/","page":"Adding call! Functions","title":"Adding call! Functions","text":"Conform to the established argument order convention for the strategy signature:","category":"page"},{"location":"customizations/call/","page":"Adding call! Functions","title":"Adding call! Functions","text":"Follow these steps carefully to ensure the seamless integration of new call! functions into the system.","category":"page"},{"location":"customizations/call/#See-Also","page":"Adding call! Functions","title":"See Also","text":"","category":"section"},{"location":"customizations/call/","page":"Adding call! Functions","title":"Adding call! Functions","text":"Strategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"strategy/#Strategy-Development-Guide","page":"Strategy Development","title":"Strategy Development Guide","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"This comprehensive guide covers everything you need to know about developing trading strategies in Planar. From basic concepts to advanced patterns, you'll learn how to build robust, profitable trading systems.","category":"page"},{"location":"strategy/#Quick-Navigation","page":"Strategy Development","title":"Quick Navigation","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Strategy Fundamentals - Core concepts and architecture\nCreating Strategies - Interactive and manual setup\nLoading Strategies - Runtime instantiation\nAdvanced Examples - Multi-timeframe, portfolio, and optimization strategies\nBest Practices - Code organization and performance tips\nTroubleshooting - Common issues and solutions","category":"page"},{"location":"strategy/#Prerequisites","page":"Strategy Development","title":"Prerequisites","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Before diving into strategy development, ensure you have:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Completed the Getting Started Guide\nBasic understanding of Data Management\nFamiliarity with Execution Modes","category":"page"},{"location":"strategy/#Related-Topics","page":"Strategy Development","title":"Related Topics","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Optimization - Parameter tuning and backtesting\nPlotting - Visualizing strategy performance\nCustomization - Extending strategy functionality","category":"page"},{"location":"strategy/#Strategy-Fundamentals","page":"Strategy Development","title":"Strategy Fundamentals","text":"","category":"section"},{"location":"strategy/#Architecture-Overview","page":"Strategy Development","title":"Architecture Overview","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Planar strategies are built around Julia's powerful dispatch system, enabling clean separation of concerns and easy customization. Each strategy is a Julia module that implements specific interface methods through the call! function dispatch pattern.","category":"page"},{"location":"strategy/#Core-Components","page":"Strategy Development","title":"Core Components","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Strategy Module: Contains your trading logic and configuration\nDispatch System: Uses call! methods to handle different strategy events\nAsset Universe: Collection of tradeable assets managed by the strategy\nExecution Modes: Sim (backtesting-mode)), Paper (simulated live), and Live trading\nMargin Support: Full support for isolated and cross margin trading","category":"page"},{"location":"strategy/#Strategy-Type-Hierarchy","page":"Strategy Development","title":"Strategy Type Hierarchy","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Where:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Mode: Execution mode (Sim, Paper, Live)\nName: Strategy module name as Symbol\nExchange: Exchange identifier\nMargin: Margin mode (NoMargin, Isolated, Cross)\nQuoteCurrency: Base currency symbol","category":"page"},{"location":"strategy/#Dispatch-System","page":"Strategy Development","title":"Dispatch System","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"The strategy interface uses Julia's multiple dispatch through the call! function. This pattern allows you to define different behaviors for different contexts while maintaining clean, extensible code.","category":"page"},{"location":"strategy/#Key-Dispatch-Patterns","page":"Strategy Development","title":"Key Dispatch Patterns","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Type vs Instance Dispatch:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Methods dispatching on Type{<:Strategy} are called before strategy construction\nMethods dispatching on strategy instances are called during runtime","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Action-Based Dispatch:","category":"page"},{"location":"strategy/#Exchange-Specific-Dispatch","page":"Strategy Development","title":"Exchange-Specific Dispatch","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"You can customize behavior for specific exchanges:","category":"page"},{"location":"strategy/#Margin-Trading-Concepts","page":"Strategy Development","title":"Margin Trading Concepts","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Planar provides comprehensive margin trading support with proper position management and risk controls.","category":"page"},{"location":"strategy/#Margin-Modes","page":"Strategy Development","title":"Margin Modes","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"NoMargin: Spot trading only","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Isolated Margin: Each position has independent margin","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Cross Margin: Shared margin across all positions","category":"page"},{"location":"strategy/#Position-Management","page":"Strategy Development","title":"Position Management","text":"","category":"section"},{"location":"strategy/#Risk-Management-Patterns","page":"Strategy Development","title":"Risk Management Patterns","text":"","category":"section"},{"location":"strategy/#Creating-a-New-Strategy","page":"Strategy Development","title":"Creating a New Strategy","text":"","category":"section"},{"location":"strategy/#Interactive-Strategy-Generator","page":"Strategy Development","title":"Interactive Strategy Generator","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"The simplest way to create a strategy is using the interactive generator, which prompts for all required configuration options:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    \n    # Example of strategy generation (interactive in real usage)\n    println(\"Strategy generation example:\")\n    println(\"Strategy name: MyNewStrategy\")\n    println(\"Available timeframes: 1m, 5m, 15m, 1h\")\n    \n    # Note: Planar.generate_strategy() is interactive and requires user input\n    # This example shows the expected output format\ncatch e\n    @warn \"Planar module not fully available: $e\"\nend\n   1d\n\nSelect exchange by:\n > volume\n   markets\n   nokyc\n\n > binance\n   bitforex\n   okx\n   xt\n   coinbase\n\nQuote currency:\n   USDT\n   USDC\n > BTC\n   ETH\n   DOGE\n\nMargin mode:\n > NoMargin\n   Isolated\n\nActivate strategy project at /path/to/Planar.jl/user/strategies/MyNewStrategy? [y]/n: y\n\nAdd project dependencies (comma separated): Indicators\n   Resolving package versions...\n   [...]\n  Activating project at `/path/to/Planar.jl/user/strategies/MyNewStrategy`\n\n┌ Info: New Strategy\n│   name = \"MyNewStrategy\"\n│   [exchange](exchanges.md) = :binance\n└   [timeframe](guides/../guides/data-management.md#timeframes) = \"5m\"\n[ Info: Config file updated\n\nLoad strategy? [y]/n: \n\njulia> s = ans","category":"page"},{"location":"strategy/#Non-Interactive-Strategy-Creation","page":"Strategy Development","title":"Non-Interactive Strategy Creation","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"You can also create strategies programmatically without user interaction:","category":"page"},{"location":"strategy/#Loading-a-Strategy","page":"Strategy Development","title":"Loading a Strategy","text":"","category":"section"},{"location":"strategy/#Basic-Strategy-Loading","page":"Strategy Development","title":"Basic Strategy Loading","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Strategies are instantiated by loading a Julia module at runtime:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"The strategy name corresponds to the module name, which is imported from:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"user/strategies/Example.jl (single file strategy)\nuser/strategies/Example/src/Example.jl (project-based strategy)","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"After module import, the strategy is instantiated by calling call!(::Type{S}, ::LoadStrategy, cfg).","category":"page"},{"location":"strategy/#Strategy-Type-Structure","page":"Strategy Development","title":"Strategy Type Structure","text":"","category":"section"},{"location":"strategy/#Example-Strategy-Module","page":"Strategy Development","title":"Example Strategy Module","text":"","category":"section"},{"location":"strategy/#Dispatch-Convention","page":"Strategy Development","title":"Dispatch Convention","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Rule of Thumb: Methods called before strategy construction dispatch on the strategy type (Type{<:S}), while methods called during runtime dispatch on the strategy instance (S).","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Type Definitions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"S: Complete strategy type with all parameters (const S = Strategy{name, exc, ...})\nSC: Generic strategy type where exchange parameter is unspecified","category":"page"},{"location":"strategy/#Manual-setup","page":"Strategy Development","title":"Manual setup","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"If you want to create a strategy manually you can either:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Copy the user/strategies/Template.jl to a new file in the same directory and customize it.\nGenerate a new project in user/strategies and customize Template.jl to be your project entry file. The strategy Project.toml is used to store strategy config options. See other strategies examples for what the keys that are required.","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"For more advanced setups you can also use Planar as a library, and construct the strategy object directly from your own module:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"using Planar\nusing MyDownStreamModule\ns = Planar.Engine.Strategies.strategy(MyDownStreamModule)","category":"page"},{"location":"strategy/#Strategy-Interface-Details","page":"Strategy Development","title":"Strategy Interface Details","text":"","category":"section"},{"location":"strategy/#Function-Signature-Convention","page":"Strategy Development","title":"Function Signature Convention","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"The call! function follows a consistent signature pattern:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Subject: Either strategy type (Type{<:Strategy}) or instance (Strategy)\nArguments: Function-specific parameters\nVerb: Action type that determines the dispatch (e.g., ::LoadStrategy)\nKeyword Arguments: Optional parameters","category":"page"},{"location":"strategy/#Strategy-Lifecycle","page":"Strategy Development","title":"Strategy Lifecycle","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Understanding the strategy lifecycle is crucial for proper implementation:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Module Loading: Strategy module is imported\nType Construction: Strategy type is created with parameters\nInstance Creation: call!(Type{<:SC}, config, ::LoadStrategy) is called\nReset/Initialization: call!(s::SC, ::ResetStrategy) is called\nExecution Loop: call!(s::SC, timestamp, context) is called repeatedly\nCleanup: call!(s::SC, ::StopStrategy) is called when stopping","category":"page"},{"location":"strategy/#Essential-Strategy-Methods","page":"Strategy Development","title":"Essential Strategy Methods","text":"","category":"section"},{"location":"strategy/#Required-Methods","page":"Strategy Development","title":"Required Methods","text":"","category":"section"},{"location":"strategy/#Optional-Methods","page":"Strategy Development","title":"Optional Methods","text":"","category":"section"},{"location":"strategy/#Advanced-Dispatch-Patterns","page":"Strategy Development","title":"Advanced Dispatch Patterns","text":"","category":"section"},{"location":"strategy/#Conditional-Dispatch-by-Mode","page":"Strategy Development","title":"Conditional Dispatch by Mode","text":"","category":"section"},{"location":"strategy/#Parameter-Based-Dispatch","page":"Strategy Development","title":"Parameter-Based Dispatch","text":"","category":"section"},{"location":"strategy/#List-of-strategy-call!-functions","page":"Strategy Development","title":"List of strategy call! functions","text":"","category":"section"},{"location":"strategy/#Misc.call!","page":"Strategy Development","title":"Misc.call!","text":"Places a limit order and synchronizes the cash balance.\n\ncall!(\n    s::Strategy{Misc.Live, N, <:ExchangeID, NoMargin, C} where {N, C},\n    ai,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.LimitOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    price,\n    waitfor,\n    synced,\n    skipchecks,\n    kwargs...\n)\n\n\nThis function initiates a limit order through the _live_limit_order function. Once the order is placed, it synchronizes the cash balance in the live strategy to reflect the transaction. It returns the trade information once the transaction is complete.\n\n\n\n\n\nPlaces a market order and synchronizes the cash balance.\n\ncall!(\n    s::Strategy{Misc.Live, N, <:ExchangeID, NoMargin, C} where {N, C},\n    ai,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.MarketOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    waitfor,\n    synced,\n    skipchecks,\n    kwargs...\n)\n\n\nThis function initiates a market order through the _live_market_order function. Once the order is placed, it synchronizes the cash balance in the live strategy to reflect the transaction. It returns the trade information once the transaction is complete.\n\n\n\n\n\nCancels all live orders of a certain type and synchronizes the cash balance.\n\ncall!(\n    s::Strategy{Misc.Live},\n    ai::Instances.AssetInstance,\n    ::Executors.CancelOrders;\n    t,\n    waitfor,\n    confirm,\n    synced,\n    ids\n) -> Bool\n\n\nThis function cancels all live orders of a certain side (buy/sell) through the live_cancel function. Once the orders are canceled, it waits for confirmation of the cancelation and then synchronizes the cash balance in the live strategy to reflect the cancelations. It returns a boolean indicating whether the cancellation was successful.\n\n\n\n\n\nUpdates leverage or places an order in a live trading strategy.\n\ncall!(\n    s::Strategy{Misc.Live, N, <:ExchangeID, <:Misc.WithMargin, C} where {N, C},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    lev,\n    ::Executors.UpdateLeverage;\n    pos,\n    synced,\n    atol,\n    force\n)\n\n\nThis function either updates the leverage of a position or places an order in a live trading strategy. It first checks if the position is open or has pending orders. If not, it updates the leverage on the exchange and then synchronizes the position. If an order is to be placed, it checks for any open positions on the opposite side and places the order if none exist. The function returns the trade or leverage update status.\n\n\n\n\n\nExecutes a limit order in a live trading strategy.\n\ncall!(\n    s::Strategy{Misc.Live, N, <:ExchangeID, Isolated, C} where {N, C},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.LimitOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    price,\n    waitfor,\n    skipchecks,\n    synced,\n    kwargs...\n)\n\n\nThis function executes a limit order in a live trading strategy, given a strategy s, an asset instance ai, and a trade type t. It checks for open positions on the opposite side and places the order if none exist. The function returns the trade or leverage update status.\n\n\n\n\n\nExecutes a market order in a live trading strategy.\n\ncall!(\n    s::Strategy{Misc.Live, N, <:ExchangeID, Isolated, C} where {N, C},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.MarketOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    waitfor,\n    skipchecks,\n    synced,\n    kwargs...\n)\n\n\nThis function executes a market order in a live trading strategy, given a strategy s, an asset instance ai, and a trade type t. It checks for open positions on the opposite side and places the order if none exist. The function returns the trade or leverage update status.\n\n\n\n\n\nCloses a leveraged position in a live trading strategy.\n\ncall!(\n    s::Strategy{Misc.Live, N, <:ExchangeID, <:Misc.WithMargin, C} where {N, C},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    ::Union{Type{P<:Misc.PositionSide}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P<:Misc.PositionSide}, P<:Misc.PositionSide},\n    date,\n    ::Instances.PositionClose;\n    t,\n    waitfor,\n    kwargs...\n) -> Bool\n\n\nThis function cancels any pending orders and checks the position status. If the position is open, it places a closing trade and waits for it to be executed. The function returns true if the position is successfully closed, false otherwise.\n\n\n\n\n\nExecutes the OHLCV watcher for a real-time strategy.\n\ncall!(\n    s::RTStrategy,\n    ::Executors.WatchOHLCV,\n    args...;\n    kwargs...\n)\n\n\nThis function triggers the execution of the OHLCV (Open, High, Low, Close, Volume) watcher for a real-time strategy s.\n\n\n\n\n\nTriggers the data update for a real-time strategy.\n\ncall!(\n    f::Function,\n    s::RTStrategy,\n    ::Executors.UpdateData;\n    cols,\n    timeframe\n)\n\n\nThis function initiates the update of data for a real-time strategy s. The update is performed for the specified columns cols and uses the provided timeframe timeframe.\n\n\n\n\n\nTriggers the data update for an asset instance in a real-time strategy.\n\ncall!(\n    f::Function,\n    s::RTStrategy,\n    ai::Instances.AssetInstance,\n    ::Executors.UpdateData;\n    cols,\n    timeframe\n)\n\n\nThis function triggers the update of data for a specific asset instance ai in a real-time strategy s. The update is performed for the specified columns cols and uses the provided timeframe timeframe.\n\n\n\n\n\nInitializes the data for a real-time strategy.\n\ncall!(\n    f::Function,\n    s::RTStrategy,\n    ::Executors.InitData;\n    cols,\n    timeframe\n)\n\n\nThis function initializes the data for a real-time strategy s. The initialization is performed for the specified columns cols and uses the provided timeframe timeframe. After the initialization, the updated_at! function is called to update the timestamp for the updated columns.\n\n\n\n\n\nCalled on each timestep iteration, possible multiple times. Receives:\n\ncurrent_time: the current timestamp to evaluate (the current candle would be current_time - timeframe).\nctx: The context of the executor.\n\ncall!(_::Strategy, current_time::Dates.DateTime, ctx)\n\n\n\n\n\n\nCalled to construct the strategy, should return the strategy instance.\n\ncall!(_::Type{<:Strategy}, cfg, _::LoadStrategy)\n\n\n\n\n\n\nCalled at the end of the reset! function applied to a strategy.\n\ncall!(_::Strategy, _::ResetStrategy)\n\n\n\n\n\n\nHow much lookback data the strategy needs. \n\ncall!(s::Strategy, _::WarmupPeriod) -> Any\n\n\n\n\n\n\nWhen an order is canceled the strategy is pinged with an order error. \n\ncall!(\n    s::Strategy,\n    ::OrderTypes.Order,\n    err::OrderTypes.OrderError,\n    ::Instances.AssetInstance;\n    kwargs...\n) -> Any\n\n\n\n\n\n\nMarket symbols that populate the strategy universe\n\n\n\n\n\nCalled before the strategy is started. \n\ncall!(_::Strategy, _::StartStrategy)\n\n\n\n\n\n\nCalled after the strategy is stopped. \n\ncall!(_::Strategy, _::StopStrategy)\n\n\n\n\n\n\nCreates a simulated limit order.\n\ncall!(\n    s::SimStrategy{N, <:ExchangeID, NoMargin, C} where {N, C},\n    ai,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.LimitOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    kwargs...\n)\n\n\nThe function call! is responsible for creating a simulated limit order. It creates the order using create_sim_limit_order, checks if the order is not nothing, and then calls limitorder_ifprice!. The parameters include a strategy s, an asset ai, and a type t. The function also accepts an amount and additional arguments kwargs....\n\n\n\n\n\nCreates a simulated market order.\n\ncall!(\n    s::SimStrategy{N, <:ExchangeID, NoMargin, C} where {N, C},\n    ai,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.MarketOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    date,\n    kwargs...\n)\n\n\nThe function call! creates a simulated market order using create_sim_market_order. It checks if the order is not nothing, and then calls marketorder!. Parameters include a strategy s, an asset ai, a type t, an amount and a date. Additional arguments can be passed through kwargs....\n\n\n\n\n\nCancel orders for a specific asset instance.\n\ncall!(\n    s::Strategy{<:Union{Misc.Paper, Misc.Sim}},\n    ai::Instances.AssetInstance,\n    ::Executors.CancelOrders;\n    t,\n    kwargs...\n) -> Bool\n\n\nThe function call! cancels all orders for a specific asset instance ai. It iterates over the orders of the asset and cancels each one using cancel!. Parameters include a strategy s, an asset instance ai, and a type t which defaults to BuyOrSell. Additional arguments can be passed through kwargs....\n\n\n\n\n\nAfter a position was updated from a trade.\n\ncall!(\n    _::Strategy{X, N, <:ExchangeID, <:Misc.WithMargin, C} where {X<:Misc.ExecMode, N, C},\n    ai,\n    trade::OrderTypes.Trade,\n    _::Instances.Position,\n    _::Instances.PositionChange\n)\n\n\nThis function is called after a position is updated due to a trade. It takes in a MarginStrategy, ai, trade, Position, and PositionChange as arguments. The function does not return any value.\n\n\n\n\n\nAfter a position update from a candle.\n\ncall!(\n    _::Strategy{X, N, <:ExchangeID, <:Misc.WithMargin, C} where {X<:Misc.ExecMode, N, C},\n    ai,\n    date::Dates.DateTime,\n    _::Instances.Position,\n    _::Instances.PositionUpdate\n)\n\n\nThis function is called after a position is updated from a candle. It provides the necessary functionality for handling position updates in response to candle data.\n\n\n\n\n\nCreates a simulated limit order, updating a levarged position.\n\n\n\n\n\n\"Creates a simulated market order, updating a levarged position.\n\nwarning: Protections\nUsually an exchange checks before executing a trade if right after the trade the position would be liquidated, and would prevent you to do such trade, however we always check after the trade, and liquidate accordingly, this is pessimistic since we can't ensure that all exchanges have such protections in place.\n\n\n\n\n\nCloses a leveraged position.\n\n\n\n\n\nCloses all strategy positions\n\n\n\n\n\nUpdate position leverage. Returns true if the update was successful, false otherwise.\n\nThe leverage is not updated when the position has pending orders or is open (and it will return false in such cases.)\n\n\n\n\n\nWatchers are not used in SimMode.\n\n\n\n\n\nData should be pre initialized in SimMode.\n\n\n\n\n\nData should be pre initialized in SimMode.\n\n\n\n\n\nData should be pre initialized in SimMode.\n\n\n\n\n\nInitialize data for each asset in the strategy.\n\ncall!(\n    f::Function,\n    s::SimStrategy,\n    ::Executors.InitData;\n    cols,\n    timeframe\n)\n\n\nThis function initializes data for each asset in the strategy by retrieving the OHLCV data and setting the specified columns.\n\n\n\n\n\nCreates a paper market order.\n\ncall!(\n    s::Strategy{Misc.Paper, N, <:ExchangeID, NoMargin, C} where {N, C},\n    ai,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.MarketOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    date,\n    price,\n    kwargs...\n)\n\n\nThe function creates a paper market order for a given strategy and asset.  It specifies the amount of the order and the type of order (e.g., limit order, immediate order).\n\n\n\n\n\nCreates a simulated limit order.\n\ncall!(\n    s::Strategy{Misc.Paper, N, <:ExchangeID, NoMargin, C} where {N, C},\n    ai,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.LimitOrderType}};\n    amount,\n    date,\n    kwargs...\n)\n\n\nThe function creates a simulated limit order for a given strategy and asset. It specifies the amount of the order and the date.  Additional keyword arguments can be passed.\n\n\n\n\n\nCreates a paper market order, updating a leveraged position.\n\ncall!(\n    s::Strategy{Misc.Paper, N, <:ExchangeID, Isolated, C} where {N, C},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.MarketOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    date,\n    price,\n    kwargs...\n)\n\n\nThe function creates a paper market order for a given strategy, asset, and order type.  It specifies the amount and date of the order.  Additional keyword arguments can be passed.\n\n\n\n\n\nCreates a simulated limit order.\n\ncall!(\n    s::Strategy{Misc.Paper, N, <:ExchangeID, Isolated, C} where {N, C},\n    ai,\n    t::Type{<:OrderTypes.Order{<:OrderTypes.LimitOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}};\n    amount,\n    date,\n    kwargs...\n)\n\n\nThe function creates a simulated limit order for a given strategy, asset, and order type. It specifies the amount and date of the order.  Additional keyword arguments can be passed.\n\n\n\n\n\nCloses positions for a live margin strategy.\n\ncall!(\n    s::RTStrategy{var\"#s1941\", N, <:ExchangeID, <:Misc.WithMargin, C} where {var\"#s1941\"<:Union{Misc.Live, Misc.Paper}, N, C},\n    bp::OrderTypes.ByPos,\n    date,\n    ::Instances.PositionClose;\n    kwargs...\n)\n\n\nInitiates asynchronous position closing for each asset instance in the strategy's universe. \n\n\n\n\n\nReturns Optim.ContextSpace for backtesting\n\ncall!(_::Strategy, _::Executors.OptSetup)\n\n\nThe ctx field (Executors.Context) specifies the backtest time period, while bounds is a tuple of (lower, upper) bounds for the optimization parameters.\n\n\n\n\n\nApplies parameters to strategy before backtest\n\ncall!(_::Strategy, params, _::Executors.OptRun)\n\n\n\n\n\n\nIndicates if the optimization is a minimization problem.\n\ncall!(_::Strategy, _::Executors.OptMinimize) -> Bool\n\n\n\n\n\n\nInitializes warmup attributes for a strategy.\n\ncall!(\n    s::Strategy,\n    ::InitSimWarmup;\n    timeout,\n    warmup_period\n) -> Any\n\n\n\n\n\n\nInitiates the warmup process for a real-time strategy instance.\n\ncall!(\n    cb::Function,\n    s::RTStrategy,\n    ai::Instances.AssetInstance,\n    ats::Dates.DateTime,\n    ::SimWarmup;\n    n_candles\n)\n\n\nIf warmup has not been previously completed for the given asset instance, it performs the necessary preparations.\n\n\n\n\n\nInitiates the warmup process for all assets in the universe for a simulation strategy.\n\ncall!(cb::Function, s::SimStrategy, ::SimWarmup; n_candles)\n\n\nRuns warmup simulation on all assets in the strategy's universe simultaneously.\n\n\n\n\n\nInitiates the warmup process for all assets in the universe for a real-time strategy.\n\ncall!(\n    cb::Function,\n    s::RTStrategy,\n    ats::Dates.DateTime,\n    ::SimWarmup;\n    n_candles\n)\n\n\nRuns warmup simulation on all assets in the strategy's universe simultaneously.\n\n\n\n\n\n","category":"function"},{"location":"strategy/#Removing-a-strategy","page":"Strategy Development","title":"Removing a strategy","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"The function remove_strategy allows to discard a strategy by its name. It will delete the julia file or the project directory and optionally the config entry.","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"julia> Planar.remove_strategy(\"MyNewStrategy\")\nReally delete strategy located at /run/media/fra/stateful-1/dev/Planar.jl/user/strategies/MyNewStrategy? [n]/y: y\n[ Info: Strategy removed\nRemove user config entry MyNewStrategy? [n]/y: y","category":"page"},{"location":"strategy/#Advanced-Strategy-Examples","page":"Strategy Development","title":"Advanced Strategy Examples","text":"","category":"section"},{"location":"strategy/#Multi-Timeframe-Strategy","page":"Strategy Development","title":"Multi-Timeframe Strategy","text":"","category":"section"},{"location":"strategy/#Portfolio-Rebalancing-Strategy","page":"Strategy Development","title":"Portfolio Rebalancing Strategy","text":"","category":"section"},{"location":"strategy/#Advanced-Optimization-Strategy","page":"Strategy Development","title":"Advanced Optimization Strategy","text":"","category":"section"},{"location":"strategy/#Strategy-Setup-and-Loading-(Preserved)","page":"Strategy Development","title":"Strategy Setup and Loading (Preserved)","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Strategy examples can be found in the user/strategies folder. Some strategies are single files like Example.jl while strategies like BollingerBands or ExampleMargin are project-based.","category":"page"},{"location":"strategy/#Project-Based-Strategies","page":"Strategy Development","title":"Project-Based Strategies","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"For complex strategies, use the project structure:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"user/strategies/MyStrategy/\n├── Project.toml          # Package definition and dependencies\n├── Manifest.toml         # Locked dependency versions\n├── src/\n│   ├── MyStrategy.jl     # Main strategy module\n│   ├── indicators.jl     # Custom indicators\n│   ├── utils.jl         # Utility functions\n│   └── risk.jl          # Risk management\n└── test/\n    └── test_strategy.jl  # Strategy tests","category":"page"},{"location":"strategy/#Strategy-Configuration","page":"Strategy Development","title":"Strategy Configuration","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Strategies can be configured through user/[planar.toml](config.md#configuration-file):","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"[strategies.MyStrategy]\nexchange = \"binance\"\nmargin = \"NoMargin\"\ntimeframe = \"1h\"\ninitial_cash = 10000.0\nsandbox = true\n\n[strategies.MyStrategy.attrs]\ncustom_param1 = 1.5\ncustom_param2 = \"value\"","category":"page"},{"location":"strategy/#Strategy-Examples","page":"Strategy Development","title":"Strategy Examples","text":"","category":"section"},{"location":"strategy/#Simple-Moving-Average-Strategy","page":"Strategy Development","title":"Simple Moving Average Strategy","text":"","category":"section"},{"location":"strategy/#Margin-Trading-Strategy","page":"Strategy Development","title":"Margin Trading Strategy","text":"","category":"section"},{"location":"strategy/#Best-Practices","page":"Strategy Development","title":"Best Practices","text":"","category":"section"},{"location":"strategy/#Code-Organization","page":"Strategy Development","title":"Code Organization","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Module Constants: Define strategy metadata at the top\nEnvironment Macros: Use appropriate environment macros\nParameter Management: Use strategy attributes for parameters","category":"page"},{"location":"strategy/#Error-Handling","page":"Strategy Development","title":"Error Handling","text":"","category":"section"},{"location":"strategy/#Performance-Optimization","page":"Strategy Development","title":"Performance Optimization","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Minimize Allocations: Reuse data structures when possible\nBatch Operations: Group similar operations together\nConditional Logic: Use early returns to avoid unnecessary computations","category":"page"},{"location":"strategy/#Testing-and-Validation","page":"Strategy Development","title":"Testing and Validation","text":"","category":"section"},{"location":"strategy/#Resizeable-Universe","page":"Strategy Development","title":"Resizeable Universe","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"The universe (s.universe) is backed by a DataFrame (s.universe.data). It is possible to add and remove assets from the universe during runtime, although this feature is not extensively tested.","category":"page"},{"location":"strategy/#Dynamic-Asset-Management","page":"Strategy Development","title":"Dynamic Asset Management","text":"","category":"section"},{"location":"strategy/#Troubleshooting-and-Debugging","page":"Strategy Development","title":"Troubleshooting and Debugging","text":"","category":"section"},{"location":"strategy/#Common-Strategy-Issues","page":"Strategy Development","title":"Common Strategy Issues","text":"","category":"section"},{"location":"strategy/#1.-Strategy-Loading-Problems","page":"Strategy Development","title":"1. Strategy Loading Problems","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Issue: Strategy fails to load with module not found error","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Solutions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Verify the strategy file exists in user/strategies/\nCheck that the module name matches the file name\nEnsure the strategy module is properly defined:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Issue: Strategy loads but crashes during initialization","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Solutions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Add the @strategyenv! macro to import required types\nVerify all required constants are defined:","category":"page"},{"location":"strategy/#2.-Data-Access-Issues","page":"Strategy Development","title":"2. Data Access Issues","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Issue: OHLCV data is empty or missing","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Solutions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Check data availability for your timeframe and date range\nVerify exchange supports the requested markets\nEnsure sufficient warmup period:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Issue: Inconsistent data between timeframes","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Solutions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Use available() function to get valid timestamps\nHandle missing data gracefully:","category":"page"},{"location":"strategy/#3.-Order-Execution-Problems","page":"Strategy Development","title":"3. Order Execution Problems","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Issue: Orders are rejected with insufficient funds","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Solutions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Check available cash before placing orders:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Issue: Orders fail due to minimum size requirements","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Solutions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Check exchange limits before placing orders:","category":"page"},{"location":"strategy/#4.-Margin-Trading-Issues","page":"Strategy Development","title":"4. Margin Trading Issues","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Issue: Leverage updates fail","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Solutions:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Check exchange-specific leverage limits\nUpdate leverage before placing orders:","category":"page"},{"location":"strategy/#Debugging-Techniques","page":"Strategy Development","title":"Debugging Techniques","text":"","category":"section"},{"location":"strategy/#1.-Logging-and-Monitoring","page":"Strategy Development","title":"1. Logging and Monitoring","text":"","category":"section"},{"location":"strategy/#2.-Strategy-State-Inspection","page":"Strategy Development","title":"2. Strategy State Inspection","text":"","category":"section"},{"location":"strategy/#3.-Performance-Profiling","page":"Strategy Development","title":"3. Performance Profiling","text":"","category":"section"},{"location":"strategy/#4.-Unit-Testing-Strategies","page":"Strategy Development","title":"4. Unit Testing Strategies","text":"","category":"section"},{"location":"strategy/#Error-Recovery-Patterns","page":"Strategy Development","title":"Error Recovery Patterns","text":"","category":"section"},{"location":"strategy/#1.-Graceful-Degradation","page":"Strategy Development","title":"1. Graceful Degradation","text":"","category":"section"},{"location":"strategy/#2.-Circuit-Breaker-Pattern","page":"Strategy Development","title":"2. Circuit Breaker Pattern","text":"","category":"section"},{"location":"strategy/#Performance-Optimization-Tips","page":"Strategy Development","title":"Performance Optimization Tips","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Minimize Data Access: Cache frequently used values\nBatch Operations: Group similar operations together\nUse Type Stability: Ensure functions return consistent types\nProfile Regularly: Use Julia's profiling tools to identify bottlenecks\nMemory Management: Avoid unnecessary allocations in hot paths","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"der Management and Risk Control","category":"page"},{"location":"strategy/#Order-Types-and-Execution","page":"Strategy Development","title":"Order Types and Execution","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Planar supports various order types for different trading scenarios. Understanding when and how to use each type is crucial for effective strategy implementation.","category":"page"},{"location":"strategy/#Market-Orders","page":"Strategy Development","title":"Market Orders","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Market orders execute immediately at the current market price:","category":"page"},{"location":"strategy/#Limit-Orders","page":"Strategy Development","title":"Limit Orders","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Limit orders execute only at a specified price or better:","category":"page"},{"location":"strategy/#Stop-Orders","page":"Strategy Development","title":"Stop Orders","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Stop orders become market orders when a trigger price is reached:","category":"page"},{"location":"strategy/#Order-Management-Patterns","page":"Strategy Development","title":"Order Management Patterns","text":"","category":"section"},{"location":"strategy/#Position-Management-for-Margin-Trading","page":"Strategy Development","title":"Position Management for Margin Trading","text":"","category":"section"},{"location":"strategy/#Position-Types-and-States","page":"Strategy Development","title":"Position Types and States","text":"","category":"section"},{"location":"strategy/#Leverage-Management","page":"Strategy Development","title":"Leverage Management","text":"","category":"section"},{"location":"strategy/#Position-Sizing-Strategies","page":"Strategy Development","title":"Position Sizing Strategies","text":"","category":"section"},{"location":"strategy/#Risk-Management-Patterns-2","page":"Strategy Development","title":"Risk Management Patterns","text":"","category":"section"},{"location":"strategy/#Stop-Loss-Strategies","page":"Strategy Development","title":"Stop Loss Strategies","text":"","category":"section"},{"location":"strategy/#Take-Profit-Strategies","page":"Strategy Development","title":"Take Profit Strategies","text":"","category":"section"},{"location":"strategy/#Portfolio-Risk-Management","page":"Strategy Development","title":"Portfolio Risk Management","text":"","category":"section"},{"location":"strategy/#Risk-Metrics-and-Monitoring","page":"Strategy Development","title":"Risk Metrics and Monitoring","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"This comprehensive order management and risk documentation provides practical patterns for implementing robust trading strategies with proper risk controls.","category":"page"},{"location":"strategy/#Se","page":"Strategy Development","title":"Se","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"e Also","category":"page"},{"location":"strategy/#Core-Documentation","page":"Strategy Development","title":"Core Documentation","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Data Management - Working with OHLCV data and storage\nExecution Modes - Understanding Sim, Paper, and Live modes\nOptimization - Parameter optimization and backtesting\nPlotting - Visualizing strategy performance and results","category":"page"},{"location":"strategy/#Advanced-Topics","page":"Strategy Development","title":"Advanced Topics","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Customization Guide - Extending Planar's functionality\nCustom Orders - Implementing custom order types\nExchange Extensions - Adding new exchange support","category":"page"},{"location":"strategy/#API-Reference","page":"Strategy Development","title":"API Reference","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Strategy API - Complete strategy function reference\nEngine API - Core engine functions\nStrategy Tools - Utility functions for strategies\nStrategy Stats - Performance analysis functions","category":"page"},{"location":"strategy/#Support","page":"Strategy Development","title":"Support","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Troubleshooting - Common strategy development issues\nCommunity - Getting help and sharing strategies","category":"page"},{"location":"strategy/#Next-Steps","page":"Strategy Development","title":"Next Steps","text":"","category":"section"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"After mastering strategy development:","category":"page"},{"location":"strategy/","page":"Strategy Development","title":"Strategy Development","text":"Optimize Your Strategies - Learn parameter optimization techniques\nVisualize Performance - Create compelling performance charts\nDeploy Live - Move from backtesting to live trading\nExtend Functionality - Customize Planar for your needs","category":"page"},{"location":"API/strategies/#Strategies-API","page":"Strategies","title":"Strategies API","text":"","category":"section"},{"location":"API/strategies/","page":"Strategies","title":"Strategies","text":"The Strategies module provides the core framework for building and managing trading strategies in Planar. It includes the base Strategy type, execution interfaces, and essential functions for strategy development.","category":"page"},{"location":"API/strategies/#Overview","page":"Strategies","title":"Overview","text":"","category":"section"},{"location":"API/strategies/","page":"Strategies","title":"Strategies","text":"The Strategy type is the central component of the Planar framework. It encapsulates:","category":"page"},{"location":"API/strategies/","page":"Strategies","title":"Strategies","text":"Strategy configuration and parameters\nAsset universe and market data\nOrder management and execution state\nCash and position tracking\nExchange connectivity","category":"page"},{"location":"API/strategies/#Core-Types","page":"Strategies","title":"Core Types","text":"","category":"section"},{"location":"API/strategies/#Strategy-Types","page":"Strategies","title":"Strategy Types","text":"","category":"section"},{"location":"API/strategies/#Usage-Examples","page":"Strategies","title":"Usage Examples","text":"","category":"section"},{"location":"API/strategies/#Creating-a-Strategy","page":"Strategies","title":"Creating a Strategy","text":"","category":"section"},{"location":"API/strategies/#Accessing-Strategy-Information","page":"Strategies","title":"Accessing Strategy Information","text":"","category":"section"},{"location":"API/strategies/#Working-with-Assets","page":"Strategies","title":"Working with Assets","text":"","category":"section"},{"location":"API/strategies/#Strategy-Interface-Functions","page":"Strategies","title":"Strategy Interface Functions","text":"","category":"section"},{"location":"API/strategies/#Core-Interface","page":"Strategies","title":"Core Interface","text":"","category":"section"},{"location":"API/strategies/","page":"Strategies","title":"Strategies","text":"The strategy interface defines the main entry points that your strategy must implement:","category":"page"},{"location":"API/strategies/#Implementation-Example","page":"Strategies","title":"Implementation Example","text":"","category":"section"},{"location":"API/strategies/#Cash-and-Position-Management","page":"Strategies","title":"Cash and Position Management","text":"","category":"section"},{"location":"API/strategies/#Cash-Functions","page":"Strategies","title":"Cash Functions","text":"","category":"section"},{"location":"API/strategies/#Position-Information","page":"Strategies","title":"Position Information","text":"","category":"section"},{"location":"API/strategies/#Order-Management","page":"Strategies","title":"Order Management","text":"","category":"section"},{"location":"API/strategies/#Order-Access","page":"Strategies","title":"Order Access","text":"","category":"section"},{"location":"API/strategies/#Utility-Functions","page":"Strategies","title":"Utility Functions","text":"","category":"section"},{"location":"API/strategies/#Strategy-Identification","page":"Strategies","title":"Strategy Identification","text":"","category":"section"},{"location":"API/strategies/#Thread-Safety","page":"Strategies","title":"Thread Safety","text":"","category":"section"},{"location":"API/strategies/#Common-Patterns","page":"Strategies","title":"Common Patterns","text":"","category":"section"},{"location":"API/strategies/#Data-Loading-Pattern","page":"Strategies","title":"Data Loading Pattern","text":"","category":"section"},{"location":"API/strategies/#Error-Handling-Pattern","page":"Strategies","title":"Error Handling Pattern","text":"","category":"section"},{"location":"API/strategies/#Performance-Pattern","page":"Strategies","title":"Performance Pattern","text":"","category":"section"},{"location":"API/strategies/#Complete-API-Reference","page":"Strategies","title":"Complete API Reference","text":"","category":"section"},{"location":"API/strategies/#Strategies.STRATEGY_LOAD_CALLBACKS","page":"Strategies","title":"Strategies.STRATEGY_LOAD_CALLBACKS","text":"Functions that are called (with the strategy as argument) right after strategy construction.\n\n\n\n\n\n","category":"constant"},{"location":"API/strategies/#Core.Symbol-Tuple{Strategy}","page":"Strategies","title":"Core.Symbol","text":"Symbol representation of the strategy (name of the module).\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.AbstractStrategy","page":"Strategies","title":"Strategies.AbstractStrategy","text":"The base type for all strategies.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.BuyOrdersDict","page":"Strategies","title":"Strategies.BuyOrdersDict","text":"SortedDict of holding buy orders\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.BuyPriceTimeOrdering","page":"Strategies","title":"Strategies.BuyPriceTimeOrdering","text":"Ordering for buy orders (highest price first)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.CrossStrategy","page":"Strategies","title":"Strategies.CrossStrategy","text":"Cross margin strategy.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.ExchangeAsset","page":"Strategies","title":"Strategies.ExchangeAsset","text":"AssetInstance by ExchangeID\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.ExchangeBuyOrder","page":"Strategies","title":"Strategies.ExchangeBuyOrder","text":"BuyOrder by ExchangeID\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.ExchangeOrder","page":"Strategies","title":"Strategies.ExchangeOrder","text":"Order by ExchangeID\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.ExchangeSellOrder","page":"Strategies","title":"Strategies.ExchangeSellOrder","text":"SellOrder by ExchangeID\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.IsolatedStrategy","page":"Strategies","title":"Strategies.IsolatedStrategy","text":"Isolated margin strategy.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.LiveStrategy","page":"Strategies","title":"Strategies.LiveStrategy","text":"Live trading strategy.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.LoadStrategy","page":"Strategies","title":"Strategies.LoadStrategy","text":"call!(s::Strategy, ::LoadStrategy)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.MarginStrategy","page":"Strategies","title":"Strategies.MarginStrategy","text":"Strategy with isolated or cross margin.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.NoMarginStrategy","page":"Strategies","title":"Strategies.NoMarginStrategy","text":"Strategy with no margin at all.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.PaperStrategy","page":"Strategies","title":"Strategies.PaperStrategy","text":"Paper trading strategy.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.PriceTime","page":"Strategies","title":"Strategies.PriceTime","text":"PriceTime named tuple\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.RTStrategy","page":"Strategies","title":"Strategies.RTStrategy","text":"Real time strategy (Paper, Live).\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.ResetStrategy","page":"Strategies","title":"Strategies.ResetStrategy","text":"call!(s::Strategy, ::ResetStrategy)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.SellOrdersDict","page":"Strategies","title":"Strategies.SellOrdersDict","text":"SortedDict of holding sell orders\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.SellPriceTimeOrdering","page":"Strategies","title":"Strategies.SellPriceTimeOrdering","text":"Ordering for sell orders (lowest price first)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.SimStrategy","page":"Strategies","title":"Strategies.SimStrategy","text":"Simulation strategy.\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.StartStrategy","page":"Strategies","title":"Strategies.StartStrategy","text":"call!(s::Strategy, ::StartStrategy)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.StopStrategy","page":"Strategies","title":"Strategies.StopStrategy","text":"call!(s::Strategy, ::StopStrategy)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.Strategy","page":"Strategies","title":"Strategies.Strategy","text":"The strategy is the core type of the framework.\n\nself: The strategy module\nconfig: The Config the strategy was instantiated with\ntimeframe: The smallest timeframe the strategy uses\ncash: The quote currency used for trades\ncash_committed: Cash kept busy by pending orders\nbuyorders: Active buy orders\nsellorders: Active sell orders\nholdings: Assets with non zero balance\nuniverse: All the assets that the strategy knows about\nlock: A lock for thread safety\n\nThe strategy type is concrete according to:\n\nName (Symbol)\nExchange (ExchangeID), read from config\nQuote cash (Symbol), read from config\nMargin mode (MarginMode), read from config\nExecution mode (ExecMode), read from config\n\nConventions for strategy defined attributes:\n\nS: the strategy type.\nSC: the strategy type (exchange generic).\nTF: the smallest timeframe that the strategy uses\nDESCRIPTION: Name or short description for the strategy could be different from module name\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.Strategy-Tuple{Module, Misc.ExecMode, Misc.MarginMode, TimeFrames.TimeFrame, Exchange, Collections.AssetCollection}","page":"Strategies","title":"Strategies.Strategy","text":"Initializes a new Strategy object\n\nStrategy(\n    self::Module,\n    mode::Misc.ExecMode,\n    margin::Misc.MarginMode,\n    timeframe::TimeFrames.TimeFrame,\n    exc::Exchange,\n    uni::Collections.AssetCollection;\n    config\n)\n\n\nThis function takes a module, execution mode, margin mode, timeframe, exchange, and asset collection to create a new Strategy object.  It also accepts a config object to set specific parameters.  The function validates the universe of assets and the strategy's cash, sets the exchange, and initializes orders and holdings. \n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.StrategyMarkets","page":"Strategies","title":"Strategies.StrategyMarkets","text":"call!(s::Strategy, ::StrategyMarkets)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Strategies.WarmupPeriod","page":"Strategies","title":"Strategies.WarmupPeriod","text":"call!(s::Strategy, ::WarmupPeriod)\n\n\n\n\n\n","category":"type"},{"location":"API/strategies/#Base.count-Tuple{Strategy, Type{<:OrderTypes.OrderSide}}","page":"Strategies","title":"Base.count","text":"Counts the number of orders for a given order side in a strategy.\n\ncount(\n    s::Strategy,\n    side::Type{<:OrderTypes.OrderSide}\n) -> Int64\n\n\nThis function iterates over the orders of a given side (Buy or Sell) in a strategy. It increments a counter by the length of the orders. The function returns the total count of orders.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Base.fill!-Tuple{Strategy}","page":"Strategies","title":"Base.fill!","text":"Fills the strategy with the specified timeframes.\n\nfill!(s::Strategy; kwargs...)\n\n\nThis function fills the strategy with the specified timeframes. It first creates a set of timeframes and adds the strategy's timeframe, the timeframes from the strategy's configuration, and the timeframe attribute of the strategy. It then fills the universe of the strategy with these timeframes.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Base.getproperty-Tuple{Strategy, String}","page":"Strategies","title":"Base.getproperty","text":"Retrieves a property of a strategy using a string key.\n\ngetproperty(s::Strategy, sym::String) -> Any\n\n\nThis function first gets the universe of the strategy and then retrieves the property using the string key.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Base.getproperty-Tuple{Strategy, Symbol}","page":"Strategies","title":"Base.getproperty","text":"Retrieves a property of a strategy.\n\ngetproperty(s::Strategy, sym::Symbol) -> Any\n\n\nThis function checks if the property is directly on the strategy or the strategy's configuration. If the property is not found, it checks the configuration's attributes.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Base.nameof-Tuple{Strategy}","page":"Strategies","title":"Base.nameof","text":"The name of the strategy module.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Base.nameof-Union{Tuple{Type{<:Strategy{<:Misc.ExecMode, N}}}, Tuple{N}} where N<:Symbol","page":"Strategies","title":"Base.nameof","text":"The name of the strategy module.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Base.similar-Tuple{Strategy}","page":"Strategies","title":"Base.similar","text":"Creates a similar strategy with optional changes.\n\nsimilar(\n    s::Strategy;\n    mode,\n    timeframe,\n    exc\n) -> Union{Strategy{var\"#s179\", _A, _B, <:Misc.MarginMode{H}} where H<:Misc.HedgedMode, Strategy{var\"#s179\", _A, _B, M} where {H<:Misc.HedgedMode, M<:Misc.MarginMode{H}}} where {var\"#s179\"<:Misc.ExecMode, _A, _B<:ExchangeID}\n\n\nThe similar function creates a new strategy that is similar to the given one. It allows for optional changes to the mode, timeframe, and exchange. The new strategy is created with the same self, margin mode, and universe as the original, but with a copy of the original's configuration.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Collections.iscashable-Tuple{Strategy}","page":"Strategies","title":"Collections.iscashable","text":"Checks if the strategy's cash matches its universe.\n\niscashable(s::Strategy) -> Bool\n\n\nThe iscashable function checks if the cash of the strategy is cashable within the universe of the strategy. It returns true if the cash is cashable, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Data.candleat-Tuple{Instances.AssetInstance, Any, Any}","page":"Strategies","title":"Data.candleat","text":"Get the candle for the asset at date with timeframe tf.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#ExchangeTypes.exchange-Tuple{Strategy}","page":"Strategies","title":"ExchangeTypes.exchange","text":"Strategy exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Exchanges.marketsid-Union{Tuple{Type{<:S}}, Tuple{S}} where S<:Strategy","page":"Strategies","title":"Exchanges.marketsid","text":"Retrieves the market identifiers for a given strategy type.\n\nmarketsid(s::Type{<:S<:Strategy}) -> Any\n\n\nThe marketsid function invokes the call! function with the strategy type and StrategyMarkets() as arguments. This function is used to fetch the market identifiers associated with a specific strategy type.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Instruments.freecash-Tuple{Strategy}","page":"Strategies","title":"Instruments.freecash","text":"Cash that is not committed, and therefore free to use for new orders.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.attrs-Tuple{Strategy}","page":"Strategies","title":"Misc.attrs","text":"The strategy Config attributes.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Strategy, Dates.DateTime, Any}","page":"Strategies","title":"Misc.call!","text":"Called on each timestep iteration, possible multiple times. Receives:\n\ncurrent_time: the current timestamp to evaluate (the current candle would be current_time - timeframe).\nctx: The context of the executor.\n\ncall!(_::Strategy, current_time::Dates.DateTime, ctx)\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Strategy, OrderTypes.Order, OrderTypes.OrderError, Instances.AssetInstance}","page":"Strategies","title":"Misc.call!","text":"When an order is canceled the strategy is pinged with an order error. \n\ncall!(\n    s::Strategy,\n    ::OrderTypes.Order,\n    err::OrderTypes.OrderError,\n    ::Instances.AssetInstance;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Strategy, ResetStrategy}","page":"Strategies","title":"Misc.call!","text":"Called at the end of the reset! function applied to a strategy.\n\ncall!(_::Strategy, _::ResetStrategy)\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Strategy, StartStrategy}","page":"Strategies","title":"Misc.call!","text":"Called before the strategy is started. \n\ncall!(_::Strategy, _::StartStrategy)\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Strategy, StopStrategy}","page":"Strategies","title":"Misc.call!","text":"Called after the strategy is stopped. \n\ncall!(_::Strategy, _::StopStrategy)\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Strategy, WarmupPeriod}","page":"Strategies","title":"Misc.call!","text":"How much lookback data the strategy needs. \n\ncall!(s::Strategy, _::WarmupPeriod) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Type{<:Strategy}, Any, LoadStrategy}","page":"Strategies","title":"Misc.call!","text":"Called to construct the strategy, should return the strategy instance.\n\ncall!(_::Type{<:Strategy}, cfg, _::LoadStrategy)\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.call!-Tuple{Type{<:Strategy}, StrategyMarkets}","page":"Strategies","title":"Misc.call!","text":"Market symbols that populate the strategy universe\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.execmode-Union{Tuple{Union{Type{S}, S}}, Tuple{S}, Tuple{M}} where {M<:Misc.ExecMode, S<:(Strategy{M})}","page":"Strategies","title":"Misc.execmode","text":"Returns the strategy execution mode.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.marginmode-Union{Tuple{Union{Type{<:T}, T}}, Tuple{T}, Tuple{M}} where {M<:Misc.MarginMode, T<:(Strategy{X, N, E, M} where {X, N, E})}","page":"Strategies","title":"Misc.marginmode","text":"Get the strategy margin mode.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Misc.reset!","page":"Strategies","title":"Misc.reset!","text":"Resets the state of a strategy.\n\nreset!(s::Strategy)\nreset!(s::Strategy, config)\n\n\nThe reset! function is used to reset the state of a given strategy. It empties the buy and sell orders, resets the holdings and assets, and optionally re-applies the strategy configuration defaults. If the strategy is currently running, the reset operation is aborted with a warning.\n\n\n\n\n\n","category":"function"},{"location":"API/strategies/#Strategies._assetval-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any, Any, Any}","page":"Strategies","title":"Strategies._assetval","text":"Calculates the asset value for both long and short positions.\n\n_assetval(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    n_holdings,\n    min_hold,\n    max_hold;\n    price\n)\n\n\nThis function iterates over both long and short positions. If the asset instance for a position is not zero, it increments the number of holdings and calculates the value of the asset for the position at the current price. It then updates the minimum and maximum holdings using the _mmh function. The function returns the updated number of holdings, minimum holdings, and maximum holdings.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._assetval-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, Any, Any, Any}","page":"Strategies","title":"Strategies._assetval","text":"Calculates the asset value for a NoMarginInstance.\n\n_assetval(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin},\n    n_holdings,\n    min_hold,\n    max_hold;\n    price\n)\n\n\nThis function checks if the cash of the NoMarginInstance is not zero. If it's not, it increments the number of holdings and calculates the value of the asset at the current price. It then updates the minimum and maximum holdings using the _mmh function. The function returns the updated number of holdings, minimum holdings, and maximum holdings.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._defined_marginmode-Tuple{Any}","page":"Strategies","title":"Strategies._defined_marginmode","text":"Determines the margin mode of a module.\n\n_defined_marginmode(mod) -> Any\n\n\nThis function attempts to determine the margin mode of a given module. It first tries to access the S property of the module to get the margin mode. If this fails, it then tries to access the SC property of the module.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._file-Tuple{Any, Any, Any}","page":"Strategies","title":"Strategies._file","text":"Determines the file path for a strategy source.\n\n_file(src, cfg, is_project) -> Any\n\n\nThis function determines the file path for a strategy source based on whether it is a project or not. If it is a project, it constructs the file path relative to the configuration path. If it is not a project, it retrieves the source file from the strategy's configuration or defaults to a predefined path. In case the file path is not found, it throws an ArgumentError with a detailed message.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._include_projectless-Tuple{Any, Any}","page":"Strategies","title":"Strategies._include_projectless","text":"Retrieves the source file for a strategy without a project.\n\nThe _include_projectless function retrieves the source file for a strategy that does not have a project. It checks the sources attribute of the strategy's configuration.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._mmh-NTuple{4, Any}","page":"Strategies","title":"Strategies._mmh","text":"Updates the minimum and maximum holdings based on the provided value.\n\n_mmh(ai, val, min_hold, max_hold) -> Tuple{Any, Any}\n\n\nGiven an asset instance, a value, and the current minimum and maximum holdings, this function updates the minimum and maximum holdings if the provided value is less than the current minimum or greater than the current maximum. It returns the updated minimum and maximum holdings.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._no_inv_contracts-Tuple{Exchange, Any}","page":"Strategies","title":"Strategies._no_inv_contracts","text":"Checks for inverse contracts in an exchange.\n\n_no_inv_contracts(exc::Exchange, uni)\n\n\nThis function checks for the presence of inverse contracts in a given exchange. If any inverse contracts are found, it asserts an error.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._strat_load_checks-Tuple{Strategy, Misc.Config}","page":"Strategies","title":"Strategies._strat_load_checks","text":"Performs checks on a loaded strategy.\n\n_strat_load_checks(\n    s::Strategy,\n    config::Misc.Config\n) -> Strategy\n\n\nThis function performs checks on a loaded strategy. It asserts that the margin mode and execution mode of the strategy match the configuration. It also sets the verbose property of the strategy to false.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._strategy_config-Tuple{Any, Any}","page":"Strategies","title":"Strategies._strategy_config","text":"Determines the configuration for a strategy.\n\n_strategy_config(src, path; load, config_args...)\n\n\nThis function determines the configuration for a strategy based on the source and path. If the strategy is to be loaded, it attempts to load the strategy cache. If the cache does not exist or is not a valid configuration, it creates a new configuration.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies._strategy_type-Tuple{Any, Any}","page":"Strategies","title":"Strategies._strategy_type","text":"Determines the strategy type of a module.\n\n_strategy_type(mod, cfg) -> Any\n\n\nThis function determines the strategy type of a given module. It first tries to access the S property of the module to get the strategy type. If this fails, it then tries to access the SC property of the module. The function also checks if the exchange is specified in the strategy or in the configuration.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.asset_bysym","page":"Strategies","title":"Strategies.asset_bysym","text":"Retrieves an asset instance by symbol.\n\nasset_bysym(s::Strategy, sym) -> Any\nasset_bysym(s::Strategy, sym, dict_bysim) -> Any\n\n\nThis function retrieves an asset instance by symbol sym from a strategy s. It first checks if the asset instance is already cached in the strategy's attributes. If not, it retrieves the asset instance from the strategy's universe. If the asset instance is not found, it returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"API/strategies/#Strategies.assets-Tuple{Strategy}","page":"Strategies","title":"Strategies.assets","text":"Assets loaded by the strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.bare_load-Tuple{Module, Type, Misc.Config}","page":"Strategies","title":"Strategies.bare_load","text":"Loads a strategy without default settings.\n\nbare_load(\n    mod::Module,\n    t::Type,\n    config::Misc.Config\n) -> Union{Strategy{var\"#s179\", _A, _B, <:Misc.MarginMode{H}} where H<:Misc.HedgedMode, Strategy{var\"#s179\", _A, _B, M} where {H<:Misc.HedgedMode, M<:Misc.MarginMode{H}}} where {var\"#s179\"<:Misc.ExecMode, _A, _B<:ExchangeID}\n\n\nThis function loads a strategy without default settings. It invokes the call! function of the module with the strategy type and StrategyMarkets(). It then creates a new Strategy instance with the module, assets, and configuration. The sandbox property is set based on the mode of the configuration. Finally, it performs checks on the loaded strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.current_total","page":"Strategies","title":"Strategies.current_total","text":"Calculates the total value of a MarginStrategy with Paper.\n\ncurrent_total(\n    s::Strategy{Misc.Paper, N, <:ExchangeID, <:Misc.WithMargin, C} where {N, C};\n    ...\n) -> Any\ncurrent_total(\n    s::Strategy{Misc.Paper, N, <:ExchangeID, <:Misc.WithMargin, C} where {N, C},\n    price_func;\n    kwargs...\n) -> Any\n\n\nThis function calculates the total value of a MarginStrategy{Paper} by summing up the value of all holdings and cash. The value of each holding is calculated using a provided price function. The default price function used is lasttrade_price_func, which returns the closing price of the last trade.\n\n\n\n\n\n","category":"function"},{"location":"API/strategies/#Strategies.current_total-Tuple{SimStrategy{N, <:ExchangeID, <:Misc.WithMargin, C} where {N, C}}","page":"Strategies","title":"Strategies.current_total","text":"Calculates the total value of a MarginStrategy.\n\ncurrent_total(\n    s::SimStrategy{N, <:ExchangeID, <:Misc.WithMargin, C} where {N, C};\n    price_func,\n    kwargs...\n) -> Any\n\n\nThis function calculates the total value of a MarginStrategy by summing up the value of all holdings and cash. The value of each holding is calculated using a provided price function. The default price function used is lasttrade_price_func, which returns the closing price of the last trade.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.current_total-Tuple{SimStrategy{N, <:ExchangeID, NoMargin, C} where {N, C}}","page":"Strategies","title":"Strategies.current_total","text":"Calculates the total value of a NoMarginStrategy.\n\ncurrent_total(\n    s::SimStrategy{N, <:ExchangeID, NoMargin, C} where {N, C};\n    price_func,\n    kwargs...\n) -> Any\n\n\nThis function calculates the total value of a NoMarginStrategy by summing up the value of all holdings and cash. The value of each holding is calculated using a provided price function. The default price function used is lasttrade_price_func, which returns the closing price of the last trade.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.current_total-Tuple{Strategy{Misc.Paper, N, <:ExchangeID, NoMargin, C} where {N, C}}","page":"Strategies","title":"Strategies.current_total","text":"Calculates the total value of a NoMarginStrategy with Paper.\n\ncurrent_total(\n    s::Strategy{Misc.Paper, N, <:ExchangeID, NoMargin, C} where {N, C};\n    price_func,\n    kwargs...\n) -> Any\n\n\nThis function calculates the total value of a NoMarginStrategy{Paper} by summing up the value of all holdings and cash. The value of each holding is calculated using a provided price function. The default price function used is lasttrade_price_func, which returns the closing price of the last trade.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.default!-Tuple{Strategy}","page":"Strategies","title":"Strategies.default!","text":"Set strategy defaults.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.default_load-Tuple{Module, Type, Misc.Config}","page":"Strategies","title":"Strategies.default_load","text":"Loads a strategy with default settings.\n\ndefault_load(\n    mod::Module,\n    t::Type,\n    config::Misc.Config\n) -> Union{Strategy{var\"#s179\", _A, _B, <:Misc.MarginMode{H}} where H<:Misc.HedgedMode, Strategy{var\"#s179\", _A, _B, M} where {H<:Misc.HedgedMode, M<:Misc.MarginMode{H}}} where {var\"#s179\"<:Misc.ExecMode, _A, _B<:ExchangeID}\n\n\nThis function loads a strategy with default settings. It invokes the call! function of the module with the strategy type and StrategyMarkets(). It then creates a new Strategy instance with the module, assets, and configuration. The sandbox property is set based on the mode of the configuration. Finally, it performs checks on the loaded strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.find_path-Tuple{Any, Any}","page":"Strategies","title":"Strategies.find_path","text":"Finds the path of a given file.\n\nfind_path(file, cfg) -> Any\n\n\nThe find_path function checks various locations to find the path of a given file. It checks the current working directory, user directory, configuration directory, and project directory. If the file is not found, it raises an error.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.id-Tuple{Strategy}","page":"Strategies","title":"Strategies.id","text":"Returns a unique identifier for a strategy instance, concatenating the strategy name, exchange id, and account.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.instances-Tuple{Strategy}","page":"Strategies","title":"Strategies.instances","text":"Strategy assets instance.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.lasttrade_date","page":"Strategies","title":"Strategies.lasttrade_date","text":"Returns the date of the last trade for an asset instance.\n\nlasttrade_date(ai) -> Any\nlasttrade_date(ai, def) -> Any\n\n\nThis function returns the date of the last trade for an AssetInstance. If the history of the asset instance is empty, it returns the timestamp of the last candle.\n\n\n\n\n\n","category":"function"},{"location":"API/strategies/#Strategies.lasttrade_func-Tuple{Any}","page":"Strategies","title":"Strategies.lasttrade_func","text":"Returns a function for the last trade date of a strategy.\n\nlasttrade_func(s) -> Union{typeof(last), Returns}\n\n\nThis function returns a function that, when called, gives the date of the last trade for a Strategy. If there is no last trade, it returns the last function.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.lasttrade_price_func-Tuple{Any}","page":"Strategies","title":"Strategies.lasttrade_price_func","text":"The asset close price of the candle where the last trade was performed.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.logpath-Tuple{Strategy}","page":"Strategies","title":"Strategies.logpath","text":"Generates the path for strategy logs.\n\nlogpath(s::Strategy; name, path_nodes...) -> String\n\n\nThe logpath function generates a path for storing strategy logs. It takes the strategy and optional parameters for the name of the log file and additional path nodes. The function checks if the directory for the logs exists and creates it if necessary. It then returns the full path to the log file.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.logs-Tuple{Strategy}","page":"Strategies","title":"Strategies.logs","text":"Retrieves the logs for a strategy.\n\nlogs(s::Strategy) -> Vector{Any}\n\n\nThe logs function collects and returns all the logs associated with a given strategy. It fetches the logs from the directory specified in the strategy's path.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.minmax_holdings-Tuple{Strategy}","page":"Strategies","title":"Strategies.minmax_holdings","text":"Calculates the minimum and maximum holdings for a strategy.\n\nminmax_holdings(\n    s::Strategy\n) -> NamedTuple{(:min, :max, :count), <:Tuple{Tuple{Any, Any}, Tuple{Any, Any}, Int64}}\n\n\nThis function iterates over the holdings of a strategy. For each holding, it calculates the current price and updates the number of holdings, minimum holdings, and maximum holdings using the _assetval function. The function returns the minimum holdings, maximum holdings, and the count of holdings.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.reload!-Tuple{Strategy}","page":"Strategies","title":"Strategies.reload!","text":"Reloads OHLCV data for assets in the strategy universe.\n\nreload!(s::Strategy)\n\n\nThe reload! function empties the data for each asset instance in the strategy's universe and then loads new data. This is useful for refreshing the strategy's knowledge of the market state.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.save_strategy-Tuple{Any}","page":"Strategies","title":"Strategies.save_strategy","text":"Saves the state of a strategy.\n\nsave_strategy(s)\n\n\nThis function saves the state of a given strategy. It determines the cache path and saves the strategy state to this path.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.sizehint!-Tuple{Strategy}","page":"Strategies","title":"Strategies.sizehint!","text":"Keeps track of max allocated containers size for strategy and asset instances in the universe.\n\nsizehint!(s::Strategy)\n\n\nThis function keeps track of the maximum allocated containers size for strategy and asset instances in the universe. It updates the sizes of various containers based on the current state of the strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.strategy","page":"Strategies","title":"Strategies.strategy","text":"Loads a strategy from a source, module, or string.\n\nstrategy(src::Union{Module, String, Symbol}; ...) -> Any\nstrategy(\n    src::Union{Module, String, Symbol},\n    path::String;\n    load,\n    config_args...\n) -> Any\n\n\nThis function loads a strategy from a given source, module, or string. It first determines the configuration for the strategy based on the source and path. If the strategy is to be loaded, it attempts to load the strategy cache. Finally, it returns the loaded strategy.\n\n\n\n\n\n","category":"function"},{"location":"API/strategies/#Strategies.strategy!-Tuple{Module, Misc.Config}","page":"Strategies","title":"Strategies.strategy!","text":"Loads a strategy from a module.\n\nstrategy!(mod::Module, cfg::Misc.Config) -> Any\n\n\nThis function loads a strategy from a given module. It first checks and sets the mode and margin of the configuration if they are not set. It then determines the strategy type of the module and checks if the exchange is specified in the strategy or in the configuration. Finally, it tries to load the strategy with default settings, if it fails, it loads the strategy without default settings.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.strategy!-Tuple{Symbol, Misc.Config}","page":"Strategies","title":"Strategies.strategy!","text":"Loads a strategy from a symbol source.\n\nstrategy!(src::Symbol, cfg::Misc.Config) -> Any\n\n\nThis function loads a strategy from a given symbol source. It first determines the file path for the strategy source and checks if it is a project. If it is a project, it activates and instantiates the project. The function then includes the source file and uses it. If the source file is not defined in the parent module, it is evaluated and tracked for changes. Finally, the function returns the loaded strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.strategy-Tuple{}","page":"Strategies","title":"Strategies.strategy","text":"Returns the default strategy (BareStrat). \n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.strategy_cache_path-Tuple{}","page":"Strategies","title":"Strategies.strategy_cache_path","text":"Returns the path to the strategy cache.\n\nstrategy_cache_path() -> String\n\n\nThis function returns the path to the strategy cache. It checks if the path exists and creates it if it doesn't.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.throttle-Tuple{Strategy}","page":"Strategies","title":"Strategies.throttle","text":"The throttle attribute determines the strategy polling interval.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.trades_count-Tuple{Strategy, Val{:liquidations}}","page":"Strategies","title":"Strategies.trades_count","text":"Counts all trades recorded in the strategy universe.\n\ntrades_count(\n    s::Strategy,\n    _::Val{:liquidations}\n) -> NamedTuple{(:trades, :liquidations), <:Tuple{Any, Any}}\n\n\nThis function iterates over the universe of a strategy. For each asset instance in the universe, it increments a counter by the length of the asset instance's history. The function returns the total count of trades.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.trades_count-Tuple{Strategy, Val{:positions}}","page":"Strategies","title":"Strategies.trades_count","text":"Counts the number of long, short, and liquidation trades in the strategy universe.\n\ntrades_count(\n    s::Strategy,\n    _::Val{:positions}\n) -> NamedTuple{(:long, :short, :liquidations), <:Tuple{Any, Any, Any}}\n\n\nThis function iterates over the universe of a strategy. For each asset instance in the universe, it counts the number of long trades, short trades, and liquidation trades. The function returns the total count of long trades, short trades, and liquidation trades.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.trades_count-Tuple{Strategy}","page":"Strategies","title":"Strategies.trades_count","text":"All trades recorded in the strategy universe (includes liquidations).\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.tradesedge-Tuple{Strategy}","page":"Strategies","title":"Strategies.tradesedge","text":"Returns the first and last trade of any asset in the strategy universe.\n\ntradesedge(s::Strategy) -> Tuple{Any, Any}\n\n\nThis function returns the first and last trade of any asset in the strategy universe for a given Strategy. If there are no trades, it returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.tradesedge-Tuple{Type{Dates.DateTime}, Strategy}","page":"Strategies","title":"Strategies.tradesedge","text":"Returns the dates of the first and last trade present in the strategy.\n\ntradesedge(\n    _::Type{Dates.DateTime},\n    s::Strategy\n) -> Tuple{Any, Any}\n\n\nThis function returns the dates of the first and last trade of any asset in the strategy universe for a given Strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.tradesperiod-Tuple{Strategy}","page":"Strategies","title":"Strategies.tradesperiod","text":"Returns the recorded trading period from the trades history present in the strategy.\n\ntradesperiod(s::Strategy) -> Any\n\n\nThis function returns the recorded trading period from the trades history present in the strategy. It calculates the period by subtracting the start date from the stop date.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.tradesrange","page":"Strategies","title":"Strategies.tradesrange","text":"Returns a DateRange spanning the historical time period of the trades recorded by the strategy.\n\ntradesrange(s::Strategy; ...) -> TimeTicks.DateRange\ntradesrange(\n    s::Strategy,\n    tf;\n    start_pad,\n    stop_pad\n) -> TimeTicks.DateRange\n\n\nThis function returns a DateRange that spans the historical time period of the trades recorded by the strategy. It calculates the range by adding the start and stop pads to the edges of the trades.\n\n\n\n\n\n","category":"function"},{"location":"API/strategies/#Strategies.universe-Tuple{Strategy}","page":"Strategies","title":"Strategies.universe","text":"The strategy AssetCollection.\n\n\n\n\n\n","category":"method"},{"location":"API/strategies/#Strategies.@define_candle_func-Tuple{Any}","page":"Strategies","title":"Strategies.@define_candle_func","text":"Defines a set of functions for a given candle function.\n\nThis macro generates two functions for each candle function passed to it. The first function is for getting the candle data from an AssetInstance at a specific date. The second function is for getting the candle data from a Strategy at a specific date with a specified timeframe. The timeframe defaults to the strategy's timeframe if not provided.\n\n\n\n\n\n","category":"macro"},{"location":"API/strategies/#Strategies.@interface-Tuple{}","page":"Strategies","title":"Strategies.@interface","text":"Provides a common interface for strategy execution.\n\nThe interface macro imports the call! function from the Strategies module, the assets and exchange functions, and the call! function from the Executors module. This macro is used to provide a common interface for strategy execution.\n\n\n\n\n\n","category":"macro"},{"location":"API/strategies/#Strategies.@notfound-Tuple{Any}","page":"Strategies","title":"Strategies.@notfound","text":"Raises an error when a strategy is not found at a given path.  \n\n\n\n\n\n","category":"macro"},{"location":"API/strategies/#See-Also","page":"Strategies","title":"See Also","text":"","category":"section"},{"location":"API/strategies/","page":"Strategies","title":"Strategies","text":"Strategy Development Guide - Complete guide to building strategies\nEngine API - Core execution engine functions\nExecutors API - Order execution and management\nInstances API - Asset instance management\nGetting Started - Your first strategy tutorial","category":"page"},{"location":"#Build-Sophisticated-Trading-Strategies-with-Julia's-Power","page":"What is Planar?","title":"Build Sophisticated Trading Strategies with Julia's Power","text":"","category":"section"},{"location":"","page":"What is Planar?","title":"What is Planar?","text":"Perfect for: Advanced users, library developers, integration work   Total time: As needed | Difficulty: ⭐⭐⭐ | Prerequisites: Julia expertise   What you'll achieve: Deep integration, custom extensions, advanced configurations   Your journey: Get up and running with your first strategy in under 30 minutes   Your resources: Technical documentation and comprehensive references  ","category":"page"},{"location":"#Why-Choose-Planar?","page":"What is Planar?","title":"Why Choose Planar?","text":"","category":"section"},{"location":"","page":"What is Planar?","title":"What is Planar?","text":"⚡ High Performance: Julia's speed with sophisticated data handling via Zarr.jl\n🎯 Margin Trading Ready: Full support for isolated/cross margin with hedged positions\n📊 Professional Grade: Large dataset handling, lookahead bias prevention, and data integrity checks\n🔧 Infinitely Customizable: Julia's dispatch system enables easy extensions without monkey patching\n🚀 Zero Code Duplication: Same strategy code works across backtesting, paper, and live trading","category":"page"},{"location":"#What's-Next?","page":"What is Planar?","title":"What's Next?","text":"","category":"section"},{"location":"#First-Time-Here?","page":"What is Planar?","title":"👋 First Time Here?","text":"","category":"section"},{"location":"","page":"What is Planar?","title":"What is Planar?","text":"Recommended path: 📥 Installation → ⚡ Quick Start → 🎯 First Strategy","category":"page"},{"location":"#Returning-User?","page":"What is Planar?","title":"🔄 Returning User?","text":"","category":"section"},{"location":"","page":"What is Planar?","title":"What is Planar?","text":"Quick access: 📚 API Docs | 🔍 Search | 💬 Community","category":"page"},{"location":"#Ready-to-Build?","page":"What is Planar?","title":"🎯 Ready to Build?","text":"","category":"section"},{"location":"","page":"What is Planar?","title":"What is Planar?","text":"Jump to: 🏗️ Strategy Development | 📊 Examples | ⚙️ Configuration","category":"page"},{"location":"#Going-Live?","page":"What is Planar?","title":"🚀 Going Live?","text":"","category":"section"},{"location":"","page":"What is Planar?","title":"What is Planar?","text":"Essential: 🔄 Execution Modes | 🛡️ Risk Management | 📊 Monitoring","category":"page"},{"location":"resources/community/#Community-Resources","page":"Community Resources","title":"Community Resources","text":"","category":"section"},{"location":"resources/community/","page":"Community Resources","title":"Community Resources","text":"Connect with the Planar community for support and collaboration.","category":"page"},{"location":"resources/community/#See-Also","page":"Community Resources","title":"See Also","text":"","category":"section"},{"location":"resources/community/","page":"Community Resources","title":"Community Resources","text":"Getting Started\nTroubleshooting","category":"page"},{"location":"customizations/backtest/#See-Also","page":"Backtester Customization","title":"See Also","text":"","category":"section"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"Optimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management\nStrategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"customizations/backtest/#High-Frequency-Trading-(HFT)-Backtesting-Documentation","page":"Backtester Customization","title":"High-Frequency Trading (HFT) Backtesting Documentation","text":"","category":"section"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"The SimMode class, also known as the planar backtester, utilizes Open-High-Low-Close-Volume (OHLCV) data to simulate the execution of trades.","category":"page"},{"location":"customizations/backtest/#Reasons-to-Avoid-Tick-by-Tick-Backtesting","page":"Backtester Customization","title":"Reasons to Avoid Tick-by-Tick Backtesting","text":"","category":"section"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"Tick-by-tick backtesting may not be ideal due to several factors:","category":"page"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"Data Availability: Bid/ask tick data is often difficult to obtain and can be extremely voluminous, leading to increased resource consumption.\nData Reconstruction: Attempting to reconstruct order book data from trade history is speculative and can introduce significant bias.\nOverfitting Risks: High-detail backtesting can cause strategies to overfit to specific market maker behaviors, resulting in additional bias.\nComputational Costs: Intensive data and computational requirements may limit backtesting to a short time frame, insufficient for evaluating performance through different market conditions.","category":"page"},{"location":"customizations/backtest/#Implementing-HFT-Backtesting","page":"Backtester Customization","title":"Implementing HFT Backtesting","text":"","category":"section"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"Should you decide to implement HFT backtesting, consider the following two approaches:","category":"page"},{"location":"customizations/backtest/#[OHLCV](../guides/data-management.md#ohlcv-data)-Based-Approach","page":"Backtester Customization","title":"OHLCV-Based Approach","text":"","category":"section"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"A simpler method involves using the OHLCV model with extremely short-duration candles, such as 1s candles. The backtester processes time steps, typically using the strategy's base timeframe. By selecting a 1s timeframe and supplying the corresponding candles, you can achieve the desired time resolution for your backtest.","category":"page"},{"location":"customizations/backtest/#Tick-Based-Approach","page":"Backtester Customization","title":"Tick-Based Approach","text":"","category":"section"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"A more complex method requires developing a new execution mode, which could be named TickSimMode. This involves adapting the [backtest](../guides/execution-modes.md#simulation-mode)! function to handle tick data. While order creation logic may remain largely unchanged, functions like volumeat(ai, date) or openat, closeat, which currently fetch candle data, need to be modified. These functions should be tailored to compute the trade's actual price and volume from the tick data. This is analogous to customizing functions such as limitorder_ifprice! to work with tick data.\nIf you have access to full trades history, then you can reconstruct the orderbook (not implemented), and then the execution logic of PaperMode can be repurposed for the tick based backtester because it already operates with orderbook data.","category":"page"},{"location":"customizations/backtest/","page":"Backtester Customization","title":"Backtester Customization","text":"`example  Example of setting up a 1-second OHLCV backtest(guidesexecution-modesmdsimulation-mode)  Note Actual implementation details will vary based on your specific backtesting framework SimMode backtester = new SimMode(1s) backtesterloadData(pathto1s_candle_datacsv) backtesterrun() `","category":"page"},{"location":"types/#Types","page":"Type System","title":"Types","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"By learning the main types you get to know the building blocks to start composing your strategy for backtesting-mode) and/or live trading.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"The main type is the Strategy and it has its own strategy. Other important types follow.","category":"page"},{"location":"types/#Instruments","page":"Type System","title":"Instruments","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"Asset and Derivative are implementations of the AbstractAsset abstract type, defined in the Instruments package. They are usually obtained after parsing a string. Assets are typically spot pairs of base and quote currency, while Derivatives can be either swaps or contracts with settlement dates. These are \"static\" structures that do not query real-time data. The only information they hold is what can be parsed from the string itself.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"raw: The parsed substring.\nbc: Base currency.\nqc: Quote currency.\nfiat: true if the pair involves stable currencies, which is a static list defined in Instruments.fiatnames.\nleveraged: true if the base currency is a leveraged token, which is a type of token that usually involves periodic rebalancing. This should be considered as additional information and may be unreliable, as there is no standard for naming such assets.\nunleveraged_bc: If the pair is leveraged, this field returns the base currency without the \"multiplier\", allowing you to find similar markets of the same currency.","category":"page"},{"location":"types/#Derivatives-only-fields","page":"Type System","title":"Derivatives only fields","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"asset: The simpler Asset type, which forwards all its fields.\nsc: The settlement currency.\nid: A string that usually represents the settlement date.\nstrike: The strike price of the contract.\nkind: If it is an option, either Call or Put; otherwise, Unkn (unknown).","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"Asset can be conveniently constructed from the REPL using a\"BTC/USDT\" or d\"BTC/USDT:USDT\" for Derivatives.","category":"page"},{"location":"types/#Asset-instances","page":"Type System","title":"Asset instances","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"The AssetInstance is a rich type that refers to a particular asset. It is not parametrized over a specific asset, but rather over the AbstractAsset implementation, the exchanges, and the margin mode. An asset instance's information is always related to a specific exchanges. For example, cash(ai) should return the amount of cash available for that asset on the exchanges matching the instance's ExchangeID parameter.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"Here are the properties of the AssetInstance:","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"asset: The underlying implementation of AbstractAsset.\ndata: A SortedDict (smallest to largest) of OHLCV data. The key is a TimeFrame, and the value is a DataFrame with columns: timestamp, high, open, low, close, and volume.\nhistory: The trade history of the asset.\ncash: The amount of owned cash.\ncash_committed: The total amount of cash used by pending orders.\nexchange: The exchange of this asset instance.\nlongpos/shortpos: The Positions when the margin mode is activated. committed/cash refers to the position cash within margin trading.\nlimits/precision: See ccxt.\nfees: The trading fees as a decimal percentage for takers or makers.","category":"page"},{"location":"types/#Positions","page":"Type System","title":"Positions","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"When trading with margin, asset instances manage the status of long or short positions. In NotHedged mode (the default), you can only have either a long or short position open at any given time. Positions cash and cash_committed replace the asset instance's own fields.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"The following are the fields of the position struct:","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"status: Represents the current status of the position, which can be either open (PositionOpen()) or closed (PositionClose()).\nasset: Represents the derivative inherited from the asset instance.\ntimestamp: Indicates the last time the position was updated, such as when leverage, margin, or position size was modified.\nliquidation_price: Represents the price that would trigger a liquidation event.\nentryprice: Represents the average price of entry for the position.\nmaintenance_margin: Specifies the minimum margin required to avoid liquidation, measured in the quote currency.\ninitial_margin: Specifies the minimum margin required to open the position.\nadditional_margin: Represents the margin added on top of the initial margin.\nnotional: Indicates the value of the position with respect to the current price.\ncash/cash_committed: Represents the amount of cash held, which should always be equal to the number of contracts multiplied by the contract size.\n[leverage](guides/../guides/strategy-development.md#margin-modes): Specifies the leverage factor for the position.\nmin_size: Represents the same value as limits.cost.min of the asset instance.\nhedged: Indicates whether the margin mode is hedged (true) or not (false).\ntiers: Refers to a LeverageTiersDict defined in the Exchanges module. It is parsed from ccxt and is required to fetch the correct maintenance margin rate based on the position size.\nthis_tier: Represents the current tier of the position, which is updated when the notional value changes.","category":"page"},{"location":"types/#Orders","page":"Type System","title":"Orders","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"Order types parameters are:","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"OrderType{<:OrderSide}: The order type is an abstract type with the OrderSide parameter which can be Buy, Sell, or rarely Both. An OrderType can be, for example, a LimitOrderType or a MarketOrderType. These types are themselves supertypes for more specific orders like FOKOrderType and GTCOrderType. Creating order instances parametrized with different kinds should produce different behavior in order execution.\nAbstractAsset, ExchangeID: same as asset instances, orders refer to a kind of asset on a specific exchange.\nPositionSide: either Long or Short, the order refers to either a long or short position. Once the order is filled, its amount will be added to the cash of the matching position.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"Orders have mostly simple data fields:","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"asset: the AbstractAsset implementation that refers to it\nexc: the ExchangeID of the matching exchange\ndate: the date the order was opened\nprice: the target price of the order, for market orders, this would be the last price before the order was opened.\namount: the total amount requested by the order\nattrs: An unspecified named tuple that is used to hold custom data specific to order types.","category":"page"},{"location":"types/#Trades","page":"Type System","title":"Trades","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"Trades are \"atomic\" events. Orders are composed of one or more trades. They have the same type parameters as the orders. A trade for a specific order matches its exact type parameters.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"order: The order to which this trade belongs.\ndate: The execution date of the trade.\namount: The sum of the amounts of all the trades performed by an order is always below or equal to the order amount.\nprice: The price can differ from the order price depending on whether the order is a limit or market order.\nvalue: The product of the price and amount.\nfees: The fees of the trade, in the quote currency. They can be positive or negative (they are favorable if negative).\nsize: The product of the price and amount, plus or minus the fees.\nleverage: The leverage that was used for the order and with which the trade was executed. We currently do not allow changing the leverage while there are open orders. Therefore, trades that belong to the same order should have the same leverage. Without margin, the leverage should always be equal to 1.0.","category":"page"},{"location":"types/#Dates","page":"Type System","title":"Dates","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"The Julia main Dates package is never imported directly. It is instead exported by the package TimeTicks, which, among many utility functions, overrides the now function to always use the UTC timezone.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"A very important type is the TimeFrame type, which defines a segment of time. Most of the time, the concrete type of a TimeFrame will be a time period (Dates.Period).","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"For convenience, timeframes can be constructed using the tf\"1m\" notation for a 1-minute timeframe. This notation can be freely used because, by using the macro, the timeframe is replaced at compile time. Moreover, construction is cached and the instances are singletons (@assert tf\"1m\" === tf\"1m\"). Parsing is also cached, but only by calling convert(TimeFrame, v) or [timeframe](guides/../guides/data-management.md#timeframes)(v), and it incurs only the lookup cost (~500ns).","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"Parsing is done to match the timeframe naming used within CCTX, and the time period used should be expected to be in Millisecond.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"Dates can also be constructed within the repl using the dt prefix. For example, dt\"2020-\" will create a DateTime value for the date 2020-01-01T00:00:00. We also implement a DateRange, which is used to keep track of the time between two dates, and it also works as an iterator when the step field (Period) is defined. Date ranges can be conveniently created using the prefix dtr. For example, dtr\"2020-..2021-\" will construct a daterange for the full year 2020. You can specify the date precision up to the second as specified by the standard, like dtr\"2020-01-01T:00:00:01..2021-01-01T00:00:01\".","category":"page"},{"location":"types/#See-Also","page":"Type System","title":"See Also","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"types/#[OHLCV](guides/../guides/data-management.md#ohlcv-data)","page":"Type System","title":"OHLCV","text":"","category":"section"},{"location":"types/","page":"Type System","title":"Type System","text":"We use the DataFrames package, so when we refer to OHLCV data, there is a DataFrame involved. Within the Data package, there are multiple utility functions to deal with OHLCV data. Some of these functions include:","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"ohlcv/at(df, date): This function allows you to get the value of a column at a particular index by date. For example, you can use closeat(df, date) to fetch the close value at a specific date.\ndf[dt\"2020-01-01\", :close]: This syntax allows you to directly fetch the close value at the nearest matching date by using the dt prefix.\ndf[dtr\"2020-..2021-\"]: This syntax allows you to slice the dataframe for the rows within a specific date range using the dtr prefix.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"Additionally, there are utility functions for guessing the timeframe of an OHLCV dataframe by looking at the difference between timestamps. You can use the timeframe!(df) function to set the \"timeframe\" key on the metadata of the timestamp column of the dataframe.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"Please make sure this documentation is up to date. Check if it lists all the public fields of the struct and remove any sentences that mention functions that do not exist. Also, fix any spelling, grammar, and syntax errors.","category":"page"},{"location":"types/","page":"Type System","title":"Type System","text":"info: Numbered types\nSome types have a number at the end, you can just ignore it, eventually it will be removed.","category":"page"},{"location":"API/misc/#Misc","page":"Miscellaneous","title":"Misc","text":"","category":"section"},{"location":"API/misc/#Misc.ATOL","page":"Miscellaneous","title":"Misc.ATOL","text":"The margin of error to use [2eps].\n\n\n\n\n\n","category":"constant"},{"location":"API/misc/#Misc.Iterable","page":"Miscellaneous","title":"Misc.Iterable","text":"An union of iterable types.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.ONE","page":"Miscellaneous","title":"Misc.ONE","text":"Static one(DFT)\n\n\n\n\n\n","category":"constant"},{"location":"API/misc/#Misc.WithMargin","page":"Miscellaneous","title":"Misc.WithMargin","text":"Any margin mode.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.ZERO","page":"Miscellaneous","title":"Misc.ZERO","text":"Static zero(DFT)\n\n\n\n\n\n","category":"constant"},{"location":"API/misc/#Misc.config","page":"Miscellaneous","title":"Misc.config","text":"Global configuration instance.\n\n\n\n\n\n","category":"constant"},{"location":"API/misc/#Misc.fetch_limits","page":"Miscellaneous","title":"Misc.fetch_limits","text":"Exchange ohlcv candles limits.\n\n\n\n\n\n","category":"constant"},{"location":"API/misc/#Misc.futures_exchange","page":"Miscellaneous","title":"Misc.futures_exchange","text":"Some exchanges are split into different classes in ccxt.\n\n\n\n\n\n","category":"constant"},{"location":"API/misc/#Misc.results","page":"Miscellaneous","title":"Misc.results","text":"Holds recently evaluated statements.\n\n\n\n\n\n","category":"constant"},{"location":"API/misc/#Misc.Config","page":"Miscellaneous","title":"Misc.Config","text":"Creates a Config object from a profile and path.\n\nConfig(profile::Union{Module, String, Symbol}; ...) -> Any\nConfig(\n    profile::Union{Module, String, Symbol},\n    path::String;\n    hasentry,\n    kwargs...\n) -> Any\n\n\nThis function creates a Config object using the provided profile and path. The profile can be a Symbol, Module, or String representing a specific configuration setup or a user/project profile. If hasentry is true, it also checks for an entry point.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Config-2","page":"Miscellaneous","title":"Misc.Config","text":"Strategy config.\n\npath: File path that loaded this config.\nmode: Execution mode (Sim, Paper, Live)\nexchange: A symbol to instantiate an exchange (a raw ExchangeID symbol)\naccount: Different accounts have different api keys\nparams: Parameters for exchange constructor\nsandbox: Exchange sandbox mode flag\nqc: The quote currency for the strategy cash.\nmargin: Configures the margin mode of the strategy (NoMargin, Isolated or Cross)\nleverage: The default leverage that should be used when opening position with margin mode.\nmin_vol: A minimum acceptable volume, e.g. for filtering markets.\ninitial_cash: Starting cash, used when instantiating a strategy.\nmin_size: Default order size.\nmin_timeframe: The default (shortest) timeframe of the candles.\ntimeframes: Vector of sorted timeframes that the strategy uses (for loading data).\nwindow: The default number of candles (OHLCV).\nsources: Mapping of modules symbols name to (.jl) file paths\nattrs: Generic metadata container.\ntoml: Raw toml that instantiated this config.\ndefaults\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.ContiguityException","page":"Miscellaneous","title":"Misc.ContiguityException","text":"An exception that is thrown when the data stored ends before the new data starts (or vice versa).\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Cross","page":"Miscellaneous","title":"Misc.Cross","text":"NotHedged CrossMargin mode.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.CrossHedged","page":"Miscellaneous","title":"Misc.CrossHedged","text":"Hedged CrossMargin mode.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.CrossMargin","page":"Miscellaneous","title":"Misc.CrossMargin","text":"Cross margin mode handles margin across all assets (NOT IMPLEMENTED).\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.DFT","page":"Miscellaneous","title":"Misc.DFT","text":"The floating point number type to use.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.ExecAction","page":"Miscellaneous","title":"Misc.ExecAction","text":"An ExecAction is any holy trait singleton used to dispatch call! and call! functions.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.ExecMode","page":"Miscellaneous","title":"Misc.ExecMode","text":"ExecMode is one of Sim, Paper, Live.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Hedged","page":"Miscellaneous","title":"Misc.Hedged","text":"Hedged implies both short and long positions can be held.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.HedgedMode","page":"Miscellaneous","title":"Misc.HedgedMode","text":"HedgedMode is one of Hedged, NotHedged.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Isolated","page":"Miscellaneous","title":"Misc.Isolated","text":"NotHedged IsolatedMargin mode.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.IsolatedHedged","page":"Miscellaneous","title":"Misc.IsolatedHedged","text":"Hedged IsolatedMargin mode.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.IsolatedMargin","page":"Miscellaneous","title":"Misc.IsolatedMargin","text":"Isolated margin mode handles margin for each asset separately.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.LeftContiguityException","page":"Miscellaneous","title":"Misc.LeftContiguityException","text":"An exception that is thrown when the data stored starts before the new data ends.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Live","page":"Miscellaneous","title":"Misc.Live","text":"Live execution.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Long","page":"Miscellaneous","title":"Misc.Long","text":"Long position side.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.MM","page":"Miscellaneous","title":"Misc.MM","text":"Min, max named tuple\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.MarginMode","page":"Miscellaneous","title":"Misc.MarginMode","text":"Margin mode is one of Isolated, Cross, NoMargin.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.NoMargin","page":"Miscellaneous","title":"Misc.NoMargin","text":"No margin mode, margin handling is disabled (usually in simple spot markets).\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.NotHedged","page":"Miscellaneous","title":"Misc.NotHedged","text":"NotHedged implies only one position side can be held.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Paper","page":"Miscellaneous","title":"Misc.Paper","text":"Paper execution.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.PositionSide","page":"Miscellaneous","title":"Misc.PositionSide","text":"Position side is one of Long, Short.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.RightContiguityException","page":"Miscellaneous","title":"Misc.RightContiguityException","text":"An exception that is thrown when the data stored ends before the new data starts.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Short","page":"Miscellaneous","title":"Misc.Short","text":"Short position side.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.Sim","page":"Miscellaneous","title":"Misc.Sim","text":"Simulated execution.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.TaskFlag","page":"Miscellaneous","title":"Misc.TaskFlag","text":"Used to indicate that a task is still running.\n\nf: The function that indicates that the task is still running (returns a Bool).\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Misc.TaskFlag-Tuple{}","page":"Miscellaneous","title":"Misc.TaskFlag","text":"The default task flag\n\nUses the task local storage to communicate if the task is still running.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.UniqueIterator","page":"Miscellaneous","title":"Misc.UniqueIterator","text":"Returns an iterator that yields unique elements from an iterable.\n\n\n\n\n\n","category":"type"},{"location":"API/misc/#Base.copy-Tuple{Misc.Config}","page":"Miscellaneous","title":"Base.copy","text":"Creates a (shallow) copy of the Config object.\n\ncopy(c::Misc.Config) -> Any\n\n\nThis function returns a new Config object that is a copy of the given Config object c.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc._find_module-Tuple{Any}","page":"Miscellaneous","title":"Misc._find_module","text":"Finds the module corresponding to a given symbol.\n\n_find_module(sym) -> Any\n\n\nThis function takes a symbol sym and attempts to find the corresponding module in the loaded modules.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc._instantiate_workers-Tuple{Any}","page":"Miscellaneous","title":"Misc._instantiate_workers","text":"Instantiates worker processes for a given module.\n\n_instantiate_workers(\n    mod;\n    force,\n    num\n) -> Union{Nothing, Int64}\n\n\nThis function takes a module mod and optionally a boolean force and an integer num. It spawns num worker processes for mod. If force is true, it first kills any existing worker processes for mod.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc._options!-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc._options!","text":"Sets the options in cfg based on provided name.\n\n_options!(cfg, name) -> Any\n\n\nThis function iterates over the options defined in the cfg object's TOML and sets each option according to the values provided under the given name.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc._path!-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc._path!","text":"Sets the path in cfg if the file exists.\n\n_path!(cfg, path) -> Any\n\n\nThis function sets the path field of the cfg object to the provided path if a file exists at that location.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc._sources!-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc._sources!","text":"Sets the sources in cfg based on provided name.\n\n_sources!(cfg, name)\n\n\nThis function iterates over the sources defined in the cfg object's TOML and sets each source according to the values provided under the given name.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc._toml!-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc._toml!","text":"Sets the TOML config in cfg if the file exists.\n\n_toml!(cfg, name; check)\n\n\nThis function sets the toml field of the cfg object to the parsed contents of a TOML file with the provided name, if the file exists.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.after-Tuple{AbstractVector, Any}","page":"Miscellaneous","title":"Misc.after","text":"Returns a view of the vector after a specified value.\n\nafter(v::AbstractVector, d; kwargs...) -> Any\n\n\nThis function returns a view of the vector v starting from the position after the first occurrence of d. The behavior can be adjusted using keyword arguments passed to rangeafter.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.approxzero-Tuple{T} where T","page":"Miscellaneous","title":"Misc.approxzero","text":"Checks if a value is approximately zero.\n\napproxzero(v; atol) -> Any\n\n\nThis function takes a value v and a tolerance atol. It returns true if the absolute difference between v and zero is less than or equal to atol, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.attr!-Tuple{Any, Any, Any}","page":"Miscellaneous","title":"Misc.attr!","text":"Get k from the attrs field of the input object, or v if k is not present, setting k to v.\n\nattr!(d, k, v) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.attr-Tuple{Any, Any, Any}","page":"Miscellaneous","title":"Misc.attr","text":"Get k from the attrs field of the input object, or v if k is not present.\n\nattr(d, k, v) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.attr-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc.attr","text":"Get k from the attrs field of the input object.\n\nattr(d, k) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.attrs-Tuple{Any, Vararg{Any}}","page":"Miscellaneous","title":"Misc.attrs","text":"Get all keys... from the attrs field of the input object.\n\nattrs(d, keys...) -> Dict{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.attrs-Tuple{Any}","page":"Miscellaneous","title":"Misc.attrs","text":"Get the attrs field of the input object.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.before-Tuple{AbstractVector, Any}","page":"Miscellaneous","title":"Misc.before","text":"Complement of after.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.between-Tuple{AbstractVector, Any, Any}","page":"Miscellaneous","title":"Misc.between","text":"Returns a view of the sorted vector v, indexed using rangebetween.\n\nbetween(v::AbstractVector, left, right; kwargs...) -> Any\n\n\njulia> between([1, 2, 3, 3, 3], 3, 3; strict=true)\n0-element view(::Vector{Int64}, 6:5) with eltype Int64\njulia> between([1, 2, 3, 3, 3], 1, 3; strict=true)\n1-element view(::Vector{Int64}, 2:2) with eltype Int64:\n 2\njulia> between([1, 2, 3, 3, 3], 2, 3; strict=false)\n2-element view(::Vector{Int64}, 3:4) with eltype Int64:\n 3\n 3\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.config!-Tuple{String}","page":"Miscellaneous","title":"Misc.config!","text":"Parses the toml file and populates the config cfg.\n\nconfig!(\n    name::String;\n    cfg,\n    path,\n    check\n) -> Misc.Config{Float64}\n\n\nThis function updates the configuration object cfg by parsing the TOML file specified by name and path. If check is true, the function validates the config.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.config_path-Tuple{}","page":"Miscellaneous","title":"Misc.config_path","text":"Determines the config file path.\n\nThis function attempts to find the configuration file using find_config(). If it doesn't exist in the default directory, it falls back to the active project directory.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.dec!-Union{Tuple{Ref{I}}, Tuple{I}} where I<:Integer","page":"Miscellaneous","title":"Misc.dec!","text":"Decrement an integer reference by one\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.default_dir-Tuple{}","page":"Miscellaneous","title":"Misc.default_dir","text":"Returns the default directory path for the project.\n\ndefault_dir() -> String\n\n\nThis function returns the directory of the active project if it exists. Otherwise, it uses the JULIA_PROJECT from the environment variables. If neither exist, it defaults to the current directory.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.default_local_dir-Tuple","page":"Miscellaneous","title":"Misc.default_local_dir","text":"Returns the default local directory.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.drop-Union{Tuple{N}, Tuple{NamedTuple, NTuple{N, Symbol}}} where N","page":"Miscellaneous","title":"Misc.drop","text":"Returns a NamedTuple without the given keys.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.exchange_keys-Tuple{Any}","page":"Miscellaneous","title":"Misc.exchange_keys","text":"Retrieves the API keys for a specific exchange.\n\nexchange_keys(name; sandbox, account)\n\n\nThis function tries to open and parse a JSON file named after the exchange name, which should contain the API keys.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.execmode-Tuple","page":"Miscellaneous","title":"Misc.execmode","text":"Returns the execution mode of the arguments.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.find_config","page":"Miscellaneous","title":"Misc.find_config","text":"Finds the configuration file in the given path.\n\nfind_config(; ...) -> Union{Nothing, String}\nfind_config(cur_path; name, dir) -> Any\n\n\nThis function recursively searches for a file with the specified name starting from cur_path. It stops once the file is found or when it reaches the root directory.\n\n\n\n\n\n","category":"function"},{"location":"API/misc/#Misc.gtxzero-Tuple{T} where T","page":"Miscellaneous","title":"Misc.gtxzero","text":"Checks if a value is greater than or approximately equal to zero.\n\ngtxzero(v; atol) -> Any\n\n\nThis function takes a value v and a tolerance atol. It returns true if v is greater than zero or if the absolute difference between v and zero is less than or equal to atol, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.hasattr-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc.hasattr","text":"Check if k is present in the attrs field of the input object.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.hasattr-Tuple{Any, Vararg{Any}}","page":"Miscellaneous","title":"Misc.hasattr","text":"Check if any of keys... is present in the attrs field of the input object.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.inc!-Union{Tuple{Ref{I}}, Tuple{I}} where I<:Integer","page":"Miscellaneous","title":"Misc.inc!","text":"Increment an integer reference by one\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.init_task-Tuple{Task, Any}","page":"Miscellaneous","title":"Misc.init_task","text":"Initializes a task with a given state.\n\ninit_task(t::Task, state) -> Task\n\n\nThis function initializes a task t with a given state. It sets up the task's storage dictionary which includes running flag, state, and a condition variable for notification.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.isdirempty-Tuple{AbstractString}","page":"Miscellaneous","title":"Misc.isdirempty","text":"Checks if a directory is empty.\n\nisdirempty(path::AbstractString) -> Bool\n\n\nThis function takes a path and returns true if the directory at the given path is empty, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.isstrictlysorted-Tuple","page":"Miscellaneous","title":"Misc.isstrictlysorted","text":"Checks if an iterable is strictly sorted.\n\nisstrictlysorted(itr...) -> Bool\n\n\nThis function takes an iterable itr and returns true if the elements in itr are strictly increasing, and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.istaskrunning-Tuple{Task}","page":"Miscellaneous","title":"Misc.istaskrunning","text":"Check if a task is running.\n\nistaskrunning(t::Task) -> Bool\n\n\nThis function checks if a task (t) is running. A task is considered running if it has started and is not yet done.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.istaskrunning-Tuple{}","page":"Miscellaneous","title":"Misc.istaskrunning","text":"Checks if the current task is running.\n\nThis function checks if the current task is running by accessing the task's local storage.\n\nwarning: Don't use within macros\nUse the homonymous macro @istaskrunning() instead.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.keys_path-Tuple{AbstractString}","page":"Miscellaneous","title":"Misc.keys_path","text":"Generates the path for the JSON keys file.\n\nkeys_path(exc_name::AbstractString) -> String\n\n\nThis function constructs a filename from the given exc_name, replacing any existing .json extension, and joins it with the user directory path.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.marginmode-Tuple","page":"Miscellaneous","title":"Misc.marginmode","text":"Returns the margin mode of the arguments.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.modifyattr!-Tuple{Any, Any, Any, Vararg{Any}}","page":"Miscellaneous","title":"Misc.modifyattr!","text":"Set k in the attrs field of the input object to v.\n\nmodifyattr!(d, v, op, keys...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.negative-Tuple{Any}","page":"Miscellaneous","title":"Misc.negative","text":"negate(abs(v))\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.opposite-Tuple{Type{Misc.Long}}","page":"Miscellaneous","title":"Misc.opposite","text":"The opposite position side (Long -> Short, Short -> Long)\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.positive-Tuple{Any}","page":"Miscellaneous","title":"Misc.positive","text":"Alias to abs\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.queryfromstruct","page":"Miscellaneous","title":"Misc.queryfromstruct","text":"Creates a query from a struct type.\n\nqueryfromstruct(T::Type; ...) -> Dict{Any, Any}\nqueryfromstruct(T::Type, sep; kwargs...) -> Dict{Any, Any}\n\n\nThis function takes a struct type T and a separator sep, and creates a query string using the fields and their values in T.\n\n\n\n\n\n","category":"function"},{"location":"API/misc/#Misc.rangeafter-Tuple{AbstractVector, Any}","page":"Miscellaneous","title":"Misc.rangeafter","text":"Finds the range after a specified value in a vector.\n\nrangeafter(v::AbstractVector, d; strict, kwargs...) -> Any\n\n\nThis function takes a vector v and a value d, and returns a range that starts after the first occurrence of d in v. If strict is true, the range starts after d, otherwise it starts at d.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.rangebefore-Tuple{AbstractVector, Any}","page":"Miscellaneous","title":"Misc.rangebefore","text":"Complement of rangeafter.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.rangebetween-Tuple{AbstractVector, Any, Any}","page":"Miscellaneous","title":"Misc.rangebetween","text":"Finds the range between two specified values in a vector.\n\nrangebetween(\n    v::AbstractVector,\n    left,\n    right;\n    kwargs...\n) -> Any\n\n\nThis function takes a vector v and two values left and right, and returns a range that starts from the position of left and ends at the position of right in v.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.reset!-Tuple{Misc.Config}","page":"Miscellaneous","title":"Misc.reset!","text":"Resets the Config object to its default values.\n\nreset!(c::Misc.Config)\n\n\nThis function iterates over the fields of the Config object c and resets each field to its default value. (stored in the defaults field)\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.rewritekeys!-Tuple{AbstractDict, Any}","page":"Miscellaneous","title":"Misc.rewritekeys!","text":"Rewrites keys in a dictionary based on a function.\n\nrewritekeys!(dict::AbstractDict, f) -> AbstractDict\n\n\nThis function takes a dictionary dict and a function f, and rewrites each key in the dictionary by applying the function f to it.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.setattr!-Tuple{Any, Any, Vararg{Any}}","page":"Miscellaneous","title":"Misc.setattr!","text":"Set k in the attrs field of the input object to v.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.setoffline!-Tuple{}","page":"Miscellaneous","title":"Misc.setoffline!","text":"Sets the offline mode.\n\nsetoffline!() -> Bool\n\n\nThis function sets the offline mode based on the PLANAR_OFFLINE environment variable. If the environment variable is set, it parses its value as a boolean to set the offline mode. It is used to skip some errors during precompilation, if precompiling offline.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.shift!","page":"Miscellaneous","title":"Misc.shift!","text":"Shifts elements in a vector.\n\nshift!(\n    arr::Vector{<:AbstractFloat}\n) -> Vector{<:AbstractFloat}\nshift!(\n    arr::Vector{<:AbstractFloat},\n    n\n) -> Vector{<:AbstractFloat}\nshift!(\n    arr::Vector{<:AbstractFloat},\n    n,\n    def\n) -> Vector{<:AbstractFloat}\n\n\nThis function shifts the elements in arr by n positions to the left. The new elements added to the end of the array are set to the value of def.\n\n\n\n\n\n","category":"function"},{"location":"API/misc/#Misc.start_task-Tuple{Task, Any}","page":"Miscellaneous","title":"Misc.start_task","text":"Initializes and starts a task with a given state.\n\nstart_task(t::Task, state) -> Task\n\n\nThis function initializes a task t with a given state, schedules the task, and then returns the task.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.stop_task-Tuple{Task}","page":"Miscellaneous","title":"Misc.stop_task","text":"Stops a task if it's running.\n\nstop_task(t::Task) -> Bool\n\n\nThis function attempts to stop a running task t. It sets the task's running flag to false and notifies any waiting threads if applicable.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.swapkeys-Union{Tuple{V}, Tuple{K}, Tuple{AbstractDict{K, V}, Type, Any}} where {K, V}","page":"Miscellaneous","title":"Misc.swapkeys","text":"Swaps keys in a dictionary based on a function and new key type.\n\nswapkeys(\n    dict::AbstractDict{K, V},\n    k_type::Type,\n    f;\n    dict_type\n) -> Any\n\n\nThis function takes a dictionary dict, a function f, and a new key type k_type. It returns a new dictionary of type dict_type where each key is transformed by the function f and cast to k_type.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.task_sem-Tuple{Any}","page":"Miscellaneous","title":"Misc.task_sem","text":"Retrieves or initializes a semaphore for a task.\n\ntask_sem(task) -> Any\n\n\nThis function retrieves or initializes a semaphore for a task task. If the semaphore doesn't exist, it initializes a new one with an empty queue and a condition variable.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.toprecision-Tuple{AbstractFloat, Int64}","page":"Miscellaneous","title":"Misc.toprecision","text":"When precision is a Integer it represents the number of decimals.\n\ntoprecision(n::AbstractFloat, prec::Int64) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.toprecision-Tuple{AbstractFloat, UInt64}","page":"Miscellaneous","title":"Misc.toprecision","text":"Round a float to a given precision (SIGNIFICANT_DIGITS).\n\ntoprecision(n::AbstractFloat, prec::UInt64) -> Any\n\n\nSIGNIFICANT_DIGITS precision mode is similar to DECIMAL_PLACES except that the last digit is the one that is rounded\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.toprecision-Tuple{Union{AbstractFloat, Integer}, AbstractFloat}","page":"Miscellaneous","title":"Misc.toprecision","text":"When precision is a float it represents the pip.\n\ntoprecision(\n    n::Union{AbstractFloat, Integer},\n    prec::AbstractFloat\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.truncate_file-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc.truncate_file","text":"Truncate a file to contain only the last nlines lines.\n\ntruncate_file(filename, nlines) -> Any\n\n\nOpens the file for reading, keeps only the last nlines lines, then opens the file again for writing and overwrites it with those last lines. Throws an error if nlines is not a positive integer.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.waitforcond-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc.waitforcond","text":"Waits for a certain condition for a specified time.\n\nwaitforcond(cond, time) -> Int64\n\n\nThis function waits for a certain condition cond to be met within a specified time. The condition cond is a function that returns a boolean value. The function continuously checks the condition until it's true or until the specified time has passed.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.waitforcond-Tuple{Function, Any}","page":"Miscellaneous","title":"Misc.waitforcond","text":"Waits for a condition function to return true for a specified time.\n\nwaitforcond(cond::Function, time) -> Int64\n\n\nThis function waits for a condition function cond to return true. It keeps checking the condition for a specified time.\n\n\n\n\n\n","category":"method"},{"location":"API/misc/#Misc.@as_dfdict","page":"Miscellaneous","title":"Misc.@as_dfdict","text":"Binds a mrkts variable to a Dict{String, DataFrame} where the keys are the pairs names and the data is the OHLCV data of the pair.\n\n\n\n\n\n","category":"macro"},{"location":"API/misc/#Misc.@istaskrunning-Tuple{}","page":"Miscellaneous","title":"Misc.@istaskrunning","text":"Checks if the current task is running (Macro).\n\nEquivalent to istaskrunning() but should be used within other macros.\n\n\n\n\n\n","category":"macro"},{"location":"API/misc/#Misc.@lev!-Tuple{}","page":"Miscellaneous","title":"Misc.@lev!","text":"Toggle config leverage flag\n\n\n\n\n\n","category":"macro"},{"location":"API/misc/#Misc.@margin!-Tuple{}","page":"Miscellaneous","title":"Misc.@margin!","text":"Toggle config margin flag.\n\n\n\n\n\n","category":"macro"},{"location":"API/misc/#Misc.@skipoffline","page":"Miscellaneous","title":"Misc.@skipoffline","text":"Same as the Lang.@ignoremacro, but only ifPLANAR_OFFLINE` is set.\n\n\n\n\n\n","category":"macro"},{"location":"API/misc/#Misc.@start_task-Tuple{Any, Any}","page":"Miscellaneous","title":"Misc.@start_task","text":"Starts a task with a given state and code block.\n\nThis macro initializes and starts a task with a given state and code block. It creates a task with the provided code, initializes it with the state, and schedules the task for running.\n\n\n\n\n\n","category":"macro"},{"location":"API/strategytools/#StrategyTools","page":"Strategy Tools","title":"StrategyTools","text":"","category":"section"},{"location":"API/strategytools/","page":"Strategy Tools","title":"Strategy Tools","text":"This module implements routines common to many strategies.","category":"page"},{"location":"API/strategytools/#StrategyTools.MovingExtrema","page":"Strategy Tools","title":"StrategyTools.MovingExtrema","text":"MovingExtrema2: keep track of minimum and maximum values within a moving window.\n\n\n\n\n\n","category":"type"},{"location":"API/strategytools/#StrategyTools.MovingExtrema-Tuple{Int64}","page":"Strategy Tools","title":"StrategyTools.MovingExtrema","text":"MovingExtrema2: Keep track of minima and maxima within a moving window.\n\nMovingExtrema(window::Int64) -> StrategyTools.MovingExtrema\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#Base.:/-Tuple{TimeFrames.TimeFrame, Any}","page":"Strategy Tools","title":"Base.:/","text":"TimeFrame division\n\n/(tf::TimeFrames.TimeFrame, d; type) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#Base.extrema-Tuple{StrategyTools.MovingExtrema}","page":"Strategy Tools","title":"Base.extrema","text":"Get the minimum and maximum values in the MovingExtrema2 buffer.\n\nextrema(\n    q::StrategyTools.MovingExtrema\n) -> Tuple{Union{Missing, Float64}, Union{Missing, Float64}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#Base.push!-Tuple{StrategyTools.MovingExtrema, Float64}","page":"Strategy Tools","title":"Base.push!","text":"Pushes a new value to the MovingExtrema2 buffer.\n\npush!(\n    q::StrategyTools.MovingExtrema,\n    value::Float64\n) -> Deque{Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#Misc.call!-Tuple{Function, RTStrategy, Dates.DateTime, SimWarmup}","page":"Strategy Tools","title":"Misc.call!","text":"Initiates the warmup process for all assets in the universe for a real-time strategy.\n\ncall!(\n    cb::Function,\n    s::RTStrategy,\n    ats::Dates.DateTime,\n    ::SimWarmup;\n    n_candles\n)\n\n\nRuns warmup simulation on all assets in the strategy's universe simultaneously.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#Misc.call!-Tuple{Function, RTStrategy, Instances.AssetInstance, Dates.DateTime, SimWarmup}","page":"Strategy Tools","title":"Misc.call!","text":"Initiates the warmup process for a real-time strategy instance.\n\ncall!(\n    cb::Function,\n    s::RTStrategy,\n    ai::Instances.AssetInstance,\n    ats::Dates.DateTime,\n    ::SimWarmup;\n    n_candles\n)\n\n\nIf warmup has not been previously completed for the given asset instance, it performs the necessary preparations.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#Misc.call!-Tuple{Function, SimStrategy, SimWarmup}","page":"Strategy Tools","title":"Misc.call!","text":"Initiates the warmup process for all assets in the universe for a simulation strategy.\n\ncall!(cb::Function, s::SimStrategy, ::SimWarmup; n_candles)\n\n\nRuns warmup simulation on all assets in the strategy's universe simultaneously.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#Misc.call!-Tuple{Strategy, InitSimWarmup}","page":"Strategy Tools","title":"Misc.call!","text":"Initializes warmup attributes for a strategy.\n\ncall!(\n    s::Strategy,\n    ::InitSimWarmup;\n    timeout,\n    warmup_period\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools._warmup!-Tuple{Function, SimStrategy}","page":"Strategy Tools","title":"StrategyTools._warmup!","text":"Executes the warmup routine for all assets in a simulation strategy.\n\n_warmup!(callback::Function, s::SimStrategy; n_candles)\n\n\nSimplified version for simulation strategies that don't need timestamp parameter.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools._warmup!-Tuple{Function, Strategy, Dates.DateTime}","page":"Strategy Tools","title":"StrategyTools._warmup!","text":"Executes the warmup routine for all assets in the universe with a custom callback.\n\n_warmup!(\n    callback::Function,\n    s::Strategy,\n    ats::Dates.DateTime;\n    n_candles\n)\n\n\nThe function prepares the trading strategy by simulating past data for all assets  in the universe before live execution starts.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools._warmup!-Tuple{Function, Strategy, Instances.AssetInstance, Dates.DateTime}","page":"Strategy Tools","title":"StrategyTools._warmup!","text":"Executes the warmup routine with a custom callback for a strategy.\n\n_warmup!(\n    callback::Function,\n    s::Strategy,\n    ai::Instances.AssetInstance,\n    ats::Dates.DateTime;\n    n_candles\n)\n\n\nThe function prepares the trading strategy by simulating past data before live execution starts.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.belowtotal-Tuple{Any, Any, Any}","page":"Strategy Tools","title":"StrategyTools.belowtotal","text":"Check if collateral is below a calculated threshold\n\nbelowtotal(s, ai, p; qt) -> Any\n\n\nDetermines if the collateral of a position p is less than the minimum required amount or a dynamic threshold based on s[:qt_base].\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.calculate_slope-Tuple{Any}","page":"Strategy Tools","title":"StrategyTools.calculate_slope","text":"Calculate the slope of a signal based on its trace buffer.\n\ncalculate_slope(sig) -> Any\n\n\nCalculates the slope using simple rate of change between first and last valid values.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.cdfrompnl-Union{Tuple{T}, Tuple{Any, Any}, Tuple{Any, Any, T}} where T","page":"Strategy Tools","title":"StrategyTools.cdfrompnl","text":"Calculates the cooldown period based on the profit and loss values.\n\ncdfrompnl(s, pnl) -> Any\ncdfrompnl(s, pnl, cdu) -> Any\n\n\nThis function calculates the cooldown period (cd) using the profit and loss (pnl) values, the cooldown unit (cdu), and the strategy's cooldown_base.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.cmpab-Tuple{Any, Any, Any}","page":"Strategy Tools","title":"StrategyTools.cmpab","text":"Compares two properties of a signal state.\n\ncmpab(sig, a, b) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.copyohlcv!-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1, T2<:Instances.AssetInstance}","page":"Strategy Tools","title":"StrategyTools.copyohlcv!","text":"Updates the OHLCV data for a destination asset instance from a source.\n\ncopyohlcv!(ai_dst, ai_src::Instances.AssetInstance)\n\n\nExisting OHLCV data for the destination is cleared before copying to ensure accurate and up-to-date information.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.copyohlcv!-Union{Tuple{T}, Tuple{T, T}} where T<:Strategy","page":"Strategy Tools","title":"StrategyTools.copyohlcv!","text":"Copies OHLCV data from one strategy instance to another.\n\ncopyohlcv!(s_dst::Strategy, s_src::Strategy)\n\n\nEnsures that the destination strategy's asset instances are updated with the source's OHLCV data for matching market symbols.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.copypnl!-NTuple{4, Any}","page":"Strategy Tools","title":"StrategyTools.copypnl!","text":"Copies simulated PnL data to the main strategy instance.\n\ncopypnl!(s, ai, s_sim, ai_sim) -> Union{Nothing, Bool}\n\n\nTransfers PnL data from a simulation instance to the corresponding asset in the main strategy and marks the asset as warmed up.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.degrees-Tuple{Any}","page":"Strategy Tools","title":"StrategyTools.degrees","text":"Calculate angle of a slope.\n\ndegrees(slp) -> Any\n\n\nCalculates the angle in degrees of the slope slp.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.get_signal_value-Tuple{Any, Any}","page":"Strategy Tools","title":"StrategyTools.get_signal_value","text":"Retrieve a signal value from a dictionary for a given key.\n\nget_signal_value(ct, k) -> Any\n\n\nExtracts the sig.value from the property of the dictionary item identified by k.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.hasentrycash-Tuple{Any, Any}","page":"Strategy Tools","title":"StrategyTools.hasentrycash","text":"Verify if free cash is above the entry cost minimum\n\nhasentrycash(s, ai) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.hasexitcash-Tuple{Any, Any}","page":"Strategy Tools","title":"StrategyTools.hasexitcash","text":"Assess if amount exceeds the minimum exit amount\n\nhasexitcash(amt, ai) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.indicator_range-Tuple{Any, Any, Any}","page":"Strategy Tools","title":"StrategyTools.indicator_range","text":"Return the inputs for the fit! function of the signal.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.indicator_range-Tuple{Union{OnlineTechnicalIndicators.ATR, OnlineTechnicalIndicators.ChandeKrollStop, OnlineTechnicalIndicators.SOBV, OnlineTechnicalIndicators.UO, OnlineTechnicalIndicators.VTX}, Any, Any}","page":"Strategy Tools","title":"StrategyTools.indicator_range","text":"Return the inputs for the fit! function of the signal.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.initpnl!","page":"Strategy Tools","title":"StrategyTools.initpnl!","text":"Initializes the PnL tracking structure for each asset in the universe.\n\ninitpnl!(\n    s;\n    ...\n) -> LittleDict{Any, Any, Vector{Any}, Vector{Any}}\ninitpnl!(\n    s,\n    uni;\n    n,\n    ma\n) -> LittleDict{Any, Any, Vector{Any}, Vector{Any}}\n\n\nSets up a LittleDict with a circular buffer to store PnL data, defaulting to 100 entries.\n\n\n\n\n\n","category":"function"},{"location":"API/strategytools/#StrategyTools.iscrossed-Tuple{Any, Any, Any, Any, Val}","page":"Strategy Tools","title":"StrategyTools.iscrossed","text":"Check if a signal crossover condition is met at a given time.\n\niscrossed(s, ai, ats, sig_b, drc::Val) -> Any\n\n\nEvaluates if the closing prices at specified times cross a threshold in the direction drc. Uses timeframes and signals to determine the crossover.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.iscrossed-Tuple{Val{:above}}","page":"Strategy Tools","title":"StrategyTools.iscrossed","text":"Determine if a crossover occurred in a specified direction.\n\niscrossed(::Val{:above}; a, b, prev_a, prev_b)\n\n\nChecks if values a, b, and c satisfy the conditions for a crossover in the specified direction (:above or :below).\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.islastts-Tuple{SimStrategy, Any, Any, Any}","page":"Strategy Tools","title":"StrategyTools.islastts","text":"Check if last timestamp is within time frame for a simulation strategy.\n\nislastts(_::SimStrategy, _, ats, tf) -> Tuple{Bool, Any}\n\n\nChecks if the last timestamp ts is within the time frame tf for the simulation strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.isrecenttrade-Tuple{Instances.AssetInstance, Dates.DateTime, TimeFrames.TimeFrame}","page":"Strategy Tools","title":"StrategyTools.isrecenttrade","text":"Checks if a trade was made recently\n\nisrecenttrade(\n    ai::Instances.AssetInstance,\n    ats::Dates.DateTime,\n    tf::TimeFrames.TimeFrame;\n    cd\n) -> Bool\n\n\nChecks if a trade was made recently by checking if the last trade time for the given asset instance is more recent than the current time frame. If no trades were made, it returns true.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.isstaleohlcv-Tuple{RTStrategy, Any}","page":"Strategy Tools","title":"StrategyTools.isstaleohlcv","text":"Determines if the OHLCV data is stale for specified conditions.\n\nisstaleohlcv(s::RTStrategy, ai; ats, tf, backoff)\n\n\nThe function checks whether the latest time stamp of OHLCV data is not older than the backoff period. If older, it returns true, indicating the data is stale. Used to avoid reprocessing the same ohlcv candle.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.isstaleohlcv-Tuple{SimStrategy, Vararg{Any}}","page":"Strategy Tools","title":"StrategyTools.isstaleohlcv","text":"Determines if the OHLCV data is stale for a simulation strategy.\n\nisstaleohlcv(s::SimStrategy, args...; kwargs...) -> Bool\n\n\nFor a simulation strategy it is always up-to-date, so always returns false.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.istrending!-Tuple{Strategy, Instances.AssetInstance, Dates.DateTime, Any}","page":"Strategy Tools","title":"StrategyTools.istrending!","text":"Check if an asset is trending for a given signal\n\nistrending!(\n    s::Strategy,\n    ai::Instances.AssetInstance,\n    ats::Dates.DateTime,\n    sig_name;\n    func\n) -> Bool\n\n\nChecks if the asset ai is trending at time ats for the signal sig_name in the strategy s. The trending condition is determined by the provided func::Function which has the signature:\n\nfunc(::SignalState, ::Int, ::DataFrame)::Bool\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.liveloop-Tuple{Any, RTStrategy, Any}","page":"Strategy Tools","title":"StrategyTools.liveloop","text":"Map function asynchronously for a real-time strategy.\n\nliveloop(f, s::RTStrategy, iter)\n\n\nAsynchronously maps the function f over the iterable iter for the real-time strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.liveloop-Tuple{Any, SimStrategy, Any}","page":"Strategy Tools","title":"StrategyTools.liveloop","text":"Apply function to iterable for a simulation strategy.\n\nliveloop(f, s::SimStrategy, iter) -> Any\n\n\nApplies the function f to each element of the iterable iter for the simulation strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.liveloop-Tuple{Any, Strategy}","page":"Strategy Tools","title":"StrategyTools.liveloop","text":"Apply function to iterable for a strategy.\n\nliveloop(f, s::Strategy)\n\n\nApplies the function f to each element of the iterable iter for the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.livesleep-Tuple{RTStrategy, Any}","page":"Strategy Tools","title":"StrategyTools.livesleep","text":"Sleep function for a real-time strategy.\n\nlivesleep(s::RTStrategy, n) -> Any\n\n\nMakes the real-time strategy s sleep for n seconds.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.livesleep-Tuple{SimStrategy, Any}","page":"Strategy Tools","title":"StrategyTools.livesleep","text":"Sleep function for a simulation strategy.\n\nlivesleep(s::SimStrategy, _)\n\n\nDoes nothing for the simulation strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.log-Tuple{RTStrategy, Any, Vararg{Any}}","page":"Strategy Tools","title":"StrategyTools.log","text":"Log function for a strategy.\n\nlog(s::RTStrategy, f, args...)\n\n\nLogs the function f with its arguments args for the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.log-Tuple{SimStrategy, Any, Vararg{Any}}","page":"Strategy Tools","title":"StrategyTools.log","text":"Log function for a simulation strategy.\n\nlog(s::SimStrategy, f, args...)\n\n\nLogs the function f with its arguments args for the simulation strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.rateab-Tuple{Any, Any, Any}","page":"Strategy Tools","title":"StrategyTools.rateab","text":"Calculates the rate of change of a property of a signal state.\n\nrateab(sig, a, b) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.select_orderkwargs-Tuple{Symbol, Type{OrderTypes.Buy}, Any, Any}","page":"Strategy Tools","title":"StrategyTools.select_orderkwargs","text":"Select additional keyword arguments for Buy orders based on order type\n\nselect_orderkwargs(\n    otsym::Symbol,\n    ::Type{OrderTypes.Buy},\n    ai,\n    ats;\n    incr\n) -> Union{@NamedTuple{}, NamedTuple{(:price,), <:Tuple{Any}}}\n\n\nDepending on the order type symbol, additional keyword arguments are selected to define order parameters like price. This method specifically handles the Buy side logic by adjusting price based on closing value.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.select_orderkwargs-Tuple{Symbol, Type{OrderTypes.Sell}, Any, Any}","page":"Strategy Tools","title":"StrategyTools.select_orderkwargs","text":"Selects an order type based on the strategy, order side, and position side\n\nselect_orderkwargs(\n    otsym::Symbol,\n    ::Type{OrderTypes.Sell},\n    ai,\n    ats;\n    incr\n) -> Union{@NamedTuple{}, NamedTuple{(:price,), <:Tuple{Any}}}\n\n\nSelects an order type os based on the strategy s and the position side p. The order type is determined by the ordertype attribute of the strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.select_ordertype","page":"Strategy Tools","title":"StrategyTools.select_ordertype","text":"Selects an order type based on the strategy, order side, and position side\n\nselect_ordertype(\n    s::Strategy,\n    os::Type{<:OrderTypes.OrderSide};\n    ...\n) -> Tuple{Type, Any}\nselect_ordertype(\n    s::Strategy,\n    os::Type{<:OrderTypes.OrderSide},\n    p::Misc.PositionSide;\n    t\n) -> Tuple{Type, Any}\n\n\nSelects an order type os based on the strategy s and the position side p. The order type is determined by the ordertype attribute of the strategy.\n\n\n\n\n\n","category":"function"},{"location":"API/strategytools/#StrategyTools.signal_value-Tuple{Any}","page":"Strategy Tools","title":"StrategyTools.signal_value","text":"Dispatch on typeof(sig.state)\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.signals!-Tuple{Any, Vararg{Any}}","page":"Strategy Tools","title":"StrategyTools.signals!","text":"Update or initialize strategy signals.\n\nsignals!(s, args...; kwargs...)\n\n\nHandles dynamic indicator updates based on strategy configurations. Redirects to signals! with appropriate value tagging and error management.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.signals!-Tuple{Strategy, Any, Val{:update}}","page":"Strategy Tools","title":"StrategyTools.signals!","text":"Update signals for a strategy.\n\nsignals!(s::Strategy, ats, _::Val{:update})\n\n\nIterates over the universe of assets and for each asset iterates over the configured signals. Calls update_signal! to update each indicator with the current asset time series and configuration.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.signals!-Tuple{Strategy, Val{:warmup}}","page":"Strategy Tools","title":"StrategyTools.signals!","text":"Update signals for a strategy.\n\nsignals!(\n    s::Strategy,\n    ::Val{:warmup};\n    force,\n    history\n) -> Union{Nothing, Bool}\n\n\nIterates over the universe of assets and for each asset iterates over the configured signals. Calls update_signal! to update each indicator with the current asset time series and configuration.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.signals-NTuple{4, Any}","page":"Strategy Tools","title":"StrategyTools.signals","text":"Create multiple signal definitions and instantiate a new Signals17 object.\n\nsignals(\n    signals,\n    timeframes,\n    count,\n    params\n) -> StrategyTools.Signals17\n\n\nConstructs a dictionary of signals from input tuples and then creates a Signals17 instance using these definitions. Each signal configuration is converted into a typed tuple preserving the structure required by Signals17.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.track_expectancy!-Tuple{Any, Any}","page":"Strategy Tools","title":"StrategyTools.track_expectancy!","text":"Calculates the win rate and profit/loss thresholds for a trading strategy.\n\ntrack_expectancy!(s, ai) -> Any\n\n\nUpdates s[:profit_thresh] and s[:loss_thresh] based on the trading results.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.trackcd!-NTuple{4, Any}","page":"Strategy Tools","title":"StrategyTools.trackcd!","text":"Updates the cooldown period for an asset instance in the strategy.\n\ntrackcd!(s, ai, ats, ts) -> Any\n\n\nThe function calculates the cooldown period for the asset instance ai in the strategy s at the current timestamp ts.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.tracklev!-Tuple{Any, Any, Any}","page":"Strategy Tools","title":"StrategyTools.tracklev!","text":"Adjusts the leverage for an asset based on the Kelly criterion.\n\ntracklev!(\n    s,\n    ai,\n    ats;\n    dampener\n) -> Union{Nothing, NamedTuple{(:time, :raw_val, :value), <:Tuple{Any, Any, Any}}}\n\n\nApplies a damping function to the raw Kelly leverage to ensure it remains within practical limits.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.trackpnl!-NTuple{4, Any}","page":"Strategy Tools","title":"StrategyTools.trackpnl!","text":"Records the profit and loss (PnL) for a given asset instance at a specific timestamp.\n\ntrackpnl!(s, ai, ats, ts; interval, pnl_func) -> Any\n\n\nThe PnL is calculated based on the position side and the closing price at the given timestamp.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.trackqt!-Tuple{Any, Any, Any}","page":"Strategy Tools","title":"StrategyTools.trackqt!","text":"Tracks the target quantity of an asset over time for trading strategy s.\n\ntrackqt!(s, ai, ats; f) -> Any\n\n\nThe quantity is determined by the function f and is adjusted based on the asset ai and timestamp ats.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.update_data!-Tuple{Any, Any}","page":"Strategy Tools","title":"StrategyTools.update_data!","text":"Update or initialize mutable data related to asset information.\n\nupdate_data!(ai, tf) -> DataFrames.DataFrame\n\n\nThis function acquires or creates a data frame for the ai asset using the timeframe tf, then refreshes its OHLCV data by fetching new entries from the specified time onwards, based on the asset's symbol and exchange details. The update process may involve checking the existing data timestamps to avoid unnecessary data retrieval.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.update_signal!-NTuple{4, Any}","page":"Strategy Tools","title":"StrategyTools.update_signal!","text":"Update signal\n\nupdate_signal!(ai, ats, ai_signals, sig_name; tf, count)\n\n\nUpdates the signal sig_name for asset ai based on new data up to timestamp ats. Uses a lookback window of count timeframes tf.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#StrategyTools.waitohlcv-Tuple{Any, Any}","page":"Strategy Tools","title":"StrategyTools.waitohlcv","text":"Waits for OHLCV data to update up to a specified time.\n\nwaitohlcv(s, since; interval)\n\n\nThe function continuously checks if the latest data in each asset's time frame is up-to-date with the since parameter. It pauses execution using sleep for the given interval until the condition is met.\n\n\n\n\n\n","category":"method"},{"location":"API/strategytools/#See-Also","page":"Strategy Tools","title":"See Also","text":"","category":"section"},{"location":"API/strategytools/","page":"Strategy Tools","title":"Strategy Tools","text":"Strategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"resources/topic-index/#Topic-Index","page":"Topic Index","title":"Topic Index","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Browse documentation by topic and category.","category":"page"},{"location":"resources/topic-index/#Margin-Trading","page":"Topic Index","title":"📈 Margin Trading","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Advanced | Description: Leverage and margin trading features","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nOverview\nConfig\nCustomizations\nOrders\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine\nFeatures\nLive\nMode Comparison\nPaper\nOverview\nQuick Start\nData Management\nExecution Modes\nStrategy Development\nMobile Responsive Design\nOptimization\nPlotting\nStrategy\nTroubleshooting\nTypes","category":"page"},{"location":"resources/topic-index/#Customization","page":"Topic Index","title":"🔧 Customization","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Advanced | Description: Extending and customizing Planar","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Overview\nBacktest\nCall\nCustomizations\nExchanges\nOrders\nDevdocs\nDisambiguation\nDocumentation Index\nFirst Strategy\nOverview\nInstallation\nStrategy Development\nOverview\nOptimization\nPlotting\nStrategy","category":"page"},{"location":"resources/topic-index/#Data-Management","page":"Topic Index","title":"📊 Data Management","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Intermediate | Description: Working with market data and timeframes","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nData\nBacktest\nCustomizations\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine_Notes\nLive\nMode Comparison\nExchanges\nFirst Strategy\nOverview\nInstallation\nQuick Start\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nPlotting\nStrategy\nTroubleshooting\nTypes\nWatchers","category":"page"},{"location":"resources/topic-index/#Optimization","page":"Topic Index","title":"⚡ Optimization","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Advanced | Description: Parameter optimization and performance tuning","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nOptimization\nOverview\nBacktest\nCustomizations\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine\nEngine_Notes\nLive\nMode Comparison\nPaper\nFirst Strategy\nOverview\nInstallation\nQuick Start\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nMetrics\nMobile Responsive Design\nOptimization\nPlotting\nOverview\nStrategy\nTroubleshooting\nOverview\nTypes","category":"page"},{"location":"resources/topic-index/#Getting-Started","page":"Topic Index","title":"🚀 Getting Started","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Beginner | Description: New user onboarding and basic concepts","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Config\nDevdocs\nDocumentation Index\nLive\nFirst Strategy\nOverview\nInstallation\nQuick Start\nOverview\nPlotting\nTroubleshooting\nOverview","category":"page"},{"location":"resources/topic-index/#Strategy-Development","page":"Topic Index","title":"🏗️ Strategy Development","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Intermediate | Description: Building and implementing trading strategies","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nOptimization\nStrategystats\nBacktest\nCall\nCustomizations\nOrders\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine\nEngine_Notes\nFeatures\nLive\nMode Comparison\nPaper\nExchanges\nFirst Strategy\nOverview\nInstallation\nQuick Start\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nMetrics\nMobile Responsive Design\nOptimization\nPlotting\nStrategy\nTroubleshooting\nTypes","category":"page"},{"location":"resources/topic-index/#Visualization","page":"Topic Index","title":"📈 Visualization","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Intermediate | Description: Charts, plotting, and analysis tools","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nMetrics\nPlotting\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nLive\nMode Comparison\nPaper\nFirst Strategy\nOverview\nInstallation\nQuick Start\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nMetrics\nMobile Responsive Design\nOptimization\nPlotting\nStrategy\nTroubleshooting\nCoingecko\nCoinmarketcap\nCoinpaprika\nWatchers","category":"page"},{"location":"resources/topic-index/#Configuration","page":"Topic Index","title":"⚙️ Configuration","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Beginner | Description: Settings and environment configuration","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Exchanges\nConfig\nContacts\nCustomizations\nExchanges\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine\nLive\nMode Comparison\nPaper\nExchanges\nFirst Strategy\nOverview\nInstallation\nQuick Start\nData Management\nExecution Modes\nStrategy Development\nOverview\nOptimization\nPlotting\nPresentation\nOverview\nRemote\nStrategy\nTroubleshooting\nOverview\nTypes\nCoingecko\nCoinmarketcap\nCoinpaprika\nWatchers","category":"page"},{"location":"resources/topic-index/#Execution-Modes","page":"Topic Index","title":"🔄 Execution Modes","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Intermediate | Description: Simulation, paper, and live trading environments","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nBacktest\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine\nEngine_Notes\nFeatures\nLive\nMode Comparison\nPaper\nExchanges\nFirst Strategy\nOverview\nQuick Start\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nOptimization\nStrategy\nTroubleshooting\nTypes","category":"page"},{"location":"resources/topic-index/#Exchanges","page":"Topic Index","title":"🏦 Exchanges","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Intermediate | Description: Exchange integration and connectivity","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nCcxt\nExchanges\nOverview\nConfig\nCustomizations\nExchanges\nOrders\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine\nLive\nMode Comparison\nPaper\nExchanges\nFirst Strategy\nOverview\nInstallation\nQuick Start\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nMetrics\nOptimization\nPlotting\nOverview\nOverview\nStrategy\nTroubleshooting\nOverview\nTypes\nCoingecko\nCoinmarketcap\nCoinpaprika\nWatchers","category":"page"},{"location":"resources/topic-index/#Troubleshooting","page":"Topic Index","title":"🔧 Troubleshooting","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Any | Description: Problem resolution and debugging","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nOptimization\nConfig\nBacktest\nCustomizations\nData\nDevdocs\nDocumentation Index\nBacktesting\nEngine\nEngine_Notes\nLive\nMode Comparison\nPaper\nExchanges\nFirst Strategy\nOverview\nInstallation\nQuick Start\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nMetrics\nMobile Responsive Design\nOptimization\nPlotting\nStrategy\nTroubleshooting\nOverview\nTypes","category":"page"},{"location":"resources/topic-index/#Api-Reference","page":"Topic Index","title":"📚 Api Reference","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Difficulty: Advanced | Description: Function and API documentation","category":"page"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Api\nCcxt\nCollections\nData\nDfutils\nEngine\nExchanges\nExecutors\nFetch\nInstances\nInstruments\nMetrics\nMisc\nOptimization\nPbar\nPlotting\nPrices\nProcessing\nPython\nStrategies\nStrategystats\nStrategytools\nOverview\nConfig\nBacktest\nCall\nCustomizations\nExchanges\nOrders\nData\nDevdocs\nDisambiguation\nDocumentation Index\nBacktesting\nEngine\nLive\nMode Comparison\nPaper\nFirst Strategy\nOverview\nInstallation\nData Management\nExecution Modes\nOverview\nStrategy Development\nOverview\nMetrics\nOptimization\nPlotting\nOverview\nOverview\nStrategy\nTroubleshooting\nOverview\nTypes\nWatchers","category":"page"},{"location":"resources/topic-index/#Browse-by-Difficulty","page":"Topic Index","title":"Browse by Difficulty","text":"","category":"section"},{"location":"resources/topic-index/","page":"Topic Index","title":"Topic Index","text":"Beginner Topics - New to Planar? Start here\nIntermediate Topics - Ready to build strategies\nAdvanced Topics - Expert-level customization","category":"page"},{"location":"engine/backtesting/#Running-a-Backtest","page":"Backtesting","title":"Running a Backtest","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"To perform a backtest, you need to construct a [Strategy Documentation](../strategy. Once the strategy is created, you can call the start! function on it to begin the backtest.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"The entry function that is called in all modes is call!(s::Strategy, ts::DateTime, ctx). This function takes three arguments:","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"s: The strategy object that you have created.\nts: The current date. In live mode, it is very close to now(), while in simulation mode, it is the date of the iteration step.\nctx: Additional context information that can be passed to the function.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"During the backtest, the call! function is responsible for executing the strategy's logic at each timestep. It is called repeatedly with updated values of ts until the backtest is complete.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"It is important to note that the call! function should be implemented in your strategy module according to your specific trading logic.","category":"page"},{"location":"engine/backtesting/#Backtest-Configuration","page":"Backtesting","title":"Backtest Configuration","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Before running a backtest, you can configure various parameters to control the simulation behavior:","category":"page"},{"location":"engine/backtesting/#Time-Range-Configuration","page":"Backtesting","title":"Time Range Configuration","text":"","category":"section"},{"location":"engine/backtesting/#Initial-Capital-and-Position-Sizing","page":"Backtesting","title":"Initial Capital and Position Sizing","text":"","category":"section"},{"location":"engine/backtesting/#Performance-Optimization-Settings","page":"Backtesting","title":"Performance Optimization Settings","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"For large backtests, consider these optimization settings:","category":"page"},{"location":"engine/backtesting/#Basic-Example","page":"Backtesting","title":"Basic Example","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Here is an example of how to use the call! function in a strategy module:","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Let's run a backtest.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Our backtest indicates that our strategy:","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Operated on 3 assets (instances)\nExecuted 977 trades\nStarted with 100 USDT and finished with 32 USDT in cash, and assets worth 156 USDT\nThe asset with the minimum value at the end was BTC, and the one with the maximum value was XMR\nAt the end, there were 3 open buy orders and no open sell orders.","category":"page"},{"location":"engine/backtesting/#Comprehensive-Backtest-Example","page":"Backtesting","title":"Comprehensive Backtest Example","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Here's a more detailed example showing a complete backtesting workflow:","category":"page"},{"location":"engine/backtesting/#Advanced-Backtesting-Features","page":"Backtesting","title":"Advanced Backtesting Features","text":"","category":"section"},{"location":"engine/backtesting/#Multi-Timeframe-Backtesting","page":"Backtesting","title":"Multi-Timeframe Backtesting","text":"","category":"section"},{"location":"engine/backtesting/#Walk-Forward-Analysis","page":"Backtesting","title":"Walk-Forward Analysis","text":"","category":"section"},{"location":"engine/backtesting/#Orders","page":"Backtesting","title":"Orders","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"To place a limit order within your strategy, you call call! just like any call to the executor. Here are the arguments:","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Where s is your Strategy{Sim, ...} instance, ai is the AssetInstance to which the order refers (it should be one present in your s.universe). The amount is the quantity in base currency and date should be the one fed to the call! function. During backtesting, this would be the current timestamp being evaluated, and during live trading, it would be a recent timestamp. If you look at the example strategy, ts is current and ats is available. The available timestamp ats is the one that matches the last candle that doesn't give you forward knowledge. The date given to the order call (call!) must always be the current timestamp.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"A limit order call might return a trade if the order was queued correctly. If the trade hasn't completed the order, the order is queued in s.buy/sellorders[ai]. If isnothing(trade) is true, it means the order failed and was not scheduled. This can happen if the cost of the trade did not meet the asset limits, or there wasn't enough commitable cash. If instead ismissing(trade) is true, it means that the order was scheduled, but no trade has yet been performed. In backtesting, this happens if the price of the order is too low (buy) or too high (sell) for the current candle high/low prices.","category":"page"},{"location":"engine/backtesting/#Limit-Order-Types","page":"Backtesting","title":"Limit Order Types","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"In addition to GTC (Good Till Canceled) orders, there are also IOC (Immediate Or Cancel) and FOK (Fill Or Kill) orders:","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"GTC (Good Till Canceled): This order remains active until it is either filled or canceled. Best for strategies that can wait for favorable prices.\nIOC (Immediate Or Cancel): This order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled. Useful for capturing immediate opportunities.\nFOK (Fill Or Kill): This order must be executed in its entirety or not at all. Ideal when you need exact position sizes.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"All three are subtypes of a limit order, <: LimitOrder>. You can create them by calling call! as shown below:","category":"page"},{"location":"engine/backtesting/#Comprehensive-Order-Examples","page":"Backtesting","title":"Comprehensive Order Examples","text":"","category":"section"},{"location":"engine/backtesting/#Basic-Limit-Orders","page":"Backtesting","title":"Basic Limit Orders","text":"","category":"section"},{"location":"engine/backtesting/#Advanced-Order-Strategies","page":"Backtesting","title":"Advanced Order Strategies","text":"","category":"section"},{"location":"engine/backtesting/#Order-Management-Patterns","page":"Backtesting","title":"Order Management Patterns","text":"","category":"section"},{"location":"engine/backtesting/#Market-Order-Types","page":"Backtesting","title":"Market Order Types","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Market order types include:","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"MarketOrder: This order is executed at the best available price in the market. Use when immediate execution is more important than price.\nLiquidationOrder: This order is similar to a MarketOrder, but its execution price might differ from the candle price due to forced liquidation mechanics.\nReduceOnlyOrder: This is a market order that is automatically triggered when manually closing a position. Only reduces existing positions, never increases them.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"All of these behave in the same way, except for the LiquidationOrder. For example, a ReduceOnlyOrder is triggered when manually closing a position, as shown below:","category":"page"},{"location":"engine/backtesting/#Market-Order-Examples","page":"Backtesting","title":"Market Order Examples","text":"","category":"section"},{"location":"engine/backtesting/#Basic-Market-Orders","page":"Backtesting","title":"Basic Market Orders","text":"","category":"section"},{"location":"engine/backtesting/#Advanced-Market-Order-Strategies","page":"Backtesting","title":"Advanced Market Order Strategies","text":"","category":"section"},{"location":"engine/backtesting/#Risk-Management-with-Market-Orders","page":"Backtesting","title":"Risk Management with Market Orders","text":"","category":"section"},{"location":"engine/backtesting/#Market-Orders","page":"Backtesting","title":"Market Orders","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Although the ccxt library allows setting timeInForce for market orders because exchanges generally permit it, there isn't definitive information about how a market order is handled in these cases. Given that we are dealing with cryptocurrencies, some contexts like open and close times days are lost. It's plausible that timeInForce only matters when the order book doesn't have enough liquidity; otherwise, market orders are always immediate and fully filled orders. For this reason, we always consider market orders as FOK orders, and they will always have timeInForce set to FOK when executed live (through ccxt) to match the backtester.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"warning: Market orders can be surprising\nMarket orders always go through in the backtest. If the candle has no volume, the order incurs in heavy slippage, and the execution price of the trades can exceed the candle high/low price.","category":"page"},{"location":"engine/backtesting/#Checks","page":"Backtesting","title":"Checks","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Before an order is created, several checks are performed to sanitize the values. For instance, if the specified amount is too small, the system will automatically adjust it to the minimum allowable amount. However, if there isn't sufficient cash after this adjustment, the order will fail. For more information on precision and limits, please refer to the ccxt documentation.","category":"page"},{"location":"engine/backtesting/#Fees","page":"Backtesting","title":"Fees","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"The fees are derived from the AssetInstance fees property, which is populated by parsing the ccxt data for the specific symbol. Every trade takes these fees into account.","category":"page"},{"location":"engine/backtesting/#Slippage","page":"Backtesting","title":"Slippage","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Slippage is factored into the trade execution process. Here's how it works for different types of orders:","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Limit Orders: These can only experience positive slippage. When an order is placed and the price moves in your favor, the actual execution price becomes slightly lower (for buy orders) or higher (for sell orders). The slippage formula considers volatility (high/low) and fill ratio (amount/volume). The more volume the order takes from the candle, the lower the positive slippage will be. Conversely, higher volatility leads to higher positive slippage. Positive slippage is only added for candles that move against the order side, meaning it will only be added on red candles for buys, and green candles for sells.\nMarket Orders: These can only experience negative slippage. There is always a minimum slippage added, which by default corresponds to the difference between open and close prices (other formulas are available, check the API reference). On top of this, additional skew is added based on volume and volatility.","category":"page"},{"location":"engine/backtesting/#Liquidations","page":"Backtesting","title":"Liquidations","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"In isolated margin mode, liquidations are triggered by checking the LIQUIDATION_BUFFER. You can customize the buffer size by setting the value of the environment variable PLANAR_LIQUIDATION_BUFFER. This allows you to adjust the threshold at which liquidations are triggered.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"To obtain more accurate estimations, you can utilize the effective funding rate. This can be done by downloading the funding rate history using the Fetch module. By analyzing the funding rate history, you can gain insights into the funding costs associated with trading in isolated margin mode.","category":"page"},{"location":"engine/backtesting/#Liquidation-Mechanics","page":"Backtesting","title":"Liquidation Mechanics","text":"","category":"section"},{"location":"engine/backtesting/#Liquidation-Buffer-Configuration","page":"Backtesting","title":"Liquidation Buffer Configuration","text":"","category":"section"},{"location":"engine/backtesting/#Liquidation-Price-Calculation","page":"Backtesting","title":"Liquidation Price Calculation","text":"","category":"section"},{"location":"engine/backtesting/#Liquidation-Risk-Management","page":"Backtesting","title":"Liquidation Risk Management","text":"","category":"section"},{"location":"engine/backtesting/#Funding-Rate-Integration","page":"Backtesting","title":"Funding Rate Integration","text":"","category":"section"},{"location":"engine/backtesting/#See-Also","page":"Backtesting","title":"See Also","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management","category":"page"},{"location":"engine/backtesting/#Backtesting-Performance","page":"Backtesting","title":"Backtesting Performance","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Local benchmarking indicates that the :Example strategy, which employs FOK orders, operates on three assets, trades in spot markets, and utilizes a simple logic (which can be reviewed in the strategy code) to execute orders, currently takes approximately ~8 seconds to cycle through ~1.3M * 3 (assets) ~= 3.9M candles, executing ~6000 trades on a single x86 core.","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"It's crucial to note that the type of orders executed and the number of trades performed can significantly impact the runtime, aside from other evident factors like additional strategy logic or the number of assets. Therefore, caution is advised when interpreting claims about a backtester's ability to process X rows in Y time without additional context. Furthermore, our order creation logic always ensures that order inputs adhere to the exchanges's limits, and we also incorporate slippage and probability calculations, enabling the backtester to be \"MC simmable\".","category":"page"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Backtesting a strategy with margin will inevitably be slower due to the need to account for all the necessary calculations, such as position states and liquidation triggers.","category":"page"},{"location":"engine/backtesting/#Performance-Optimization-Guidelines","page":"Backtesting","title":"Performance Optimization Guidelines","text":"","category":"section"},{"location":"engine/backtesting/#Memory-Management","page":"Backtesting","title":"Memory Management","text":"","category":"section"},{"location":"engine/backtesting/#CPU-Optimization","page":"Backtesting","title":"CPU Optimization","text":"","category":"section"},{"location":"engine/backtesting/#I/O-Optimization","page":"Backtesting","title":"I/O Optimization","text":"","category":"section"},{"location":"engine/backtesting/#Performance-Benchmarks","page":"Backtesting","title":"Performance Benchmarks","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Strategy Type Assets Timeframe Candles Trades Time Memory\nSimple MA 3 1h 3.9M 6K 8s 2GB\nComplex Multi-TF 10 1h/4h/1d 12M 15K 45s 6GB\nMargin Strategy 5 15m 8M 25K 120s 4GB\nHigh-Freq 1 1m 2M 50K 30s 1GB","category":"page"},{"location":"engine/backtesting/#Profiling-and-Debugging","page":"Backtesting","title":"Profiling and Debugging","text":"","category":"section"},{"location":"engine/backtesting/#Optimization-Recommendations","page":"Backtesting","title":"Optimization Recommendations","text":"","category":"section"},{"location":"engine/backtesting/","page":"Backtesting","title":"Backtesting","text":"Data Management:\nUse Zarr format for large datasets\nImplement data chunking for memory efficiency\nCache frequently accessed indicators\nStrategy Logic:\nMinimize allocations in hot paths\nUse in-place operations where possible\nAvoid unnecessary calculations in the main loop\nOrder Processing:\nBatch order operations when possible\nUse appropriate order types for your strategy\nConsider order frequency impact on performance\nMulti-Asset Strategies:\nEnable parallel processing for independent assets\nBalance memory usage vs. processing speed\nConsider asset correlation in optimization","category":"page"},{"location":"advanced/#Advanced-Topics","page":"Advanced Topics","title":"Advanced Topics","text":"","category":"section"},{"location":"advanced/","page":"Advanced Topics","title":"Advanced Topics","text":"This section covers advanced Planar usage patterns and customization techniques.","category":"page"},{"location":"advanced/#Available-Topics","page":"Advanced Topics","title":"Available Topics","text":"","category":"section"},{"location":"advanced/","page":"Advanced Topics","title":"Advanced Topics","text":"Customization - Extending Planar\nMargin Trading - Advanced trading features\nMulti-Exchange - Complex setups\nPerformance - Optimization and scaling","category":"page"},{"location":"advanced/#Prerequisites","page":"Advanced Topics","title":"Prerequisites","text":"","category":"section"},{"location":"advanced/","page":"Advanced Topics","title":"Advanced Topics","text":"These topics assume familiarity with basic Planar concepts covered in the Development Guides.","category":"page"},{"location":"advanced/#See-Also","page":"Advanced Topics","title":"See Also","text":"","category":"section"},{"location":"advanced/","page":"Advanced Topics","title":"Advanced Topics","text":"API Reference - Complete function documentation\nTroubleshooting - Problem resolution","category":"page"},{"location":"documentation-index/#Documentation-Index","page":"Documentation Index","title":"Documentation Index","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"This comprehensive index helps you quickly find information across all Planar documentation.","category":"page"},{"location":"documentation-index/#Topics-by-Category","page":"Documentation Index","title":"Topics by Category","text":"","category":"section"},{"location":"documentation-index/#Getting-Started","page":"Documentation Index","title":"Getting Started","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Installation - Docker, Source\nQuick Start - 15-minute tutorial\nFirst Strategy - Tutorial, Examples","category":"page"},{"location":"documentation-index/#Strategy-Development","page":"Documentation Index","title":"Strategy Development","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Strategy Basics - Architecture, Dispatch System\nStrategy Creation - Interactive Generator, Manual Setup\nStrategy Loading - Runtime Loading, Configuration\nAdvanced Patterns - Multi-timeframe, Portfolio Rebalancing\nMargin Trading - Concepts, Position Management","category":"page"},{"location":"documentation-index/#Data-Management","page":"Documentation Index","title":"Data Management","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Storage - Zarr Backend, LMDB, Organization\nHistorical Data - Scrapers, Binance Archives\nReal-time Data - Fetch Module, Rate Limits\nLive Streaming - Watchers, OHLCV Tickers","category":"page"},{"location":"documentation-index/#Execution-Modes","page":"Documentation Index","title":"Execution Modes","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Backtesting - Configuration, Performance\nPaper Trading - Setup, Real-time Simulation\nLive Trading - API Setup, Risk Management, Monitoring\nMode Comparison - Feature Matrix, Transition Guide","category":"page"},{"location":"documentation-index/#Optimization","page":"Documentation Index","title":"Optimization","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Methods - Grid Search, Bayesian Optimization\nConfiguration - Parameter Definition, Objective Functions\nResults - Analysis, Visualization","category":"page"},{"location":"documentation-index/#Visualization","page":"Documentation Index","title":"Visualization","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Chart Types - OHLCV, Trade Visualization\nCustomization - Styling, Interactivity\nBackends - GLMakie, WGLMakie","category":"page"},{"location":"documentation-index/#Customization","page":"Documentation Index","title":"Customization","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Dispatch System - Overview, Patterns\nCustom Orders - Implementation, Examples\nExchange Extensions - Adding Exchanges, Custom Behavior","category":"page"},{"location":"documentation-index/#Function-Index","page":"Documentation Index","title":"Function Index","text":"","category":"section"},{"location":"documentation-index/#Core-Functions","page":"Documentation Index","title":"Core Functions","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"strategy() - Strategy Loading\nstart!() - Backtesting, Strategy Execution\ncall!() - Dispatch System, Strategy Interface\nfetch_ohlcv() - Data Fetching\nload_ohlcv() - Data Loading","category":"page"},{"location":"documentation-index/#Data-Functions","page":"Documentation Index","title":"Data Functions","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"fetch_candles() - Raw Data Fetching\nbinancedownload() - Historical Data\nbinanceload() - Data Loading","category":"page"},{"location":"documentation-index/#Order-Functions","page":"Documentation Index","title":"Order Functions","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"MarketOrder() - Order Types\nLimitOrder() - Order Types\nStopOrder() - Order Types","category":"page"},{"location":"documentation-index/#Analysis-Functions","page":"Documentation Index","title":"Analysis Functions","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"sharpe() - Performance Metrics\nsortino() - Performance Metrics\nmaxdrawdown() - Risk Metrics","category":"page"},{"location":"documentation-index/#Plotting-Functions","page":"Documentation Index","title":"Plotting Functions","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"balloons() - Trade Visualization\nohlcv() - OHLCV Charts\nplot_optimization() - Optimization Results","category":"page"},{"location":"documentation-index/#Configuration-Topics","page":"Documentation Index","title":"Configuration Topics","text":"","category":"section"},{"location":"documentation-index/#Strategy-Configuration","page":"Documentation Index","title":"Strategy Configuration","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Constants - DESCRIPTION, EXC, MARGIN, TF\nEnvironment Macros - @strategyenv!, @contractsenv!, @optenv!\nParameters - Strategy Attributes","category":"page"},{"location":"documentation-index/#System-Configuration","page":"Documentation Index","title":"System Configuration","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Environment Variables - JULIAPROJECT, JULIANUM_THREADS\nExchange APIs - API Keys, Sandbox Mode\nData Storage - LMDB Configuration","category":"page"},{"location":"documentation-index/#Error-Handling","page":"Documentation Index","title":"Error Handling","text":"","category":"section"},{"location":"documentation-index/#Common-Issues","page":"Documentation Index","title":"Common Issues","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Installation Problems - Dependency Conflicts\nStrategy Loading - Module Not Found\nData Issues - Missing Data\nOrder Execution - Insufficient Funds","category":"page"},{"location":"documentation-index/#Debugging","page":"Documentation Index","title":"Debugging","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Logging - Strategy Debugging\nState Inspection - Debug Methods\nPerformance - Profiling","category":"page"},{"location":"documentation-index/#File-Locations","page":"Documentation Index","title":"File Locations","text":"","category":"section"},{"location":"documentation-index/#User-Files","page":"Documentation Index","title":"User Files","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Strategies - user/[strategies](guides/../guides/strategy-development.md)/\nConfiguration - user/[planar.toml](config.md#configuration)-file)\nSecrets - user/[secrets.toml](config.md#secrets-management)\nData - user/data.mdb, user/lock.mdb","category":"page"},{"location":"documentation-index/#Documentation","page":"Documentation Index","title":"Documentation","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Source - docs/src/\nAPI Reference - docs/src/API/\nExamples - user/[strategies](guides/../guides/strategy-development.md)/QuickStart/examples/","category":"page"},{"location":"documentation-index/#Search-Keywords","page":"Documentation Index","title":"Search Keywords","text":"","category":"section"},{"location":"documentation-index/#Trading-Concepts","page":"Documentation Index","title":"Trading Concepts","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"OHLCV, Candlestick, Timeframe, Exchange, Pair, Symbol\nLong, Short, Position, Margin, Leverage, Isolated, Cross\nBuy, Sell, Order, Trade, Execution, Slippage, Fees\nBacktest, Paper Trading, Live Trading, Simulation","category":"page"},{"location":"documentation-index/#Technical-Concepts","page":"Documentation Index","title":"Technical Concepts","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Dispatch, Multiple Dispatch, Type System, Parametric Types\nStrategy, Module, Function, Method, Interface\nData, Storage, Zarr, LMDB, Fetch, Scraper, Watcher\nOptimization, Grid Search, Bayesian, Parameter Tuning","category":"page"},{"location":"documentation-index/#Performance-Concepts","page":"Documentation Index","title":"Performance Concepts","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Sharpe Ratio, Sortino Ratio, Maximum Drawdown, Volatility\nReturn, Profit, Loss, Risk, Portfolio, Allocation\nBenchmark, Alpha, Beta, Correlation, Statistics","category":"page"},{"location":"documentation-index/#See-Also","page":"Documentation Index","title":"See Also","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"documentation-index/#Quick-Reference","page":"Documentation Index","title":"Quick Reference","text":"","category":"section"},{"location":"documentation-index/#Essential-Commands","page":"Documentation Index","title":"Essential Commands","text":"","category":"section"},{"location":"documentation-index/#Key-File-Paths","page":"Documentation Index","title":"Key File Paths","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Strategy files: user/[strategies](guides/../guides/strategy-development.md)/StrategyName.jl\nConfiguration: user/[planar.toml](config.md#configuration-file)\nDocumentation: docs/src/\nExamples: user/strategies/QuickStart/examples/","category":"page"},{"location":"documentation-index/#Important-Links","page":"Documentation Index","title":"Important Links","text":"","category":"section"},{"location":"documentation-index/","page":"Documentation Index","title":"Documentation Index","text":"Getting Started - Begin here\nStrategy Guide - Core development guide\nAPI Reference - Complete function documentation\nTroubleshooting - Problem solving\nCommunity - Get help and support","category":"page"},{"location":"contacts/#Github","page":"Community","title":"Github","text":"","category":"section"},{"location":"contacts/","page":"Community","title":"Community","text":"Submit an issue","category":"page"},{"location":"contacts/#Discord","page":"Community","title":"Discord","text":"","category":"section"},{"location":"contacts/","page":"Community","title":"Community","text":"join the discord chat   (Image: Discord) ","category":"page"},{"location":"reference/examples/basic-strategy/#Basic-Strategy-Structure","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"This example demonstrates the fundamental structure of a Planar strategy. Use this as a starting template for your own strategies.","category":"page"},{"location":"reference/examples/basic-strategy/#Overview","page":"Basic Strategy Structure","title":"Overview","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"What this example demonstrates:","category":"page"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Basic strategy module structure\nEssential strategy functions\nConfiguration and parameters\nSimple trading logic template","category":"page"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Complexity: Beginner   Prerequisites: Understanding of Getting Started Guide","category":"page"},{"location":"reference/examples/basic-strategy/#Complete-Example","page":"Basic Strategy Structure","title":"Complete Example","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Usage-Example","page":"Basic Strategy Structure","title":"Usage Example","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Key-Components-Explained","page":"Basic Strategy Structure","title":"Key Components Explained","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#1.-Module-Declaration","page":"Basic Strategy Structure","title":"1. Module Declaration","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Every strategy is a Julia module\n@strategyenv! imports necessary Planar functions and types","category":"page"},{"location":"reference/examples/basic-strategy/#2.-Configuration-Constants","page":"Basic Strategy Structure","title":"2. Configuration Constants","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"DESCRIPTION: Human-readable strategy description\nTIMEFRAME: The primary timeframe the strategy operates on","category":"page"},{"location":"reference/examples/basic-strategy/#3.-Parameters","page":"Basic Strategy Structure","title":"3. Parameters","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Use Ref() for parameters that might be optimized\nMakes parameters mutable for optimization algorithms","category":"page"},{"location":"reference/examples/basic-strategy/#4.-Market-Definition","page":"Basic Strategy Structure","title":"4. Market Definition","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Defines which markets/symbols the strategy will trade\nReturn a vector of symbol strings","category":"page"},{"location":"reference/examples/basic-strategy/#5.-Main-Strategy-Logic","page":"Basic Strategy Structure","title":"5. Main Strategy Logic","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Called on each time step during execution\nContains the core trading decision logic","category":"page"},{"location":"reference/examples/basic-strategy/#Customization-Guide","page":"Basic Strategy Structure","title":"Customization Guide","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Adding-New-Parameters","page":"Basic Strategy Structure","title":"Adding New Parameters","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Adding-More-Assets","page":"Basic Strategy Structure","title":"Adding More Assets","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Adding-Technical-Indicators","page":"Basic Strategy Structure","title":"Adding Technical Indicators","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n    \n    # Example technical indicator usage\n    # Note: This would be inside a strategy function with proper ai parameter\n    \n    function example_indicator_logic(ai)\n        # Example moving average calculations\n        # In real usage: sma_20 = simple_moving_average(closeat(ohlcv(ai), -20:-1), 20)\n        sma_20 = 50000.0  # Example value\n        sma_50 = 49500.0  # Example value\n        \n        if !isnan(sma_20) && !isnan(sma_50) && sma_20 > sma_50\n            # Golden cross - bullish signal\n            @info \"Golden cross detected\" asset=\"BTC/USDT\"\n            return :bullish\n        end\n        return :neutral\n    end\n    \n    # Example usage\n    result = example_indicator_logic(\"BTC/USDT\")\n    println(\"Signal: $result\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"reference/examples/basic-strategy/#Testing-Your-Strategy","page":"Basic Strategy Structure","title":"Testing Your Strategy","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#1.-Simulation-Testing","page":"Basic Strategy Structure","title":"1. Simulation Testing","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    using Dates\n    @environment!\n    \n    # Example simulation testing\n    println(\"Example simulation testing:\")\n    println(\"s = strategy(:BasicStrategy, Sim())\")\n    println(\"load_ohlcv(s)\")\n    println(\"results = backtest(s, from=DateTime(\\\"2024-01-01\\\"), to=DateTime(\\\"2024-12-31\\\"))\")\n    \n    # Note: Real usage requires:\n    # 1. A defined strategy named :BasicStrategy\n    # 2. Proper data setup\n    # 3. Exchange configuration\n    \n    # Example result structure\n    println(\"Expected results structure: (returns, trades, metrics)\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"reference/examples/basic-strategy/#2.-Paper-Trading","page":"Basic Strategy Structure","title":"2. Paper Trading","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"# Test with live data but no real money\ns = strategy(:BasicStrategy, Paper())\nload_ohlcv(s)\nstart!(s)","category":"page"},{"location":"reference/examples/basic-strategy/#3.-Parameter-Testing","page":"Basic Strategy Structure","title":"3. Parameter Testing","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Common-Patterns","page":"Basic Strategy Structure","title":"Common Patterns","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Error-Handling","page":"Basic Strategy Structure","title":"Error Handling","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Logging-and-Debugging","page":"Basic Strategy Structure","title":"Logging and Debugging","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Data-Validation","page":"Basic Strategy Structure","title":"Data Validation","text":"","category":"section"},{"location":"reference/examples/basic-strategy/#Next-Steps","page":"Basic Strategy Structure","title":"Next Steps","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"After mastering this basic structure:","category":"page"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Add Indicators: Learn Simple Indicators\nImplement Orders: See Order Placement\nAdd Risk Management: Check Risk Management\nMulti-Asset Trading: Explore Multi-Asset Strategies","category":"page"},{"location":"reference/examples/basic-strategy/#See-Also","page":"Basic Strategy Structure","title":"See Also","text":"","category":"section"},{"location":"reference/examples/basic-strategy/","page":"Basic Strategy Structure","title":"Basic Strategy Structure","text":"Strategy Development Guide - Complete strategy development guide\nGetting Started - Your first strategy tutorial\nStrategies API - Strategy API reference\nSimple Indicators Example - Adding technical indicators","category":"page"},{"location":"troubleshooting/performance-issues/#Performance-Issues","page":"Performance Issues","title":"Performance Issues","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"This guide helps optimize Planar performance and resolve speed-related problems.","category":"page"},{"location":"troubleshooting/performance-issues/#Compilation-and-Startup-Issues","page":"Performance Issues","title":"Compilation and Startup Issues","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Slow-First-Run","page":"Performance Issues","title":"Slow First Run","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Initial startup takes several minutes.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"# Use precompiled sysimage\njulia --sysimage=planar.so --project=Planar\n\n# Or use Docker with pre-built sysimage\ndocker run docker.io/psydyllic/planar-sysimage","category":"page"},{"location":"troubleshooting/performance-issues/#Repeated-Compilation","page":"Performance Issues","title":"Repeated Compilation","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Code recompiles on every run.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Memory-Issues","page":"Performance Issues","title":"Memory Issues","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#High-Memory-Usage","page":"Performance Issues","title":"High Memory Usage","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Planar consumes excessive memory.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Memory-Leaks","page":"Performance Issues","title":"Memory Leaks","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Memory usage grows over time.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Out-of-Memory-Errors","page":"Performance Issues","title":"Out of Memory Errors","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: System runs out of memory during large operations.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Backtesting-Performance","page":"Performance Issues","title":"Backtesting Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Slow-Backtests","page":"Performance Issues","title":"Slow Backtests","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Backtests take too long to complete.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#CPU-Bottlenecks","page":"Performance Issues","title":"CPU Bottlenecks","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: High CPU usage during backtests.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Data-Performance","page":"Performance Issues","title":"Data Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Slow-Data-Loading","page":"Performance Issues","title":"Slow Data Loading","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Historical data takes long to load.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Database-Performance","page":"Performance Issues","title":"Database Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: LMDB operations are slow.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Network-Performance","page":"Performance Issues","title":"Network Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Slow-API-Calls","page":"Performance Issues","title":"Slow API Calls","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Exchange API calls are slow.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Rate-Limiting-Impact","page":"Performance Issues","title":"Rate Limiting Impact","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Rate limits slow down operations.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Strategy-Performance","page":"Performance Issues","title":"Strategy Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Slow-Strategy-Execution","page":"Performance Issues","title":"Slow Strategy Execution","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Strategy logic is slow during backtests.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Indicator-Calculation-Bottlenecks","page":"Performance Issues","title":"Indicator Calculation Bottlenecks","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Technical indicators slow down strategy.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Optimization-Strategies","page":"Performance Issues","title":"Optimization Strategies","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Parameter-Optimization-Performance","page":"Performance Issues","title":"Parameter Optimization Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Parameter optimization takes too long.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#Multi-Strategy-Performance","page":"Performance Issues","title":"Multi-Strategy Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Problem: Running multiple strategies is slow.","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/performance-issues/#System-Optimization","page":"Performance Issues","title":"System Optimization","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Julia-Configuration","page":"Performance Issues","title":"Julia Configuration","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Operating-System-Tuning","page":"Performance Issues","title":"Operating System Tuning","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"# Increase file descriptor limits\nulimit -n 65536\n\n# Optimize memory settings\necho 'vm.swappiness=10' >> /etc/sysctl.conf\n\n# Use performance CPU governor\necho performance > /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor","category":"page"},{"location":"troubleshooting/performance-issues/#Monitoring-Performance","page":"Performance Issues","title":"Monitoring Performance","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Built-in-Profiling","page":"Performance Issues","title":"Built-in Profiling","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#External-Monitoring","page":"Performance Issues","title":"External Monitoring","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Hardware-Recommendations","page":"Performance Issues","title":"Hardware Recommendations","text":"","category":"section"},{"location":"troubleshooting/performance-issues/#Minimum-Requirements","page":"Performance Issues","title":"Minimum Requirements","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"CPU: 4+ cores, 2.5+ GHz\nRAM: 8GB+ (16GB+ recommended)\nStorage: SSD recommended for data directory\nNetwork: Stable internet connection","category":"page"},{"location":"troubleshooting/performance-issues/#Optimal-Configuration","page":"Performance Issues","title":"Optimal Configuration","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"CPU: 8+ cores, 3.0+ GHz (Intel/AMD)\nRAM: 32GB+ for large backtests\nStorage: NVMe SSD for data and temp files\nNetwork: Low-latency connection for live trading","category":"page"},{"location":"troubleshooting/performance-issues/#Getting-Help","page":"Performance Issues","title":"Getting Help","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"For performance issues:","category":"page"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Check system requirements\nReview configuration guide\nProfile your specific use case\nAsk for help with performance data\nConsider hardware upgrades","category":"page"},{"location":"troubleshooting/performance-issues/#Related-Documentation","page":"Performance Issues","title":"Related Documentation","text":"","category":"section"},{"location":"troubleshooting/performance-issues/","page":"Performance Issues","title":"Performance Issues","text":"Configuration Guide\nInstallation Guide\nOptimization Guide","category":"page"},{"location":"API/collections/#Collections","page":"Collections","title":"Collections","text":"","category":"section"},{"location":"API/collections/#Collections.Collections","page":"Collections","title":"Collections.Collections","text":"=Collections= module\n\n\n\n\n\n","category":"module"},{"location":"API/collections/#Collections.AssetCollection","page":"Collections","title":"Collections.AssetCollection","text":"A type representing a collection of asset instances.\n\ndata\n\nThis type is used to store and manage a collection of asset instances. Each instance is linked to an asset and an exchange identifier. Elements from AssetCollection can be accessed using getindex and setindex! which accepts different types including ExchangeID, AbstractAsset, AbstractString, MatchString, or a combination of base, quote currency, and exchange. Iterating over the collection only iterates over the instances within.\n\n\n\n\n\n","category":"type"},{"location":"API/collections/#TimeTicks.DateRange","page":"Collections","title":"TimeTicks.DateRange","text":"Makes a date range that spans the common minimum and maximum dates of the collection.\n\nDateRange(\n    ac::Collections.AssetCollection;\n    ...\n) -> TimeTicks.DateRange\nDateRange(\n    ac::Collections.AssetCollection,\n    tf;\n    full,\n    kwargs...\n) -> TimeTicks.DateRange\n\n\nThe DateRange function takes the following parameters:\n\nac: an AssetCollection object which encapsulates a collection of assets.\ntf (optional): a TimeFrame object that represents a specific time frame. If not provided, the function will calculate the date range based on all time frames in the AssetCollection.\nskip_empty (optional, default is false): a boolean that indicates whether to skip empty data frames in the calculation of the date range.\n\n\n\n\n\n","category":"type"},{"location":"API/collections/#Collections._daterange_full","page":"Collections","title":"Collections._daterange_full","text":"Makes a date range that spans the union (earliest start to latest end) of the collection.\n\n_daterange_full(\n    ac::Collections.AssetCollection;\n    ...\n) -> TimeTicks.DateRange\n_daterange_full(\n    ac::Collections.AssetCollection,\n    tf;\n    kwargs...\n) -> TimeTicks.DateRange\n\n\nThe daterange function returns a DateRange covering the earliest available timestamp and the latest available timestamp across all assets' OHLCV data in the AssetCollection.\n\nParameters:\n\nac: the AssetCollection\ntf (optional): a TimeFrame. If not provided, it is inferred from the first asset instance\n\n\n\n\n\n","category":"function"},{"location":"API/collections/#Collections.bqe-Union{Tuple{T}, Tuple{DataFrames.DataFrame, T, T, T}} where T<:Symbol","page":"Collections","title":"Collections.bqe","text":"Dispatch based on either base, quote currency, or exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/collections/#Collections.flatten-Tuple{Collections.AssetCollection}","page":"Collections","title":"Collections.flatten","text":"Returns a dictionary of all the OHLCV dataframes present in the asset collection.\n\nflatten(\n    ac::Collections.AssetCollection;\n    noempty\n) -> SortedDict{TimeFrames.TimeFrame, Vector{DataFrames.DataFrame}, Base.Order.ForwardOrdering}\n\n\nThe flatten function takes the following parameter:\n\nac: an AssetCollection object which encapsulates a collection of assets.\n\nThe function returns a SortedDict where the keys are TimeFrame objects and the values are vectors of DataFrames that represent OHLCV (Open, High, Low, Close, Volume) data. The dictionary is sorted by the TimeFrame keys.\n\n\n\n\n\n","category":"method"},{"location":"API/collections/#Collections.iscashable-Tuple{Instruments.AbstractCash, Collections.AssetCollection}","page":"Collections","title":"Collections.iscashable","text":"Checks that all assets in the universe match the cash currency.\n\niscashable(\n    c::Instruments.AbstractCash,\n    ac::Collections.AssetCollection\n) -> Bool\n\n\nThe iscashable function takes the following parameters:\n\nc: an AbstractCash object which encapsulates a representation of cash.\nac: an AssetCollection object which encapsulates a collection of assets.\n\n\n\n\n\n","category":"method"},{"location":"API/collections/#Collections.prettydf-Tuple{Collections.AssetCollection}","page":"Collections","title":"Collections.prettydf","text":"Pretty prints the AssetCollection DataFrame.\n\nprettydf(\n    ac::Collections.AssetCollection;\n    full\n) -> DataFrames.DataFrame\n\n\nThe prettydf function takes the following parameters:\n\nac: an AssetCollection object which encapsulates a collection of assets.\nfull (optional, default is false): a boolean that indicates whether to print the full DataFrame. If true, the function prints the full DataFrame. If false, it prints a truncated version.\n\n\n\n\n\n","category":"method"},{"location":"reference/examples/simple-indicators/#Simple-Indicators-Examples","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"","category":"section"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"This example demonstrates how to calculate and use common technical indicators in Planar strategies. Learn to implement moving averages, RSI, MACD, and other essential indicators.","category":"page"},{"location":"reference/examples/simple-indicators/#Overview","page":"Simple Indicators Examples","title":"Overview","text":"","category":"section"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"What this example demonstrates:","category":"page"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"Simple and exponential moving averages\nRSI (Relative Strength Index) calculation\nMACD (Moving Average Convergence Divergence)\nBollinger Bands\nVolume indicators\nIndicator-based trading signals","category":"page"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"Complexity: Beginner   Prerequisites: Data Access Examples","category":"page"},{"location":"reference/examples/simple-indicators/#Complete-Indicators-Example","page":"Simple Indicators Examples","title":"Complete Indicators Example","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#Advanced-Indicators-Example","page":"Simple Indicators Examples","title":"Advanced Indicators Example","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#Indicator-Based-Strategy-Example","page":"Simple Indicators Examples","title":"Indicator-Based Strategy Example","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#Usage-Examples","page":"Simple Indicators Examples","title":"Usage Examples","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#Basic-Indicators","page":"Simple Indicators Examples","title":"Basic Indicators","text":"","category":"section"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"# PlanarDev loaded in project\n\n# Demonstrate basic indicator concepts\nprintln(\"Simple indicators example:\")\n\n# Show basic functionality\nprintln(\"Julia version: \", VERSION)\nprintln(\"Planar project loaded successfully!\")\n\n# Example of basic indicator calculation\nprintln(\"Example: Simple Moving Average calculation\")\nprintln(\"SMA = sum(prices) / length(prices)\")\n\n# Example data for demonstration\nprices = [100.0, 101.0, 102.0, 101.5, 103.0]\nsma = sum(prices) / length(prices)\nprintln(\"Prices: \", prices)\nprintln(\"SMA: \", sma)","category":"page"},{"location":"reference/examples/simple-indicators/#Advanced-Indicators","page":"Simple Indicators Examples","title":"Advanced Indicators","text":"","category":"section"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"# Test advanced indicators\ns_adv = strategy(:AdvancedIndicatorsExample)\nload_ohlcv(s_adv)\ncall!(s_adv, now(), nothing)","category":"page"},{"location":"reference/examples/simple-indicators/#Complete-Strategy","page":"Simple Indicators Examples","title":"Complete Strategy","text":"","category":"section"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"# PlanarDev loaded in project\nusing Dates\n\n# Demonstrate indicator-based strategy concepts\nprintln(\"Indicator-based strategy example:\")\n\n# Show basic functionality\nprintln(\"Julia environment ready!\")\nprintln(\"Planar project available: PlanarDev\")\n\n# Example indicator calculations\nprintln(\"Technical indicators demonstration:\")\nprices = [100.0, 101.0, 102.0, 101.5, 103.0, 104.0, 102.5, 105.0]\n\n# Simple Moving Average\nsma_5_value = sum(prices[end-4:end]) / 5\nprintln(\"5-period SMA: \", sma_5_value)\n\n# Price change\nprice_change = prices[end] - prices[end-1]\nprintln(\"Latest price change: \", price_change)\n\n# Example backtest period\nfrom_date = DateTime(\"2024-01-01\")\nto_date = DateTime(\"2024-06-30\")\nprintln(\"Backtest period: \", from_date, \" to \", to_date)","category":"page"},{"location":"reference/examples/simple-indicators/#Performance-Tips","page":"Simple Indicators Examples","title":"Performance Tips","text":"","category":"section"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"Cache Calculations: Store indicator values to avoid recalculation\nVectorize Operations: Use array operations when possible\nLimit Lookback: Only calculate indicators for required periods\nValidate Inputs: Always check for sufficient data before calculation\nHandle Edge Cases: Account for division by zero and invalid data","category":"page"},{"location":"reference/examples/simple-indicators/#Common-Indicator-Patterns","page":"Simple Indicators Examples","title":"Common Indicator Patterns","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#Trend-Following","page":"Simple Indicators Examples","title":"Trend Following","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#Mean-Reversion","page":"Simple Indicators Examples","title":"Mean Reversion","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#Volume-Confirmation","page":"Simple Indicators Examples","title":"Volume Confirmation","text":"","category":"section"},{"location":"reference/examples/simple-indicators/#See-Also","page":"Simple Indicators Examples","title":"See Also","text":"","category":"section"},{"location":"reference/examples/simple-indicators/","page":"Simple Indicators Examples","title":"Simple Indicators Examples","text":"Data Access Examples - Working with market data\nTechnical Analysis Examples - Advanced analysis techniques\nRisk Management Examples - Position sizing and stops\nMulti-Asset Strategies - Trading multiple assets","category":"page"},{"location":"troubleshooting/#Troubleshooting-Overview","page":"Troubleshooting","title":"Troubleshooting Overview","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page provides quick access to troubleshooting resources. For detailed solutions, visit the specific troubleshooting guides in the troubleshooting section.","category":"page"},{"location":"troubleshooting/#Quick-Access-to-Solutions","page":"Troubleshooting","title":"Quick Access to Solutions","text":"","category":"section"},{"location":"troubleshooting/#Most-Common-Issues","page":"Troubleshooting","title":"Most Common Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Installation Problems → Installation Issues\nStrategy Not Working → Strategy Problems  \nSlow Performance → Performance Issues\nExchange Errors → Exchange Issues","category":"page"},{"location":"troubleshooting/#Emergency-Quick-Fixes","page":"Troubleshooting","title":"Emergency Quick Fixes","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Complete Reset (Nuclear Option):","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Dependency Issues:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Python Problems:","category":"page"},{"location":"troubleshooting/#Comprehensive-Troubleshooting-Guides","page":"Troubleshooting","title":"Comprehensive Troubleshooting Guides","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For detailed solutions with step-by-step instructions, platform-specific guidance, and advanced diagnostics, see:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Troubleshooting Index - Complete troubleshooting guide with all categories\nInstallation Issues - Setup, dependencies, environment configuration\nStrategy Problems - Development, execution, debugging\nPerformance Issues - Optimization, memory, speed\nExchange Issues - Connectivity, authentication, trading","category":"page"},{"location":"troubleshooting/#Legacy-Content-Notice","page":"Troubleshooting","title":"Legacy Content Notice","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page previously contained comprehensive troubleshooting information. That content has been reorganized into categorized guides for better navigation and maintenance. If you're looking for specific troubleshooting information, please check the appropriate category above.","category":"page"},{"location":"troubleshooting/#Quick-Diagnostic-Checklist","page":"Troubleshooting","title":"Quick Diagnostic Checklist","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Before diving into specific issues, try these common solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Environment Check: Ensure you're using the correct Julia project\njulia --project=Planar  # or PlanarInteractive\nDependency Resolution: Update and resolve all dependencies\nClean Restart: Exit Julia completely and restart with a fresh REPL\nCheck Environment Variables: Verify JULIA_PROJECT, JULIA_NUM_THREADS, and other relevant settings","category":"page"},{"location":"troubleshooting/#Precompilation-Issues","page":"Troubleshooting","title":"Precompilation Issues","text":"","category":"section"},{"location":"troubleshooting/#Dependency-Conflicts","page":"Troubleshooting","title":"Dependency Conflicts","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Precompilation fails after repository updates, package version conflicts","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check for dependency conflicts in the output\nLook for version incompatibilities in error messages\nVerify all submodules are properly updated","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#REPL-Startup-Issues","page":"Troubleshooting","title":"REPL Startup Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Precompilation errors when activating project in existing REPL","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check if Julia was started with correct project\nVerify environment variables are set correctly\nLook for conflicting package environments","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Preferred: Start Julia with project directly\njulia --project=./Planar\n\n# Alternative: For interactive features\njulia --project=./PlanarInteractive\n\n# Check current project status\njulia> using Pkg; Pkg.status()","category":"page"},{"location":"troubleshooting/#Python-Dependent-Precompilation","page":"Troubleshooting","title":"Python-Dependent Precompilation","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Segmentation faults during precompilation, Python-related errors","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check if error occurs during Python module loading\nLook for @py macro usage in precompilable code\nVerify global cache states","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Prevention:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Keep global constants empty during precompilation\nUse lazy initialization for Python-dependent objects\nAvoid @py macros in precompilable functions","category":"page"},{"location":"troubleshooting/#Persistent-Precompilation-Skipping","page":"Troubleshooting","title":"Persistent Precompilation Skipping","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Packages consistently skip precompilation, slow startup times","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check JULIA_NOPRECOMP environment variable\nVerify package dependencies are precompiled\nLook for circular dependency issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Check environment variables\necho $JULIA_NOPRECOMP\necho $JULIA_PRECOMP\n\n# Clear environment variables if needed\nunset JULIA_NOPRECOMP\n\n# Force precompilation\njulia --project=Planar -e \"using Pkg; Pkg.precompile()\"","category":"page"},{"location":"troubleshooting/#Debug-Symbol-Issues","page":"Troubleshooting","title":"Debug Symbol Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: _debug_ not found errors during strategy execution","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check if JULIA_DEBUG=\"all\" is set\nVerify module precompilation status\nLook for debug/release mode mismatches","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Python-Integration-Issues","page":"Troubleshooting","title":"Python Integration Issues","text":"","category":"section"},{"location":"troubleshooting/#Missing-Python-Dependencies","page":"Troubleshooting","title":"Missing Python Dependencies","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: ModuleNotFoundError, missing Python packages, import failures","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check if CondaPkg environment is properly initialized\nVerify Python package installation status\nLook for environment path issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#CondaPkg-Environment-Issues","page":"Troubleshooting","title":"CondaPkg Environment Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Persistent Python module resolution failures, environment conflicts","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check CondaPkg status and configuration\nVerify environment variables are set correctly\nLook for conflicting Python installations","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Platform-Specific Notes:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Linux: Ensure system Python development headers are installed\nmacOS: May require Xcode command line tools\nWindows: Verify PATH environment variable includes Python","category":"page"},{"location":"troubleshooting/#Python-Julia-Interop-Issues","page":"Troubleshooting","title":"Python-Julia Interop Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Type conversion errors, async operation failures, memory issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check for type conversion problems between Python and Julia\nVerify async operation compatibility\nLook for memory management issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Exchange-Connection-Issues","page":"Troubleshooting","title":"Exchange Connection Issues","text":"","category":"section"},{"location":"troubleshooting/#Unresponsive-Exchange-Instance","page":"Troubleshooting","title":"Unresponsive Exchange Instance","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Timeout errors, connection refused, API calls hanging","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check exchange status and maintenance schedules\nVerify API credentials and permissions\nTest network connectivity to exchange endpoints","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Idle Connection Closure: If an exchange instance remains idle for an extended period, the connection may close. It should time out according to the ccxt exchange timeout. Following a timeout error, the connection will re-establish, and API-dependent functions will resume normal operation.","category":"page"},{"location":"troubleshooting/#API-Authentication-Issues","page":"Troubleshooting","title":"API Authentication Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Authentication errors, invalid API key messages, permission denied","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Verify API credentials in [secrets.toml](config.md#secrets-management)\nCheck API key permissions on exchange\nVerify IP whitelist settings if applicable","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Rate-Limiting-Issues","page":"Troubleshooting","title":"Rate Limiting Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Rate limit exceeded errors, temporary bans, slow API responses","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check current rate limit settings\nMonitor API call frequency\nVerify exchange-specific limits","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Data-Storage-and-Management-Issues","page":"Troubleshooting","title":"Data Storage and Management Issues","text":"","category":"section"},{"location":"troubleshooting/#LMDB-Size-Limitations","page":"Troubleshooting","title":"LMDB Size Limitations","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: \"MDBMAPFULL\" errors, data saving failures, database write errors","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check current database size usage\nMonitor available disk space\nVerify LMDB configuration","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Prevention:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Monitor database growth regularly\nSet initial size based on expected data volume\nImplement automated size monitoring","category":"page"},{"location":"troubleshooting/#Data-Corruption-Issues","page":"Troubleshooting","title":"Data Corruption Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Segfaults when saving OHLCV, corrupted data reads, database errors","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check for incomplete write operations\nVerify data integrity\nLook for concurrent access issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#LMDB-Platform-Compatibility","page":"Troubleshooting","title":"LMDB Platform Compatibility","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: \"LMDB not available\" errors, compilation failures","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check if LMDB binary is available for your platform\nVerify system dependencies\nLook for compilation errors","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Data-Fetching-and-Pipeline-Issues","page":"Troubleshooting","title":"Data Fetching and Pipeline Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Missing data, fetch timeouts, inconsistent data quality","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check data source availability\nVerify network connectivity\nMonitor data quality metrics","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Plotting-and-Visualization-Issues","page":"Troubleshooting","title":"Plotting and Visualization Issues","text":"","category":"section"},{"location":"troubleshooting/#Misaligned-Plotting-Tooltips","page":"Troubleshooting","title":"Misaligned Plotting Tooltips","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Tooltips appear in wrong positions, rendering artifacts, display issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check which Makie backend is currently active\nVerify graphics driver compatibility\nTest with different backends","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Backend-Installation-and-Configuration-Issues","page":"Troubleshooting","title":"Backend Installation and Configuration Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Backend not found, OpenGL errors, display server issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check if required system libraries are installed\nVerify display server configuration (Linux)\nTest graphics driver compatibility","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Platform-Specific Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Linux:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Install required libraries\nsudo apt-get install libgl1-mesa-glx libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6\n\n# For headless servers, use Xvfb\nexport DISPLAY=:99\nXvfb :99 -screen 0 1024x768x24 &","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"macOS:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Install XQuartz if needed\nbrew install --cask xquartz","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Windows:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Ensure graphics drivers are up to date\nTry running Julia as administrator if permission issues occur","category":"page"},{"location":"troubleshooting/#Plot-Performance-Issues","page":"Troubleshooting","title":"Plot Performance Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Slow rendering, memory issues with large datasets, unresponsive plots","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check data size and complexity\nMonitor memory usage during plotting\nVerify backend performance characteristics","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Interactive-Features-Not-Working","page":"Troubleshooting","title":"Interactive Features Not Working","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Zoom/pan not responding, tooltips not appearing, selection not working","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Verify backend supports interactivity\nCheck if running in appropriate environment\nTest with simple interactive examples","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Strategy-Development-and-Execution-Issues","page":"Troubleshooting","title":"Strategy Development and Execution Issues","text":"","category":"section"},{"location":"troubleshooting/#Strategy-Loading-and-Compilation-Issues","page":"Troubleshooting","title":"Strategy Loading and Compilation Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Strategy not found, compilation errors, module loading failures","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check strategy file location and naming\nVerify Project.toml configuration\nLook for syntax errors in strategy code","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Strategy-Execution-Errors","page":"Troubleshooting","title":"Strategy Execution Errors","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Runtime errors during strategy execution, unexpected behavior","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check strategy logic and data dependencies\nVerify market data availability\nLook for timing or synchronization issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Order-Execution-Issues","page":"Troubleshooting","title":"Order Execution Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Orders not executing, incorrect order types, position management errors","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check order parameters and validation\nVerify exchange connectivity and permissions\nLook for balance and margin issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Development-and-Debugging-Issues","page":"Troubleshooting","title":"Development and Debugging Issues","text":"","category":"section"},{"location":"troubleshooting/#VSCode-Debugging-Configuration","page":"Troubleshooting","title":"VSCode Debugging Configuration","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Breakpoints not triggering, debugging not working in strategy execution","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check VSCode Julia extension configuration\nVerify debugger settings for compiled modules\nTest with simple debugging scenarios","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"/ In VSCode user settings.json\n{\n    \"julia.debuggerDefaultCompiled\": [\n        \"ALL_MODULES_EXCEPT_MAIN\",\n        \"-Base.CoreLogging\"\n    ]\n}","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Additional Debugging Tips:","category":"page"},{"location":"troubleshooting/#Performance-Debugging","page":"Troubleshooting","title":"Performance Debugging","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Slow strategy execution, high memory usage, CPU bottlenecks","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Profile strategy execution\nIdentify memory allocation hotspots\nCheck for inefficient data operations","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/#Environment-and-Configuration-Issues","page":"Troubleshooting","title":"Environment and Configuration Issues","text":"","category":"section"},{"location":"troubleshooting/#Docker-and-Container-Issues","page":"Troubleshooting","title":"Docker and Container Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Container startup failures, permission errors, volume mounting issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check Docker installation and permissions\nVerify volume mounts and file permissions\nTest container networking","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Step 1: Test basic Docker functionality\ndocker run --rm hello-world\n\n# Step 2: Check Planar container\ndocker run --rm -it psydyllic/planar-sysimage-interactive julia --version\n\n# Step 3: Fix permission issues (Linux)\nsudo usermod -aG docker $USER\n# Logout and login again\n\n# Step 4: Mount user directory correctly\ndocker run -v $(pwd)/user:/app/user psydyllic/planar-sysimage-interactive","category":"page"},{"location":"troubleshooting/#Environment-Variable-Issues","page":"Troubleshooting","title":"Environment Variable Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Configuration not loading, unexpected behavior, missing settings","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check environment variable values\nVerify .envrc configuration\nTest variable precedence","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Step 1: Check current environment\nenv | grep JULIA\nenv | grep PLANAR\n\n# Step 2: Verify direnv configuration\ncat .envrc\ndirenv allow\n\n# Step 3: Test variable loading in Julia\njulia -e 'println(ENV[\"JULIA_PROJECT\"])'","category":"page"},{"location":"troubleshooting/#Platform-Specific-Issues","page":"Troubleshooting","title":"Platform-Specific Issues","text":"","category":"section"},{"location":"troubleshooting/#Linux-Specific-Issues","page":"Troubleshooting","title":"Linux-Specific Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Common Issues:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Missing system libraries for plotting backends\nPermission issues with Docker\nDisplay server configuration for headless systems","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Install required system packages\nsudo apt-get update\nsudo apt-get install build-essential libgl1-mesa-glx libxrandr2 libxss1\n\n# For headless systems\nexport DISPLAY=:99\nXvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &","category":"page"},{"location":"troubleshooting/#macOS-Specific-Issues","page":"Troubleshooting","title":"macOS-Specific Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Common Issues:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Xcode command line tools missing\nPermission issues with system directories\nGraphics driver compatibility","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Install Xcode command line tools\nxcode-select --install\n\n# Install required packages via Homebrew\nbrew install lmdb\nbrew install --cask xquartz","category":"page"},{"location":"troubleshooting/#Windows-Specific-Issues","page":"Troubleshooting","title":"Windows-Specific Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Common Issues:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Path length limitations\nPowerShell execution policy\nGraphics driver issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solutions:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Enable long paths\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name \"LongPathsEnabled\" -Value 1\n\n# Set execution policy\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n# Update graphics drivers through Device Manager","category":"page"},{"location":"troubleshooting/#Performance-Troubleshooting","page":"Troubleshooting","title":"Performance Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#Strategy-Execution-Performance","page":"Troubleshooting","title":"Strategy Execution Performance","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Slow backtesting-mode), high CPU usage, long execution times","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Profile strategy execution to identify bottlenecks\nCheck data access patterns and frequency\nMonitor memory allocation and garbage collection","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Performance Profiling:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Common Performance Issues and Solutions:","category":"page"},{"location":"troubleshooting/#Memory-Usage-Optimization","page":"Troubleshooting","title":"Memory Usage Optimization","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: High memory usage, out-of-memory errors, slow garbage collection","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Monitor memory usage during execution\nIdentify memory leaks and excessive allocations\nCheck for large object retention","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Memory Profiling:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Memory Optimization Techniques:","category":"page"},{"location":"troubleshooting/#Data-Related-Performance-Issues","page":"Troubleshooting","title":"Data-Related Performance Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Slow data loading, high I/O wait times, database performance issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Monitor I/O operations and disk usage\nCheck data access patterns and caching\nVerify database configuration and indexing","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Data Performance Optimization:","category":"page"},{"location":"troubleshooting/#Optimization-and-Backtesting-Performance","page":"Troubleshooting","title":"Optimization and Backtesting Performance","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Slow parameter optimization, long backtesting times, inefficient search","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Profile optimization algorithms\nCheck parameter space size and search efficiency\nMonitor parallel execution utilization","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Optimization Performance:","category":"page"},{"location":"troubleshooting/#Parallel-Processing-and-Threading","page":"Troubleshooting","title":"Parallel Processing and Threading","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Poor multi-threading performance, race conditions, synchronization issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check thread utilization and load balancing\nIdentify thread-safety issues\nMonitor synchronization overhead","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Threading Optimization:","category":"page"},{"location":"troubleshooting/#Plotting-and-Visualization-Performance","page":"Troubleshooting","title":"Plotting and Visualization Performance","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Symptoms: Slow plot rendering, high memory usage during plotting, unresponsive plots","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Diagnostic Steps:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check data size and plot complexity\nMonitor GPU/graphics memory usage\nTest different backends for performance","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Plotting Performance Optimization:","category":"page"},{"location":"troubleshooting/#System-Resource-Monitoring","page":"Troubleshooting","title":"System Resource Monitoring","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Tools and Techniques for Performance Monitoring:","category":"page"},{"location":"troubleshooting/#See-Also","page":"Troubleshooting","title":"See Also","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"troubleshooting/#Getting-Help","page":"Troubleshooting","title":"Getting Help","text":"","category":"section"},{"location":"troubleshooting/#Before-Seeking-Help","page":"Troubleshooting","title":"Before Seeking Help","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check this troubleshooting guide for your specific issue\nSearch existing GitHub issues for similar problems\nTry the diagnostic steps provided for your issue category\nGather relevant information:\nJulia version (julia --version)\nPlanar version/commit\nOperating system and version\nComplete error messages and stack traces\nMinimal reproducible example","category":"page"},{"location":"troubleshooting/#Where-to-Get-Help","page":"Troubleshooting","title":"Where to Get Help","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"GitHub Issues: For bugs and feature requests\nDiscussions: For general questions and community support\nDocumentation: Check the comprehensive guides and API reference","category":"page"},{"location":"troubleshooting/#Creating-Effective-Bug-Reports","page":"Troubleshooting","title":"Creating Effective Bug Reports","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Include the following information:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Environment details: OS, Julia version, Planar version\nSteps to reproduce: Minimal example that demonstrates the issue\nExpected behavior: What you expected to happen\nActual behavior: What actually happened\nError messages: Complete error output and stack traces\nConfiguration: Relevant parts of your configuration files","category":"page"},{"location":"troubleshooting/#Troubleshooting-Guide","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"This section provides solutions to common issues you might encounter while using Planar.","category":"page"},{"location":"troubleshooting/#Quick-Links","page":"Troubleshooting Guide","title":"Quick Links","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"Installation Issues - Problems during setup and installation\nExchange Issues - API connectivity and exchange-related problems  \nPerformance Issues - Optimization and performance troubleshooting","category":"page"},{"location":"troubleshooting/#Common-Issues","page":"Troubleshooting Guide","title":"Common Issues","text":"","category":"section"},{"location":"troubleshooting/#Configuration-Problems","page":"Troubleshooting Guide","title":"Configuration Problems","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"If you're having trouble with configuration:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"Check your user/planar.toml file syntax\nVerify API keys are correctly set in user/secrets.toml\nEnsure exchange names match supported exchanges","category":"page"},{"location":"troubleshooting/#Data-Issues","page":"Troubleshooting Guide","title":"Data Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"For data-related problems:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"Verify exchange connectivity\nCheck timeframe availability for your exchange\nEnsure sufficient historical data is available","category":"page"},{"location":"troubleshooting/#Strategy-Issues","page":"Troubleshooting Guide","title":"Strategy Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"If your strategy isn't working as expected:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"Test in simulation mode first\nCheck your strategy logic and parameters\nVerify data availability for your instruments","category":"page"},{"location":"troubleshooting/#Getting-Help","page":"Troubleshooting Guide","title":"Getting Help","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"If you can't find a solution here:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"Check the GitHub Issues\nReview the documentation\nAsk questions in the community forums","category":"page"},{"location":"troubleshooting/#Reporting-Bugs","page":"Troubleshooting Guide","title":"Reporting Bugs","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"When reporting issues, please include:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting Guide","title":"Troubleshooting Guide","text":"Planar version\nJulia version\nOperating system\nComplete error messages\nMinimal reproduction steps","category":"page"},{"location":"resources/search/#Documentation-Search","page":"Documentation Search","title":"Documentation Search","text":"","category":"section"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"<div id=\"search-container\">   <div class=\"search-box\">     <input type=\"text\" id=\"search-input\" placeholder=\"Search documentation...\" autocomplete=\"off\">     <div id=\"search-suggestions\" class=\"search-suggestions\"></div>   </div>","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"<div class=\"search-filters\">     <label>       <input type=\"checkbox\" id=\"filter-getting-started\" checked> Getting Started     </label>     <label>       <input type=\"checkbox\" id=\"filter-guides\" checked> Guides     </label>     <label>       <input type=\"checkbox\" id=\"filter-advanced\" checked> Advanced     </label>     <label>       <input type=\"checkbox\" id=\"filter-reference\" checked> Reference     </label>     <label>       <input type=\"checkbox\" id=\"filter-troubleshooting\" checked> Troubleshooting     </label>   </div>","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"<div class=\"difficulty-filter\">     <label>Difficulty:</label>     <label>       <input type=\"checkbox\" id=\"difficulty-beginner\" checked> Beginner     </label>     <label>       <input type=\"checkbox\" id=\"difficulty-intermediate\" checked> Intermediate     </label>     <label>       <input type=\"checkbox\" id=\"difficulty-advanced\" checked> Advanced     </label>   </div> </div>","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"<div id=\"search-results\">   <div class=\"search-stats\">     <span id=\"results-count\">Enter a search term to find relevant documentation</span>   </div>   <div id=\"results-container\"></div> </div>","category":"page"},{"location":"resources/search/#Popular-Searches","page":"Documentation Search","title":"Popular Searches","text":"","category":"section"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"Strategy Development\nInstallation\nAPI Reference\nTroubleshooting\nConfiguration\nData Management","category":"page"},{"location":"resources/search/#Search-Tips","page":"Documentation Search","title":"Search Tips","text":"","category":"section"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"Use specific terms: \"margin trading\" instead of just \"trading\"\nTry different keywords: \"backtest\" vs \"simulation\" vs \"testing\"\nUse filters: Narrow results by category or difficulty\nCheck suggestions: Auto-complete shows related terms as you type","category":"page"},{"location":"resources/search/#Browse-by-Category","page":"Documentation Search","title":"Browse by Category","text":"","category":"section"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"Getting Started - New user guides and tutorials\nUser Guides - Comprehensive development guides\nAdvanced Topics - Expert-level customization\nAPI Reference - Function documentation\nTroubleshooting - Problem resolution","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"<style> .search-box {   position: relative;   margin-bottom: 1rem; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"#search-input {   width: 100%;   padding: 12px 16px;   font-size: 16px;   border: 2px solid #e1e5e9;   border-radius: 8px;   outline: none;   transition: border-color 0.2s; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"#search-input:focus {   border-color: #007acc; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-suggestions {   position: absolute;   top: 100%;   left: 0;   right: 0;   background: white;   border: 1px solid #e1e5e9;   border-top: none;   border-radius: 0 0 8px 8px;   max-height: 200px;   overflow-y: auto;   z-index: 1000;   display: none; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-suggestion {   padding: 8px 16px;   cursor: pointer;   border-bottom: 1px solid #f0f0f0; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-suggestion:hover {   background-color: #f8f9fa; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-suggestion:last-child {   border-bottom: none; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-filters, .difficulty-filter {   margin-bottom: 1rem;   display: flex;   flex-wrap: wrap;   gap: 1rem; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-filters label, .difficulty-filter label {   display: flex;   align-items: center;   gap: 0.5rem;   cursor: pointer; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-stats {   margin-bottom: 1rem;   color: #666;   font-style: italic; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result {   border: 1px solid #e1e5e9;   border-radius: 8px;   padding: 1rem;   margin-bottom: 1rem;   background: white; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result-title {   font-size: 1.2rem;   font-weight: bold;   margin-bottom: 0.5rem; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result-title a {   color: #007acc;   text-decoration: none; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result-title a:hover {   text-decoration: underline; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result-meta {   display: flex;   gap: 1rem;   margin-bottom: 0.5rem;   font-size: 0.9rem;   color: #666; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result-category {   background: #e3f2fd;   color: #1976d2;   padding: 2px 8px;   border-radius: 4px; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result-difficulty {   background: #f3e5f5;   color: #7b1fa2;   padding: 2px 8px;   border-radius: 4px; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-result-excerpt {   line-height: 1.5; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":".search-highlight {   background-color: #fff3cd;   padding: 1px 2px;   border-radius: 2px; }","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"@media (max-width: 768px) {   .search-filters, .difficulty-filter {     flex-direction: column;     gap: 0.5rem;   } } </style>","category":"page"},{"location":"resources/search/","page":"Documentation Search","title":"Documentation Search","text":"<script src=\"../assets/search.js\"></script>","category":"page"},{"location":"metrics/#Metrics-Module-Documentation","page":"Performance Analysis","title":"Metrics Module Documentation","text":"","category":"section"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"The Metrics module provides functions for analyzing the outcomes of backtest runs within the trading strategy framework.","category":"page"},{"location":"metrics/#Resampling-Trades","page":"Performance Analysis","title":"Resampling Trades","text":"","category":"section"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"Using the Metrics.resample_trades function, trades can be resampled to a specified time frame. This aggregates the profit and loss (PnL) of each trade for every asset in the strategy over the given period.","category":"page"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"In the example above, all trades are resampled to a daily resolution (1d), summing the PnL for each asset within the strategy.","category":"page"},{"location":"metrics/#Trade-Balance-Calculation","page":"Performance Analysis","title":"Trade Balance Calculation","text":"","category":"section"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"The Metrics.trades_balance function calculates the cumulative balance over time for a given time frame, using the cum_total column as a reference. This function relies on the prior resampling of trades through resample_trades.","category":"page"},{"location":"metrics/#Performance-Metrics","page":"Performance Analysis","title":"Performance Metrics","text":"","category":"section"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"The module includes implementations of common trading performance metrics such as Sharpe ratio (sharpe), Sortino ratio (sortino), Calmar ratio (calmar), and expectancy (expectancy).","category":"page"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"Each of these functions calculates the respective metric over a daily time frame, with rfr representing the risk-free rate, which is an optional parameter for the Sharpe and Sortino ratios.","category":"page"},{"location":"metrics/#Multi-Metric-Calculation","page":"Performance Analysis","title":"Multi-Metric Calculation","text":"","category":"section"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"To calculate multiple metrics simultaneously, use the multi function. It allows for the normalization of results, ensuring metric values are constrained between 0 and 1.","category":"page"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"The normalize option normalizes the metric values by dividing by a predefined constant and then clipping the results to the range [0, 1].","category":"page"},{"location":"metrics/#See-Also","page":"Performance Analysis","title":"See Also","text":"","category":"section"},{"location":"metrics/","page":"Performance Analysis","title":"Performance Analysis","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nStrategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"advanced/risk-management/#Risk-Management","page":"Risk Management","title":"Risk Management","text":"","category":"section"},{"location":"advanced/risk-management/","page":"Risk Management","title":"Risk Management","text":"Advanced risk management techniques for trading strategies.","category":"page"},{"location":"advanced/risk-management/#See-Also","page":"Risk Management","title":"See Also","text":"","category":"section"},{"location":"advanced/risk-management/","page":"Risk Management","title":"Risk Management","text":"Strategy Development\nLive Trading","category":"page"},{"location":"customizations/customizations/#Comprehensive-Customization-Guide","page":"Overview","title":"Comprehensive Customization Guide","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Planar's architecture is built around Julia's powerful dispatch system, enabling deep customization without modifying core framework code. This guide provides detailed instructions for extending Planar's functionality through custom implementations.","category":"page"},{"location":"customizations/customizations/#Understanding-Planar's-Dispatch-System","page":"Overview","title":"Understanding Planar's Dispatch System","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Planar leverages Julia's multiple dispatch to provide customization points throughout the framework. The key insight is that behavior is determined by the combination of argument types, allowing you to specialize functionality for specific scenarios.","category":"page"},{"location":"customizations/customizations/#Core-Parametrized-Types","page":"Overview","title":"Core Parametrized Types","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"The framework provides parametrized types for various elements:","category":"page"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Strategies: Strategy{Mode} where Mode can be Sim, Paper, or Live\nAssets: Asset, Derivative and other AbstractAsset subtypes\nInstances: AssetInstance{Asset, Exchange} combining assets with exchanges\nOrders and Trades: Order{OrderType} and Trade{OrderType}\nExchanges: Exchange subtypes with ExchangeID parameters","category":"page"},{"location":"customizations/customizations/#Dispatch-Patterns","page":"Overview","title":"Dispatch Patterns","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Planar uses several dispatch patterns for customization:","category":"page"},{"location":"customizations/customizations/#Custom-Order-Types-Implementation","page":"Overview","title":"Custom Order Types Implementation","text":"","category":"section"},{"location":"customizations/customizations/#Basic-Order-Type-Definition","page":"Overview","title":"Basic Order Type Definition","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"To implement a custom order type, create an abstract type inheriting from OrderType:","category":"page"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"This creates TrailingStopOrder, TrailingStopBuy, and TrailingStopSell types.","category":"page"},{"location":"customizations/customizations/#Order-State-Management","page":"Overview","title":"Order State Management","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Custom orders often require additional state. Define a state structure:","category":"page"},{"location":"customizations/customizations/#Order-Constructor","page":"Overview","title":"Order Constructor","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Implement a constructor for your custom order:","category":"page"},{"location":"customizations/customizations/#Order-Execution-Logic","page":"Overview","title":"Order Execution Logic","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Implement the execution logic for different modes:","category":"page"},{"location":"customizations/customizations/#Custom-Exchange-Implementation","page":"Overview","title":"Custom Exchange Implementation","text":"","category":"section"},{"location":"customizations/customizations/#Exchange-Interface-Requirements","page":"Overview","title":"Exchange Interface Requirements","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"To implement a custom exchange, you need to satisfy the interface defined by the check function in the Exchanges module. Here's a comprehensive example:","category":"page"},{"location":"customizations/customizations/#Exchange-Specific-Customizations","page":"Overview","title":"Exchange-Specific Customizations","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"You can customize behavior for specific exchanges using dispatch:","category":"page"},{"location":"customizations/customizations/#Advanced-Customization-Patterns","page":"Overview","title":"Advanced Customization Patterns","text":"","category":"section"},{"location":"customizations/customizations/#Strategy-Specific-Functions","page":"Overview","title":"Strategy-Specific Functions","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Create \"snowflake\" functions for specific strategies:","category":"page"},{"location":"customizations/customizations/#Custom-Indicators-and-Signals","page":"Overview","title":"Custom Indicators and Signals","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Extend the framework with custom technical indicators:","category":"page"},{"location":"customizations/customizations/#Custom-Risk-Management","page":"Overview","title":"Custom Risk Management","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Implement sophisticated risk management:","category":"page"},{"location":"customizations/customizations/#Best-Practices-for-Customization","page":"Overview","title":"Best Practices for Customization","text":"","category":"section"},{"location":"customizations/customizations/#1.-Minimal-Invasive-Changes","page":"Overview","title":"1. Minimal Invasive Changes","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Only override the specific functions that need customization. Leverage existing functionality wherever possible:","category":"page"},{"location":"customizations/customizations/#2.-Type-Stability","page":"Overview","title":"2. Type Stability","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Ensure your customizations maintain type stability:","category":"page"},{"location":"customizations/customizations/#3.-Error-Handling","page":"Overview","title":"3. Error Handling","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Implement robust error handling in custom functions:","category":"page"},{"location":"customizations/customizations/#4.-Documentation-and-Testing","page":"Overview","title":"4. Documentation and Testing","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Document your customizations thoroughly:","category":"page"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    \n    \"\"\"\n        custom_momentum_strategy(s::Strategy, ai::AssetInstance, date::DateTime)\n\n    Custom momentum strategy implementation that uses a combination of RSI and MACD\n    indicators to generate trading signals.\n\n    # Arguments\n    - `s::Strategy`: The strategy instance\n    - `ai::AssetInstance`: The asset instance to trade\n    - `date::DateTime`: Current timestamp\n    \n    # Returns\n    - Signal indicating buy/sell/hold decision\n    \"\"\"\n    function custom_momentum_strategy(s, ai, date)\n        # Example implementation\n        println(\"Custom momentum strategy called for $date\")\n        return :hold  # Example return value\n    end\n    \n    println(\"Custom momentum strategy function defined\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend\n\n# Returns\n- `Float64`: Signal strength between -1.0 (strong sell) and 1.0 (strong buy)\n\n# Example\n\"\"\"\nfunction custom_momentum_strategy(s::Strategy, ai::AssetInstance, date::DateTime)\n    # Implementation here\nend","category":"page"},{"location":"customizations/customizations/#5.-Performance-Considerations","page":"Overview","title":"5. Performance Considerations","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Be mindful of performance in hot paths:","category":"page"},{"location":"customizations/customizations/#See-Also","page":"Overview","title":"See Also","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"customizations/customizations/#Troubleshooting-Customizations","page":"Overview","title":"Troubleshooting Customizations","text":"","category":"section"},{"location":"customizations/customizations/#Common-Issues","page":"Overview","title":"Common Issues","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Method Ambiguity: When multiple dispatch signatures could match\nType Piracy: Extending methods you don't own on types you don't own\nPerformance Issues: Customizations that hurt performance","category":"page"},{"location":"customizations/customizations/#Debugging-Tips","page":"Overview","title":"Debugging Tips","text":"","category":"section"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Use @code_warntype to check for type instabilities\nUse @benchmark to measure performance impact\nUse methodswith to find all methods for a type\nUse @which to determine which method will be called","category":"page"},{"location":"customizations/customizations/","page":"Overview","title":"Overview","text":"Remember to leverage this flexibility to enhance functionality without overcomplicating the system, thus avoiding \"complexity bankruptcy.\"","category":"page"},{"location":"API/data/#Data-API","page":"Data","title":"Data API","text":"","category":"section"},{"location":"API/data/","page":"Data","title":"Data","text":"The Data module provides comprehensive functionality for managing market data in Planar. It handles OHLCV (Open, High, Low, Close, Volume) data storage, retrieval, and manipulation using efficient storage formats like Zarr and LMDB.","category":"page"},{"location":"API/data/#Overview","page":"Data","title":"Overview","text":"","category":"section"},{"location":"API/data/","page":"Data","title":"Data","text":"The Data module is responsible for:","category":"page"},{"location":"API/data/","page":"Data","title":"Data","text":"OHLCV data storage and retrieval\nData persistence using Zarr format for large datasets\nLMDB key-value storage for fast access\nData validation and integrity checking\nEfficient data structures for time series analysis","category":"page"},{"location":"API/data/#Core-Data-Structures","page":"Data","title":"Core Data Structures","text":"","category":"section"},{"location":"API/data/#OHLCV-Data-Access","page":"Data","title":"OHLCV Data Access","text":"","category":"section"},{"location":"API/data/#Usage-Examples","page":"Data","title":"Usage Examples","text":"","category":"section"},{"location":"API/data/#Data-Loading-and-Storage","page":"Data","title":"Data Loading and Storage","text":"","category":"section"},{"location":"API/data/#Primary-Data-Functions","page":"Data","title":"Primary Data Functions","text":"","category":"section"},{"location":"API/data/#Advanced-Data-Operations","page":"Data","title":"Advanced Data Operations","text":"","category":"section"},{"location":"API/data/#Data-Persistence","page":"Data","title":"Data Persistence","text":"","category":"section"},{"location":"API/data/#Zarr-Storage","page":"Data","title":"Zarr Storage","text":"","category":"section"},{"location":"API/data/","page":"Data","title":"Data","text":"Planar uses Zarr format for efficient storage of large time series datasets:","category":"page"},{"location":"API/data/#LMDB-Key-Value-Storage","page":"Data","title":"LMDB Key-Value Storage","text":"","category":"section"},{"location":"API/data/","page":"Data","title":"Data","text":"For fast metadata and configuration storage:","category":"page"},{"location":"API/data/#Data-Validation-and-Integrity","page":"Data","title":"Data Validation and Integrity","text":"","category":"section"},{"location":"API/data/#Data-Quality-Checks","page":"Data","title":"Data Quality Checks","text":"","category":"section"},{"location":"API/data/#Data-Cleaning","page":"Data","title":"Data Cleaning","text":"","category":"section"},{"location":"API/data/#DataFrame-Integration","page":"Data","title":"DataFrame Integration","text":"","category":"section"},{"location":"API/data/#Working-with-DataFrames","page":"Data","title":"Working with DataFrames","text":"","category":"section"},{"location":"API/data/#Performance-Optimization","page":"Data","title":"Performance Optimization","text":"","category":"section"},{"location":"API/data/#Efficient-Data-Access-Patterns","page":"Data","title":"Efficient Data Access Patterns","text":"","category":"section"},{"location":"API/data/#Memory-Management","page":"Data","title":"Memory Management","text":"","category":"section"},{"location":"API/data/#Data-Streaming-and-Updates","page":"Data","title":"Data Streaming and Updates","text":"","category":"section"},{"location":"API/data/#Real-time-Data-Updates","page":"Data","title":"Real-time Data Updates","text":"","category":"section"},{"location":"API/data/#Common-Data-Patterns","page":"Data","title":"Common Data Patterns","text":"","category":"section"},{"location":"API/data/#Moving-Averages","page":"Data","title":"Moving Averages","text":"","category":"section"},{"location":"API/data/#Price-Analysis","page":"Data","title":"Price Analysis","text":"","category":"section"},{"location":"API/data/#Complete-API-Reference","page":"Data","title":"Complete API Reference","text":"","category":"section"},{"location":"API/data/#Data.OHLCV_CHUNK_SIZE","page":"Data","title":"Data.OHLCV_CHUNK_SIZE","text":"Default ZArray chunk size.\n\n\n\n\n\n","category":"constant"},{"location":"API/data/#Data.OHLCV_COLUMNS","page":"Data","title":"Data.OHLCV_COLUMNS","text":"Columns for OHLCV data: timestamp, open, high, low, close, volume\n\n\n\n\n\n","category":"constant"},{"location":"API/data/#Data.OHLCV_COLUMNS_COUNT","page":"Data","title":"Data.OHLCV_COLUMNS_COUNT","text":"Count of OHLCV_COLUMNS\n\n\n\n\n\n","category":"constant"},{"location":"API/data/#Data.OHLCV_COLUMNS_NOV","page":"Data","title":"Data.OHLCV_COLUMNS_NOV","text":"Only the OHLC columns of OHLCV_COLUMNS\n\n\n\n\n\n","category":"constant"},{"location":"API/data/#Data.OHLCV_COLUMNS_TS","page":"Data","title":"Data.OHLCV_COLUMNS_TS","text":"The timestamp column of OHLCV_COLUMNS\n\n\n\n\n\n","category":"constant"},{"location":"API/data/#Data.compressor","page":"Data","title":"Data.compressor","text":"Default zarr compressor used in the module (zstd, clevel=2).\n\n\n\n\n\n","category":"constant"},{"location":"API/data/#Data.Candle","page":"Data","title":"Data.Candle","text":"A struct representing a candlestick in financial trading.\n\ntimestamp\nopen\nhigh\nlow\nclose\nvolume\n\nCandle{T} is a parametric struct that represents a candlestick with generic type T, which must be a subtype of AbstractFloat.\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Data.DictView6","page":"Data","title":"Data.DictView6","text":"A view into a dictionary (a subset of keys).\n\nd\nkeys\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Data.EventTrace","page":"Data","title":"Data.EventTrace","text":"EventTrace structure for managing event data.\n\nlock\n_buf\n_zi\n_arr\n_cache\nfreq\nlast_flush\n\nRepresents a collection of events with caching capabilities. It is designed to efficiently handle large datasets by caching event data in memory. The structure includes a ZarrInstance for data storage, a ZArray for data access, a cache for temporary storage, a frequency for event timing, and an index for the next event.\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Data.LMDBDictStore","page":"Data","title":"Data.LMDBDictStore","text":"LMDBDictStore is a concrete implementation of the AbstractDictStore interface.\n\nLMDBDictStore represents a dictionary-like data store that uses LMDB as its backend. It is a subtype of AbstractDictStore defined in the Zarr package.\n\nLMDBDictStore has the following fields:\n\na: An instance of LMDBDict that represents the LMDB database.\nlock: A ReentrantLock used for thread-safety.\n\nLMDBDictStore can be created using the LMDBDictStore constructor function. It takes the following arguments:\n\npath::AbstractString: The path to the LMDB database.\nreset::Bool=false: If true, the LMDB database at the given path will be deleted and recreated.\nmapsize::Int=64MB: The maximum size of the LMDB database.\n\nLMDBDictStore implements the AbstractDictStore interface, which provides methods for reading and writing data to the store.\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Data.OHLCVTuple","page":"Data","title":"Data.OHLCVTuple","text":"Similar to a StructArray (and should probably be replaced by it), used for fast conversion.\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Data.PairData","page":"Data","title":"Data.PairData","text":"PairData is a low level struct, to attach some metadata to a ZArray. (deprecated)\"\n\nname\ntf\ndata\nz\n\nInstead of constructing a PairData, directly use the OHLCV DataFrame to hold the pair information and the ZArray itself.\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Data.TimeFrameError","page":"Data","title":"Data.TimeFrameError","text":"A custom exception representing a time frame error.\n\nfirst\nlast\ntd\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Data.ZarrInstance","page":"Data","title":"Data.ZarrInstance","text":"Candles data is stored with hierarchy PAIR -> [TIMEFRAMES...]. A pair is a ZGroup, a timeframe is a ZArray.\n\npath\nstore\ngroup\n\n\n\n\n\n","category":"type"},{"location":"API/data/#Base.Filesystem.rm-Tuple{LMDB.LMDBDict}","page":"Data","title":"Base.Filesystem.rm","text":"Remove all lmdb files associated with an LMDBDict object.\n\nrm(d::LMDB.LMDBDict) -> Union{Nothing, Bool}\n\n\nThis function removes all lmdb files associated with the given LMDBDict object. It deletes the lmdb database and all associated files.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.delete!-Tuple{Data.LMDBDictStore, Vararg{AbstractString}}","page":"Data","title":"Base.delete!","text":"Delete paths from an LMDBDictStore.\n\ndelete!(\n    store::Data.LMDBDictStore,\n    paths::AbstractString...;\n    recursive\n) -> Union{Nothing, LMDB.LMDBDict}\n\n\nThis function deletes the specified paths from an LMDBDictStore. It supports deleting paths recursively if the recursive parameter is set to true.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.delete!-Tuple{Zarr.DirectoryStore, Vararg{String}}","page":"Data","title":"Base.delete!","text":"Delete an element from a DirectoryStore. Also removes the directory.\n\ndelete!(\n    store::Zarr.DirectoryStore,\n    paths::String...;\n    recursive\n) -> Union{Nothing, Bool}\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.delete!-Tuple{Zarr.ZArray}","page":"Data","title":"Base.delete!","text":"Delete the ZArray from the underlying storage.\n\ndelete!(z::Zarr.ZArray; ok) -> Union{Nothing, Bool}\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.delete!-Tuple{Zarr.ZGroup, AbstractString}","page":"Data","title":"Base.delete!","text":"Delete an element from a ZGroup. If the element is a group, it will be recursively deleted.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.empty!-Tuple{LMDB.LMDBDict}","page":"Data","title":"Base.empty!","text":"Empty an LMDBDict object.\n\nempty!(d::LMDB.LMDBDict) -> Int32\n\n\nThis function empties an LMDBDict object by dropping the lmdb database and syncing the environment.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.empty!-Tuple{Zarr.ZArray}","page":"Data","title":"Base.empty!","text":"Resizes a ZArray to zero.\n\nempty!(z::Zarr.ZArray) -> Zarr.ZArray\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.empty!-Tuple{Zarr.ZGroup}","page":"Data","title":"Base.empty!","text":"Removes all arrays and groups from a ZGroup.\n\nempty!(g::Zarr.ZGroup)\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.isempty-Tuple{Zarr.ZArray}","page":"Data","title":"Base.isempty","text":"A ZArray is empty if its size is 0.\n\nisempty(z::Zarr.ZArray) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Base.unique!-Tuple{Function, Zarr.ZArray}","page":"Data","title":"Base.unique!","text":"Remove duplicate from a zarray.\n\nIn a 2d zarray where we want values where the second column is unique:\n\nunique!(x->x[2], z)\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data._check_contiguity-Tuple{AbstractFloat, AbstractFloat, AbstractFloat, AbstractFloat, Any}","page":"Data","title":"Data._check_contiguity","text":"Check the contiguity of timestamps between data and saved data.\n\n_check_contiguity(\n    data_first_ts::AbstractFloat,\n    data_last_ts::AbstractFloat,\n    saved_first_ts::AbstractFloat,\n    saved_last_ts::AbstractFloat,\n    td\n) -> Bool\n\n\nUsed to check the contiguity of timestamps between the data and saved data. It takes in the first and last timestamps of the data (data_first_ts and data_last_ts) and the first and last timestamps of the saved data (saved_first_ts and saved_last_ts). Typically used as a helper function within the context of saving or loading OHLCV data to ensure the contiguity of timestamps.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data._get_zarray-Tuple{Data.ZarrInstance, AbstractString, Tuple}","page":"Data","title":"Data._get_zarray","text":"Get a ZArray object from a ZarrInstance.\n\n_get_zarray(\n    zi::Data.ZarrInstance,\n    key::AbstractString,\n    sz::Tuple;\n    type,\n    overwrite,\n    reset\n)\n\n\nThis function is used to retrieve a ZArray object from a ZarrInstance. It takes in the ZarrInstance, key, size, and other optional parameters and returns the ZArray object.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data._load_ohlcv-Tuple{Zarr.ZArray, Any}","page":"Data","title":"Data._load_ohlcv","text":"Load ohlcv pair data from zarr instance. za: The zarr array holding the data key: the name of the array to load from the zarr instance (in the format exchange/timeframe/pair) td: the timeframe (as integer in milliseconds) of the target ohlcv table to be loaded from, to: date range\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.candleat-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.candleat","text":"Get the candle at given date from a ohlcv dataframe as a Candle.\n\ncandleat(\n    df::DataFrames.AbstractDataFrame,\n    date::Dates.DateTime;\n    return_idx\n) -> Union{Data.Candle{Float64}, Tuple{Data.Candle{Float64}, Any}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.candleavl-Union{Tuple{D}, Tuple{D, TimeFrames.TimeFrame, Any}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.candleavl","text":"Fetch the candle expected to be available at a specific date and time frame from an OHLCV DataFrame.\n\ncandleavl(\n    df::DataFrames.AbstractDataFrame,\n    tf::TimeFrames.TimeFrame,\n    date\n) -> Union{Data.Candle{Float64}, Tuple{Data.Candle{Float64}, Any}}\n\n\nThe available candle is usually the candle that is date-wise left adjacent to the requested date.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.candlelast-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.candlelast","text":"Get the last candle from a ohlcv dataframe as a Candle.\n\ncandlelast(\n    df::DataFrames.AbstractDataFrame\n) -> Data.Candle{Float64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.candlepair-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.candlepair","text":"Same as candleat but also fetches the previous candle, returning a Tuple{Candle, Candle}.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.check_data-Tuple{Any, Zarr.ZArray}","page":"Data","title":"Data.check_data","text":"Check the size of data against a ZArray.\n\ncheck_data(data, arr::Zarr.ZArray)\n\n\nUsed to check the size of data against a ZArray arr. It takes in the data and the ZArray arr as input. Compares the size of the data with the size of the ZArray. If the sizes do not match, it raises a SizeMismatchError.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.chunksize-Tuple{Any}","page":"Data","title":"Data.chunksize","text":"Choose chunk size depending on size of data with a predefined split (e.g. 1/100), padding to the nearest power of 2.\n\nchunksize(data; parts, def) -> Tuple{Any, Vararg{Any}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.closeat-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.closeat","text":"See @candleat.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.closeavl-Union{Tuple{D}, Tuple{D, TimeFrames.TimeFrame, Any}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.closeavl","text":"See @candleavl\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.closelast-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.closelast","text":"See @candlelast\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.contiguous_ts-Tuple{Any, AbstractString}","page":"Data","title":"Data.contiguous_ts","text":"Check if a time series is contiguous based on a specified timeframe.\n\ncontiguous_ts(\n    series,\n    timeframe::AbstractString;\n    raise,\n    return_date\n) -> Union{Bool, Tuple{Bool, Any, Any}}\n\n\nThis function is used to check if a time series is contiguous based on a specified timeframe. It takes in the series as the input time series and the timeframe as a string representing the timeframe (e.g., \"1h\", \"1d\"). Optional parameters raise and return_date can be specified to customize the behavior of the function.\n\nraise: A flag indicating whether to raise a TimeFrameError if the time series is not contiguous. Default is true.\nreturn_date: A flag indicating whether to return the first non-contiguous date found in the time series. Default is false.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.default_value-Tuple{T} where T<:Type","page":"Data","title":"Data.default_value","text":"Get the default value of a given type t.\n\ndefault_value(t::Type) -> Data.Candle{Float64}\n\n\nThis function returns the default value of the specified type t.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.df!-Tuple","page":"Data","title":"Data.df!","text":"Construct a DataFrame without copying.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.empty_ohlcv-Tuple{}","page":"Data","title":"Data.empty_ohlcv","text":"An empty OHLCV dataframe.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.get_zgroup-Tuple{Zarr.AbstractStore}","page":"Data","title":"Data.get_zgroup","text":"Get the root group of a store.\n\nget_zgroup(\n    store::Zarr.AbstractStore\n) -> Union{Zarr.ZArray, Zarr.ZGroup}\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.highat-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.highat","text":"See @candleat.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.highavl-Union{Tuple{D}, Tuple{D, TimeFrames.TimeFrame, Any}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.highavl","text":"See @candleavl\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.highlast-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.highlast","text":"See @candlelast\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.key_path-Tuple{Any, Any, Any}","page":"Data","title":"Data.key_path","text":"The full key of the data stored for the (exchange, pair, timeframe) combination.\n\nkey_path(exc_name, pair, timeframe) -> String\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.load-Tuple{Data.ZarrInstance, Any, Any, Any}","page":"Data","title":"Data.load","text":"Load a pair ohlcv data from storage. as_z: returns the ZArray\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.load_data-Tuple{Data.ZarrInstance, Any}","page":"Data","title":"Data.load_data","text":"Load data from zarr instance.\n\nload_data(\n    zi::Data.ZarrInstance,\n    key;\n    serialized,\n    kwargs...\n) -> Any\n\n\nzi: The zarr instance to use\nkey: the name of the array to load from the zarr instance (full key path).\ntype: Set to the type that zarr should use to store the data (only bits types). [Float64].\nsz: The chunks tuple which should match the shape of the already saved data.\nfrom: The starting index to load the data from. Default is an empty string, indicating no specific starting index.\nto: The ending index to load the data up to. Default is an empty string, indicating no specific ending index.\nz_col: The column in the Zarr array to load the data from. Default is 1.\ntype: The type of the data to be loaded. Default is Float64.\nserialized: A flag indicating whether the data is serialized. Default is false. If true, type is ignored.\nas_z: A flag indicating whether to return the loaded data as a ZArray. Default is false.\nwith_z: A flag indicating whether to return the loaded data along with the Zarr array (as tuple). Default is false.\n\nwarning: Mismatching chunks\nLoading data with from key with wrong dimensions (ndims(sz)) or shape (columns) will reset the stored zarray.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.load_ohlcv-Tuple{Data.ZarrInstance, AbstractString, Any, Any}","page":"Data","title":"Data.load_ohlcv","text":"Load OHLCV data from a ZarrInstance.\n\nload_ohlcv(\n    zi::Data.ZarrInstance,\n    exc_name::AbstractString,\n    pairs,\n    timeframe;\n    raw,\n    kwargs...\n) -> Union{Dict{String, Zarr.ZArray}, Dict{String, Data.PairData}}\n\n\nraw: A flag indicating whether to return the raw data or process it into an OHLCV format. Default is false.\nfrom: The starting timestamp (inclusive) for loading data. Default is an empty string, indicating loading from the beginning of the ZArray.\nto: The ending timestamp (exclusive) for loading data. Default is an empty string, indicating loading until the end of the ZArray.\nsaved_col: The column index of the timestamp data in the ZArray. Default is 1.\nas_z: A flag indicating whether to return the loaded data as a ZArray. Default is false.\nwith_z: A flag indicating whether to return the loaded data along with the ZArray object. Default is false.\n\nThis function is used to load OHLCV data from a ZarrInstance. It takes in the ZarrInstance zi, the exchange name exc_name, the currency pairs pairs, and the timeframe. Optional parameters raw and kwargs can be specified to customize the loading process.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.lowat-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.lowat","text":"See @candleat.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.lowavl-Union{Tuple{D}, Tuple{D, TimeFrames.TimeFrame, Any}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.lowavl","text":"See @candleavl\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.lowlast-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.lowlast","text":"See @candlelast\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.ohlcvtuple-Tuple{}","page":"Data","title":"Data.ohlcvtuple","text":"Default OHLCVTuple value.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.openat-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.openat","text":"See @candleat.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.openavl-Union{Tuple{D}, Tuple{D, TimeFrames.TimeFrame, Any}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.openavl","text":"See @candleavl\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.openlast-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.openlast","text":"See @candlelast\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.save_data-Tuple{Data.ZarrInstance, Any, Any}","page":"Data","title":"Data.save_data","text":"Save data to a ZarrInstance with additional options.\n\nsave_data(\n    zi::Data.ZarrInstance,\n    key,\n    data;\n    serialize,\n    data_col,\n    kwargs...\n) -> Zarr.ZArray\n\n\ntype: The type of the data to be saved. Default is Float64.\ndata_col: The column of the data to be saved. Default is 1.\nz_col: The column in the Zarr array to save the data. Default is the same as data_col.\noverwrite: A flag indicating whether to overwrite existing data at the specified key. Default is true.\nreset: A flag indicating whether to reset the Zarr array before saving the data. Default is false.\nchunk_size: The size of the chunks to use when saving the data. Default is nothing, indicating auto-chunking.\n\nOnly dates seriality is ensured, not contiguity (unlike save_ohlcv) It creates a new array if needed, sets the chunk size if specified.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.save_ohlcv-Tuple{Data.ZarrInstance, Vararg{Any, 4}}","page":"Data","title":"Data.save_ohlcv","text":"Save OHLCV data to a ZArray.\n\nsave_ohlcv(\n    zi::Data.ZarrInstance,\n    exc_name,\n    pair,\n    timeframe,\n    data;\n    kwargs...\n) -> Union{Nothing, Zarr.ZArray}\n\n\ndata_col: The column index of the timestamp data in the input data. Default is 1.\nsaved_col: The column index of the timestamp data in the existing data. Default is equal to data_col.\ntype: The primitive type used for storing the data. Default is Float64.\nexisting: A flag indicating whether existing data should be considered during the save operation. Default is true.\noverwrite: A flag indicating whether existing data should be overwritten during the save operation. Default is true.\nreset: A flag indicating whether the ZArray should be reset before saving the data. Default is false.\ncheck:\n:bounds (default) only checks that new data is adjacent to previous data.\n:all checks full contiguity of previous and new data.\n:none or anything else, no checks are done.\n\nThe saveohlcv function saves OHLCV data to a ZArray. It performs checks on the input data and existing data (if applicable) to ensure contiguity and validity. If the checks pass, it calculates the offset based on the time difference between the first timestamps of the new and existing data. Then, it updates the ZArray with the new data starting at the calculated offset. The function provides various optional parameters to customize the save operation, such as handling existing data, overwriting, resetting, and performing checks.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.snakecased-Tuple{AbstractString}","page":"Data","title":"Data.snakecased","text":"Normalizes or special characthers separators to _.\n\nsnakecased(pair::AbstractString) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.stub!-Tuple","page":"Data","title":"Data.stub!","text":"A stub! function usually fills a container with readily available data.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.to_ohlcv-Tuple{Matrix}","page":"Data","title":"Data.to_ohlcv","text":"Convert raw ccxt OHLCV data (matrix) to a dataframe.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.to_ohlcv-Tuple{Tuple{Vector{Dates.DateTime}, Vararg{Vector{Float64}, 5}}}","page":"Data","title":"Data.to_ohlcv","text":"Construct an OHLCV dataframe backed by an OHLCVTuple.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.to_ohlcv-Union{Tuple{T}, Tuple{V}, Tuple{V, T}} where {V<:AbstractVector{Data.Candle}, T<:TimeFrames.TimeFrame}","page":"Data","title":"Data.to_ohlcv","text":"Convert data to OHLCV format.\n\nto_ohlcv(\n    data::AbstractVector{Data.Candle},\n    timeframe::TimeFrames.TimeFrame\n) -> Any\n\n\nThis function converts the input data to the OHLCV (Open, High, Low, Close, Volume) format, using the specified timeframe. It returns the converted data as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.tobytes-Tuple{Any}","page":"Data","title":"Data.tobytes","text":"Convert a value data to its byte representation.\n\ntobytes(data) -> Vector{UInt8}\n\n\nThis function converts the input value data to its byte representation.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.todata-Tuple{Any}","page":"Data","title":"Data.todata","text":"Convert a byte array bytes to its original data representation.\n\ntodata(bytes) -> Any\n\n\nThis function converts the input byte array bytes back to its original data representation.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.volumeat-Union{Tuple{D}, Tuple{D, Dates.DateTime}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.volumeat","text":"See @candleat.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.volumeavl-Union{Tuple{D}, Tuple{D, TimeFrames.TimeFrame, Any}} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.volumeavl","text":"See @candleavl\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.volumelast-Tuple{D} where D<:DataFrames.AbstractDataFrame","page":"Data","title":"Data.volumelast","text":"See @candlelast\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.zdelete!-Tuple{Zarr.ZArray, Union{Nothing, Dates.DateTime}, Union{Nothing, Dates.DateTime}}","page":"Data","title":"Data.zdelete!","text":"Delete elements from a ZArray z within a specified date range.\n\nzdelete!(\n    z::Zarr.ZArray,\n    from_dt::Union{Nothing, Dates.DateTime},\n    to_dt::Union{Nothing, Dates.DateTime};\n    by,\n    select,\n    serialized,\n    buffer\n)\n\n\nThis function deletes elements from a ZArray z that fall within the specified date range. The range is defined by from_dt (inclusive) and to_dt (exclusive). The deletion is performed in place.\n\nThe by argument is optional and defaults to the identity function. It specifies the function used to extract the date value from each element of the ZArray. The select argument is optional and defaults to a function that selects the first column of each element in the ZArray. It specifies the function used to select the relevant portion of each element for deletion. The serialized argument is optional and defaults to false. If set to true, the ZArray is assumed to be serialized, and the deletion is performed on the serialized representation. The buffer argument is optional and can be used to provide an IOBuffer for intermediate storage during deletion.\n\n\n\n\n\n","category":"method"},{"location":"API/data/#Data.zilmdb","page":"Data","title":"Data.zilmdb","text":"Create a ZarrInstance at specified path using lmdb as backend.\n\nzilmdb(; ...) -> Data.ZarrInstance\nzilmdb(path::AbstractString; force) -> Data.ZarrInstance\n\n\nThis function creates a ZarrInstance object at the specified path using lmdb as the backend. It has an optional parameter 'force' to reset the underlying store.\n\n\n\n\n\n","category":"function"},{"location":"API/data/#Data.@as_mat-Tuple{Any}","page":"Data","title":"Data.@as_mat","text":"Redefines given variable to a Matrix with type of the underlying container type.\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#Data.@candleat-Tuple{Any}","page":"Data","title":"Data.@candleat","text":"Get the candle value at a specific date from an OHLCV DataFrame.\n\nThis function returns the requested value at the specified date from the input OHLCV DataFrame. The optional parameter return_idx determines whether to also return the index of the opening price.\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#Data.@candleavl-Tuple{Any}","page":"Data","title":"Data.@candleavl","text":"Fetch the candle value expected to be available at a specific date and time frame from an OHLCV DataFrame.\n\nThe available candle is usually the candle that is date-wise left adjacent to the requested date.\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#Data.@candlelast-Tuple{Any}","page":"Data","title":"Data.@candlelast","text":"Get the last candle value from an OHLCV DataFrame (df).\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#Data.@check_td-Tuple","page":"Data","title":"Data.@check_td","text":"Check the time delta between two rows in a DataFrame.\n\nThis macro is used to check the time delta between two DataFrame to ensure they are of the same time delta. It throws a TimeFrameError if the time delta does not match the specified time delta value. If no args are provided, the macro uses the za value as the default data to check.\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#Data.@checkkey-Tuple{Any}","page":"Data","title":"Data.@checkkey","text":"Macro for checking if a key exists in a DictView.\n\nThis macro checks if a given key is present in the keys field of the DictView (d).\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#Data.@to_mat","page":"Data","title":"Data.@to_mat","text":"Same as as_mat but returns the new matrix.\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#Data.@zcreate-Tuple{}","page":"Data","title":"Data.@zcreate","text":"Create a ZArray using the zcreate macro.\n\nThis macro is used to create a ZArray object. It provides a convenient syntax for creating and initializing a ZArray with the specified elements. It's a dirty macro. Uses existing variables:\n\ntype: eltype of the array.\nkey: path of the array.\nsz: size of the array.\nzi: ZarrInstance object.\n\n\n\n\n\n","category":"macro"},{"location":"API/data/#See-Also","page":"Data","title":"See Also","text":"","category":"section"},{"location":"API/data/","page":"Data","title":"Data","text":"Data Management Guide - Complete guide to working with market data\nProcessing API - Data processing and transformation functions\nDFUtils API - DataFrame manipulation utilities\nEngine API - Core execution engine functions\nFetch API - Data fetching and retrieval utilities","category":"page"},{"location":"API/pbar/#Pbar","page":"Progress Bars","title":"Pbar","text":"","category":"section"},{"location":"API/pbar/#Pbar.Pbar","page":"Progress Bars","title":"Pbar.Pbar","text":"Progress bar wrapper.\n\n\n\n\n\n","category":"module"},{"location":"API/pbar/#Pbar.last_render","page":"Progress Bars","title":"Pbar.last_render","text":"Stores the timestamp of the last render in the progress bar.\n\n\n\n\n\n","category":"constant"},{"location":"API/pbar/#Pbar.min_delta","page":"Progress Bars","title":"Pbar.min_delta","text":"Stores the minimum time difference required between two render updates.\n\n\n\n\n\n","category":"constant"},{"location":"API/pbar/#Pbar.pbar","page":"Progress Bars","title":"Pbar.pbar","text":"Holds a reference to the current progress bar or nothing if no progress bar is active.\n\n\n\n\n\n","category":"constant"},{"location":"API/pbar/#Pbar.pbar_lock","page":"Progress Bars","title":"Pbar.pbar_lock","text":"Holds a lock to avoid flickering when updating the progress bar.\n\n\n\n\n\n","category":"constant"},{"location":"API/pbar/#Pbar.pbj","page":"Progress Bars","title":"Pbar.pbj","text":"The current job being rendered.\n\n\n\n\n\n","category":"constant"},{"location":"API/pbar/#Pbar.plu","page":"Progress Bars","title":"Pbar.plu","text":"The last update timestamp.\n\n\n\n\n\n","category":"constant"},{"location":"API/pbar/#Pbar.RunningJob","page":"Progress Bars","title":"Pbar.RunningJob","text":"Represents a job that is currently running in the progress bar.\n\njob\ncounter\nupdated_at\n\nThe RunningJob struct holds a ProgressJob, a counter, and a timestamp of when it was last updated. The job field is of type ProgressJob which represents the job that is currently running. The counter field is an integer that defaults to 1 and is used to keep track of the progress of the job. The updated_at field is a DateTime object that stores the timestamp of when the job was last updated.\n\n\n\n\n\n","category":"type"},{"location":"API/pbar/#Pbar.clearpbar","page":"Progress Bars","title":"Pbar.clearpbar","text":"Clears the current progress bar.\n\nclearpbar() -> Union{Nothing, Bool}\nclearpbar(pb) -> Union{Nothing, Bool}\n\n\nThe clearpbar function stops all jobs in the current progress bar, empties the job list, and then stops the progress bar itself. It uses a lock to ensure thread safety during these operations.\n\n\n\n\n\n","category":"function"},{"location":"API/pbar/#Pbar.complete!","page":"Progress Bars","title":"Pbar.complete!","text":"Complete a job.\n\n\n\n\n\n","category":"function"},{"location":"API/pbar/#Pbar.dorender","page":"Progress Bars","title":"Pbar.dorender","text":"Renders the progress bar if enough time has passed since the last render.\n\n\n\n\n\n","category":"function"},{"location":"API/pbar/#Pbar.frequency!-Tuple{Any}","page":"Progress Bars","title":"Pbar.frequency!","text":"Set the update frequency globally.\n\n\n\n\n\n","category":"method"},{"location":"API/pbar/#Pbar.pbar!-Tuple{}","page":"Progress Bars","title":"Pbar.pbar!","text":"Initializes a new progress bar.\n\npbar!(\n;\n    transient,\n    columns,\n    kwargs...\n) -> Term.Progress.ProgressBar\n\n\nThe pbar! function first clears any existing progress bar, then creates a new ProgressBar with the provided arguments. The transient argument defaults to true, and columns defaults to :default.\n\n\n\n\n\n","category":"method"},{"location":"API/pbar/#Pbar.pbclose!","page":"Progress Bars","title":"Pbar.pbclose!","text":"Stops the progress bar after completing the job.\n\n\n\n\n\n","category":"function"},{"location":"API/pbar/#Pbar.pbclose!-2","page":"Progress Bars","title":"Pbar.pbclose!","text":"Terminates the progress bar.\n\npbclose!()\npbclose!(pb::Term.Progress.ProgressBar)\npbclose!(pb::Term.Progress.ProgressBar, all)\n\n\nThe pbclose! function completes all jobs in the progress bar and then stops the progress bar itself.\n\n\n\n\n\n","category":"function"},{"location":"API/pbar/#Pbar.startjob!","page":"Progress Bars","title":"Pbar.startjob!","text":"Starts a new job in the progress bar.\n\n\n\n\n\n","category":"function"},{"location":"API/pbar/#Pbar.transient!","page":"Progress Bars","title":"Pbar.transient!","text":"Toggles pbar transient flag\n\n\n\n\n\n","category":"function"},{"location":"API/pbar/#Pbar.@pbar!","page":"Progress Bars","title":"Pbar.@pbar!","text":"Instantiate a progress bar:\n\ndata: length(data) determines the bar total\nunit: what unit the display\ndesc: description will appear over the progressbar\n\n\n\n\n\n","category":"macro"},{"location":"API/pbar/#Pbar.@pbclose!-Tuple{}","page":"Progress Bars","title":"Pbar.@pbclose!","text":"Calls pbclose! on the global progress bar.\n\n\n\n\n\n","category":"macro"},{"location":"API/pbar/#Pbar.@pbinit!-Tuple{}","page":"Progress Bars","title":"Pbar.@pbinit!","text":"Initializes the progress bar.\n\n\n\n\n\n","category":"macro"},{"location":"API/pbar/#Pbar.@pbstop!-Tuple{}","page":"Progress Bars","title":"Pbar.@pbstop!","text":"Stops the progress bar.\n\n\n\n\n\n","category":"macro"},{"location":"API/pbar/#Pbar.@pbupdate!-Tuple","page":"Progress Bars","title":"Pbar.@pbupdate!","text":"Single update to the progressbar with the new value.\n\n\n\n\n\n","category":"macro"},{"location":"API/pbar/#Pbar.@withpbar!-Tuple{Any, Vararg{Any}}","page":"Progress Bars","title":"Pbar.@withpbar!","text":"Same as @pbar! but with implicit closing.\n\nThe first argument should be the collection to iterate over. Optional kw arguments:\n\ndesc: description\n\n\n\n\n\n","category":"macro"},{"location":"API/exchanges/#Exchanges-API","page":"Exchanges","title":"Exchanges API","text":"","category":"section"},{"location":"API/exchanges/","page":"Exchanges","title":"Exchanges","text":"The Exchanges module provides unified interfaces for connecting to cryptocurrency exchanges through the CCXT library. It handles exchange connectivity, market data access, and order management across multiple exchanges.","category":"page"},{"location":"API/exchanges/#Overview","page":"Exchanges","title":"Overview","text":"","category":"section"},{"location":"API/exchanges/","page":"Exchanges","title":"Exchanges","text":"The Exchanges module includes:","category":"page"},{"location":"API/exchanges/","page":"Exchanges","title":"Exchanges","text":"Exchange connection and authentication management\nUnified market data interfaces\nOrder placement and management\nAccount and balance information\nMarket information and trading rules\nSandbox and live trading modes","category":"page"},{"location":"API/exchanges/#Core-Exchange-Types","page":"Exchanges","title":"Core Exchange Types","text":"","category":"section"},{"location":"API/exchanges/#Exchange-Identification","page":"Exchanges","title":"Exchange Identification","text":"","category":"section"},{"location":"API/exchanges/#Exchange-Connection","page":"Exchanges","title":"Exchange Connection","text":"","category":"section"},{"location":"API/exchanges/#Market-Data-Access","page":"Exchanges","title":"Market Data Access","text":"","category":"section"},{"location":"API/exchanges/#Market-Information","page":"Exchanges","title":"Market Information","text":"","category":"section"},{"location":"API/exchanges/#Fee-Information","page":"Exchanges","title":"Fee Information","text":"","category":"section"},{"location":"API/exchanges/#Market-Data-Retrieval","page":"Exchanges","title":"Market Data Retrieval","text":"","category":"section"},{"location":"API/exchanges/#Account-Management","page":"Exchanges","title":"Account Management","text":"","category":"section"},{"location":"API/exchanges/#Account-Information","page":"Exchanges","title":"Account Information","text":"","category":"section"},{"location":"API/exchanges/#Balance-Information","page":"Exchanges","title":"Balance Information","text":"","category":"section"},{"location":"API/exchanges/#Order-Management","page":"Exchanges","title":"Order Management","text":"","category":"section"},{"location":"API/exchanges/#Order-Placement","page":"Exchanges","title":"Order Placement","text":"","category":"section"},{"location":"API/exchanges/#Order-Monitoring","page":"Exchanges","title":"Order Monitoring","text":"","category":"section"},{"location":"API/exchanges/#Exchange-Configuration","page":"Exchanges","title":"Exchange Configuration","text":"","category":"section"},{"location":"API/exchanges/#Exchange-Parameters","page":"Exchanges","title":"Exchange Parameters","text":"","category":"section"},{"location":"API/exchanges/#Market-Symbol-Mapping","page":"Exchanges","title":"Market Symbol Mapping","text":"","category":"section"},{"location":"API/exchanges/#Error-Handling-and-Resilience","page":"Exchanges","title":"Error Handling and Resilience","text":"","category":"section"},{"location":"API/exchanges/#Connection-Management","page":"Exchanges","title":"Connection Management","text":"","category":"section"},{"location":"API/exchanges/#Market-Data-Validation","page":"Exchanges","title":"Market Data Validation","text":"","category":"section"},{"location":"API/exchanges/#Multi-Exchange-Support","page":"Exchanges","title":"Multi-Exchange Support","text":"","category":"section"},{"location":"API/exchanges/#Exchange-Comparison","page":"Exchanges","title":"Exchange Comparison","text":"","category":"section"},{"location":"API/exchanges/#Complete-API-Reference","page":"Exchanges","title":"Complete API Reference","text":"","category":"section"},{"location":"API/exchanges/#Exchanges.LEVERAGED_PAIR_OPTIONS","page":"Exchanges","title":"Exchanges.LEVERAGED_PAIR_OPTIONS","text":"A leveraged pair is a pair like BTC3L/USD.\n\n:yes : Leveraged pairs will not be filtered.\n:only : ONLY leveraged will be kept.\n:from : Selects non leveraged pairs, that also have at least one leveraged sibling.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.MARKET_TYPES","page":"Exchanges","title":"Exchanges.MARKET_TYPES","text":"Ccxt market types.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.TICKERSLIST_LOCK_DICT","page":"Exchanges","title":"Exchanges.TICKERSLIST_LOCK_DICT","text":"Lock held when fetching tickers (list).\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.TICKERS_CACHE100","page":"Exchanges","title":"Exchanges.TICKERS_CACHE100","text":"The cache for tickers which lasts for 100 minutes by exchange pair.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.activeCache1Min","page":"Exchanges","title":"Exchanges.activeCache1Min","text":"Caches active states (1minute).\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.currenciesCache1Hour","page":"Exchanges","title":"Exchanges.currenciesCache1Hour","text":"The cache for currencies which lasts for 1 hour by exchange.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.currency_lock","page":"Exchanges","title":"Exchanges.currency_lock","text":"This lock is only used during currency construction.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.leverageTiersCache","page":"Exchanges","title":"Exchanges.leverageTiersCache","text":"Leverage tiers are cached both in RAM and storage.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.marketsCache1Min","page":"Exchanges","title":"Exchanges.marketsCache1Min","text":"Caches markets (1minute).\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.tickersCache10Sec","page":"Exchanges","title":"Exchanges.tickersCache10Sec","text":"Caches tickers (10seconds).\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.tickersLockDict","page":"Exchanges","title":"Exchanges.tickersLockDict","text":"Lock held when fetching tickers (per ticker).\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#Exchanges.CcxtTrade","page":"Exchanges","title":"Exchanges.CcxtTrade","text":"A named tuple representing a trade in the CCXT (CryptoCurrency eXchange Trading) library.\n\ntimestamp\nsymbol\norder\ntype\nside\ntakerOrMaker\nprice\namount\ncost\nfee\nfees\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#Exchanges.CurrencyCash","page":"Exchanges","title":"Exchanges.CurrencyCash","text":"A CurrencyCash contextualizes a Cash instance w.r.t. an exchange. Operations are rounded to the currency precision.\n\ncash\nlimits\nprecision\nfees\nsandbox\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#Exchanges.CurrencyCash-Tuple{Type{<:ExchangeID}, Type{<:Cash}, Any}","page":"Exchanges","title":"Exchanges.CurrencyCash","text":"Create a CurrencyCash object.\n\nCurrencyCash(\n    id::Type{<:ExchangeID},\n    cash_type::Type{<:Cash},\n    v;\n    sandbox,\n    account\n) -> Exchanges.CurrencyCash\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.LeverageTier","page":"Exchanges","title":"Exchanges.LeverageTier","text":"A type representing a tier of leverage.\n\nmin_notional\nmax_notional\nmax_leverage\ntier\nmmr\nbc\n\nThis type is used to store and manage information about a specific leverage tier. Each tier is defined by its minimum and maximum notional values, maximum leverage, tier number, and maintenance margin requirement.\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#Exchanges.LeverageTiersDict","page":"Exchanges","title":"Exchanges.LeverageTiersDict","text":"Every asset has a list of leverage tiers, that are stored in a SortedDict, if the exchange supports them.\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#Exchanges.TradeRole","page":"Exchanges","title":"Exchanges.TradeRole","text":"Taker Or Maker\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#Exchanges.TradeSide","page":"Exchanges","title":"Exchanges.TradeSide","text":"Buy or Sell\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#Ccxt.issupported-Tuple{TimeFrames.TimeFrame, Any}","page":"Exchanges","title":"Ccxt.issupported","text":"Check if a timeframe is supported by an exchange.\n\nissupported(tf::TimeFrames.TimeFrame, exc) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Data.load_ohlcv-Tuple{AbstractString}","page":"Exchanges","title":"Data.load_ohlcv","text":"Loads all pairs for a given timeframe, matching the global exc (Exchange object) and config.\n\nload_ohlcv(timeframe::AbstractString; kwargs...) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Data.load_ohlcv-Tuple{Exchange, AbstractString}","page":"Exchanges","title":"Data.load_ohlcv","text":"Loads all pairs for a given exchange and timeframe, matching the global config and zi (Zarr Instance).\n\nload_ohlcv(\n    exc::Exchange,\n    timeframe::AbstractString;\n    kwargs...\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Data.load_ohlcv-Tuple{Union{AbstractDict, AbstractArray}, AbstractString}","page":"Exchanges","title":"Data.load_ohlcv","text":"Load given pairs from the global exc (Exchange object) and zi (Zarr Instance).\n\nload_ohlcv(\n    pairs::Union{AbstractDict, AbstractArray},\n    timeframe::AbstractString;\n    kwargs...\n) -> Union{Dict{String, Zarr.ZArray}, Dict{String, Data.PairData}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Data.load_ohlcv-Tuple{}","page":"Exchanges","title":"Data.load_ohlcv","text":"Load all pairs from the exchange according to the configured quote currency and timeframe.\n\nload_ohlcv(\n\n) -> Union{Dict{String, Zarr.ZArray}, Dict{String, Data.PairData}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Data.save_ohlcv-Tuple{Any, Any, Any}","page":"Exchanges","title":"Data.save_ohlcv","text":"Updates pair data of the globally set Exchange instance.\n\nsave_ohlcv(pair, timeframe, data; kwargs...)\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges._cur-Tuple{Any, Any}","page":"Exchanges","title":"Exchanges._cur","text":"Returns the currency from the exchange if found.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges._lpf-Tuple{Any, Any}","page":"Exchanges","title":"Exchanges._lpf","text":"Returns the limits, precision, and fees for a currency as a named tuple.\n\n_lpf(\n    exc,\n    cur\n) -> NamedTuple{(:limits, :precision, :fees), <:Tuple{@NamedTuple{min::Float64, max::Float64}, Union{Float64, Int64}, Number}}\n\n\nThe tuple fields can be nothing if the currency property is not provided.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges._setfees!-Tuple{Any, Any, Any}","page":"Exchanges","title":"Exchanges._setfees!","text":"Ccxt fees can have different forms.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.accounts-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.accounts","text":"The accounts available for the exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.check-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.check","text":"Checks if the python exchange instance supports all the calls required by Planar.\n\ncheck(exc::Exchange; type)\n\n\nexc: an Exchange object to perform the check on.\ntype (optional, default is :basic): a symbol representing the type of check to perform.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.check_timeout","page":"Exchanges","title":"Exchanges.check_timeout","text":"Check that the exchange timeout is not too low wrt the interval.\n\n\n\n\n\n","category":"function"},{"location":"API/exchanges/#Exchanges.current_account-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.current_account","text":"The account currently being used by the exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.default_leverage_tier-Tuple{Any}","page":"Exchanges","title":"Exchanges.default_leverage_tier","text":"Returns a default leverage tier for a specific symbol.\n\ndefault_leverage_tier(\n    sym\n) -> SortedDict{Int64, Exchanges.LeverageTier{Float64}, Base.Order.ForwardOrdering}\n\n\nThe default leverage tier has generous limits.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.emptycaches!-Tuple{}","page":"Exchanges","title":"Exchanges.emptycaches!","text":"Clears all Python-dependent caches.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.exckeys!-Tuple{Any}","page":"Exchanges","title":"Exchanges.exckeys!","text":"Set exchange api keys.\n\nexckeys!(exc; sandbox, acc)\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.filter_markets-Tuple{Any}","page":"Exchanges","title":"Exchanges.filter_markets","text":"Get the markets of the ccxt instance, according to min_volume and quote currency.\n\nfilter_markets(\n    exc;\n    min_volume,\n    quot,\n    sep,\n    type\n) -> Dict{Any, Any}\n\n\nThe filter_markets function takes the following parameters:\n\nexc: an Exchange object to get the markets from.\nmin_volume (optional, default is 10e4): the minimum volume that a market should have.\nquot (optional, default is \"USDT\"): the quote currency to filter the markets by.\nsep (optional, default is '/'): the separator used in market strings.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.futures-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.futures","text":"Returns the matching futures exchange instance, if it exists, or the input exchange otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.getexchange!","page":"Exchanges","title":"Exchanges.getexchange!","text":"getexchage!: ccxt exchange by symbol either from cache or anew.\n\ngetexchange!(x::Symbol; ...) -> Exchange\ngetexchange!(\n    x::Symbol,\n    params;\n    account,\n    sandbox,\n    markets,\n    kwargs...\n) -> Exchange\n\n\nIt uses a WS instance if available, otherwise an async instance.\n\n\n\n\n\n","category":"function"},{"location":"API/exchanges/#Exchanges.getexchange-Tuple{}","page":"Exchanges","title":"Exchanges.getexchange","text":"Get the global exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.has_leverage-Tuple{Any, Any}","page":"Exchanges","title":"Exchanges.has_leverage","text":"True if pair is a leveraged pair.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.hastickers-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.hastickers","text":"Check if exchange has tickers list.\n\nhastickers(exc::Exchange) -> Union{Missing, Bool}\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.hasvolume-Tuple{Any, Any}","page":"Exchanges","title":"Exchanges.hasvolume","text":"True if symbol sym has a quote volume less than min_vol.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.is_pair_active-Tuple{AbstractString, Exchange}","page":"Exchanges","title":"Exchanges.is_pair_active","text":"Check if a currency pair is active on an exchange.\n\nis_pair_active(pair::AbstractString, exc::Exchange) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.isfileyounger-Tuple{AbstractString, Dates.Period}","page":"Exchanges","title":"Exchanges.isfileyounger","text":"Checks if a file is younger than a specified period.\n\nisfileyounger(f::AbstractString, p::Dates.Period) -> Any\n\n\nf: a string that represents the path to the file.\np: a Period object that represents the time period.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.ismargin-Tuple{Any}","page":"Exchanges","title":"Exchanges.ismargin","text":"True if mkt is a leveraged market.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.ispercentage-Tuple{Any}","page":"Exchanges","title":"Exchanges.ispercentage","text":"Check if market has percentage or absolute fees.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.isquote-Tuple{Any, Any}","page":"Exchanges","title":"Exchanges.isquote","text":"True if id is a quote id.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.issandbox-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.issandbox","text":"Check if exchange is in sandbox mode.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.jlpyconvert-Tuple{Any}","page":"Exchanges","title":"Exchanges.jlpyconvert","text":"Convert a Python object into a Julia object.\n\njlpyconvert(py) -> Union{Nothing, Dict{Any, Any}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.lastprice-Tuple{AbstractString, Exchange}","page":"Exchanges","title":"Exchanges.lastprice","text":"Fetch the latest price for a specific pair from an exchange.\n\nlastprice(\n    pair::AbstractString,\n    exc::Exchange;\n    kwargs...\n) -> Any\n\n\npair: a string representing the currency pair to fetch the latest price for.\nexc: an Exchange object to fetch the latest price from.\nkwargs (optional): any additional keyword arguments are passed on to the underlying fetch operation.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.leverage!-Tuple{Exchange, Any, Any}","page":"Exchanges","title":"Exchanges.leverage!","text":"Update the leverage for a specific symbol.\n\nleverage!(exc::Exchange, v, sym; side, timeout) -> Any\n\n\nexc: an Exchange object to update the leverage on.\nv: a Real number representing the new leverage value.\nsym: a string representing the symbol to update the leverage for.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.leverage_func","page":"Exchanges","title":"Exchanges.leverage_func","text":"Constructor that returns a function that checks if a pair is leveraged.\n\n\n\n\n\n","category":"function"},{"location":"API/exchanges/#Exchanges.leverage_tiers-Tuple{Exchange, AbstractString}","page":"Exchanges","title":"Exchanges.leverage_tiers","text":"Fetch the leverage tiers for a specific symbol from an exchange.\n\nleverage_tiers(exc::Exchange, sym::AbstractString) -> Any\n\n\nexc: an Exchange object to fetch the leverage tiers from.\nsym: a string representing the symbol to fetch the leverage tiers for.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.loadmarkets!-Tuple{Any}","page":"Exchanges","title":"Exchanges.loadmarkets!","text":"Load exchange markets.\n\nloadmarkets!(exc; cache, agemax)\n\n\nexc: an Exchange object that represents the exchange to load markets from.\ncache (optional, default is true): a boolean that indicates whether to rely on storage cache.\nagemax (optional, default is Day(1)): a Period object that represents the maximum cache valid period.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.marginmode!-Tuple{Exchange, Any, Any}","page":"Exchanges","title":"Exchanges.marginmode!","text":"Update margin mode for a specific symbol on the exchange.\n\nAlso sets if the position is hedged or one sided. For customizations, dispatch to dosetmargin.\n\nmarginmode!(\n    exc::Exchange,\n    mode,\n    symbol;\n    hedged,\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.market!-Tuple{Any, Exchange}","page":"Exchanges","title":"Exchanges.market!","text":"Retrieves a cached market (1minute) or fetches it from exchange.\n\nmarket!(pair, exc::Exchange) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.market_fees-Tuple{AbstractString, Exchange}","page":"Exchanges","title":"Exchanges.market_fees","text":"Fetch the market fees for a specific pair from an exchange.\n\nmarket_fees(\n    pair::AbstractString,\n    exc::Exchange;\n    only_taker\n) -> NamedTuple{(:taker, :maker, :min, :max), <:NTuple{4, Any}}\n\n\npair: a string representing the currency pair to fetch the market fees for.\nexc (optional, default is the current exchange): an Exchange object to fetch the market fees from.\nonly_taker (optional, default is nothing): a boolean indicating whether to fetch only the taker fee. If nothing, both maker and taker fees are fetched.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.market_limits-Tuple{AbstractString, Exchange}","page":"Exchanges","title":"Exchanges.market_limits","text":"Fetch the market limits for a specific pair from an exchange.\n\nmarket_limits(\n    pair::AbstractString,\n    exc::Exchange;\n    precision,\n    default_leverage,\n    default_amount,\n    default_price,\n    default_cost\n) -> NamedTuple\n\n\npair: a string representing the currency pair to fetch the market limits for.\nexc: an Exchange object to fetch the market limits from.\nprecision (optional, default is price=nothing, amount=nothing): a named tuple specifying the precision for price and amount.\ndefault_leverage (optional, default is DEFAULT_LEVERAGE): the default leverage to use if not specified in the market data.\ndefault_amount (optional, default is DEFAULT_AMOUNT): the default amount to use if not specified in the market data.\ndefault_price (optional, default is DEFAULT_PRICE): the default price to use if not specified in the market data.\ndefault_cost (optional, default is DEFAULT_COST for non-fiat quote pairs and DEFAULT_FIAT_COST for fiat quote pairs): the default cost to use if not specified in the market data.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.market_precision-Tuple{AbstractString, Exchange}","page":"Exchanges","title":"Exchanges.market_precision","text":"Precision of the (base, quote) currencies of the market.\n\nmarket_precision(\n    pair::AbstractString,\n    exc::Exchange\n) -> NamedTuple{(:amount, :price), <:Tuple{Any, Any}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.marketsid-Tuple{Exchange, Vararg{Any}}","page":"Exchanges","title":"Exchanges.marketsid","text":"Get the exchange market ids.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.markettype","page":"Exchanges","title":"Exchanges.markettype","text":"Any of (:spot, :future, :swap, :option, :margin, :delivery)\n\n\n\n\n\n","category":"function"},{"location":"API/exchanges/#Exchanges.maxleverage-Tuple{Exchange, AbstractString, Real}","page":"Exchanges","title":"Exchanges.maxleverage","text":"Get the maximum leverage for a specific size and symbol from an exchange.\n\nmaxleverage(\n    exc::Exchange,\n    sym::AbstractString,\n    size::Real\n) -> Real\n\n\nexc: an Exchange object to fetch the maximum leverage from.\nsym: a string representing the symbol to fetch the maximum leverage for.\nsize: a Real number representing the size to fetch the maximum leverage for.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.price_ranges-Tuple{AbstractString, Vararg{Any}}","page":"Exchanges","title":"Exchanges.price_ranges","text":"Get price ranges using tickers data from exchange.\n\nprice_ranges(pair::AbstractString, args...; exc, kwargs...)\n\n\nThe price_ranges function takes the following parameters:\n\npair: a string representing the currency pair.\nargs...: a variable number of arguments to pass to the price ranges calculation.\nexc (optional, default is global exc): an Exchange object to get the tickers data from.\nkwargs...: a variable number of keyword arguments to pass to the price ranges calculation.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.quoteid-Tuple{Any}","page":"Exchanges","title":"Exchanges.quoteid","text":"Quote id of the market.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.quotevol-Tuple{AbstractDict}","page":"Exchanges","title":"Exchanges.quotevol","text":"Get quote volume from ticker.\n\nquotevol(tkr::AbstractDict) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.ratelimit!","page":"Exchanges","title":"Exchanges.ratelimit!","text":"Enable or disable rate limit.\n\nratelimit!(exc::Exchange) -> Bool\nratelimit!(exc::Exchange, flag) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"API/exchanges/#Exchanges.sandbox!-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.sandbox!","text":"Enable sandbox mode for exchange. Should only be called on exchange construction.\n\nsandbox!(\n    exc::Exchange;\n    flag,\n    remove_keys\n) -> Union{Nothing, Bool}\n\n\nexc (optional, default is global exc): an Exchange object to set the sandbox mode for.\nflag (optional, default is the inverse of the current sandbox mode status): a boolean indicating whether to enable or disable sandbox mode.\nremove_keys (optional, default is true): a boolean indicating whether to remove the API keys while enabling sandbox mode.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.setexchange!-Tuple{Exchange, Vararg{Any}}","page":"Exchanges","title":"Exchanges.setexchange!","text":"Initializes an exchange struct.\n\nsetexchange!(\n    exc::Exchange,\n    args...;\n    markets,\n    kwargs...\n) -> ExchangeTypes.CcxtExchange\n\n\nexc: an Exchange object to be set.\nargs...: a variable number of arguments to pass to the exchange setup.\nmarkets (optional, default is :yes): a symbol that indicates whether to load markets during setup.\nkwargs...: a variable number of keyword arguments to pass to the exchange setup.\n\nConfigures the matching ccxt class, optionally loads the markets, sets the exchange timeframes, and sets the exchange API keys.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.setflags!-Tuple{ExchangeTypes.CcxtExchange}","page":"Exchanges","title":"Exchanges.setflags!","text":"Set the ccxt exchange has flags.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.spotsymbol-Tuple{Any, Any}","page":"Exchanges","title":"Exchanges.spotsymbol","text":"Trims the settlement currency in futures. (mkt is a ccxt market.)\n\nspotsymbol(sym, mkt) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.ticker!-Tuple{Any, Exchange}","page":"Exchanges","title":"Exchanges.ticker!","text":"Fetch the ticker for a specific pair from an exchange.\n\nticker!(pair, exc::Exchange; timeout, func, delay) -> Any\n\n\nThe ticker! function takes the following parameters:\n\npair: a string representing the currency pair to fetch the ticker for.\nexc: an Exchange object to fetch the ticker from.\ntimeout (optional, default is 3 seconds): the maximum time to wait for the ticker fetch operation.\nfunc (optional, default is the result of _tickerfunc(exc)): the function to use to fetch the ticker.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.tickerprice-Tuple{Any}","page":"Exchanges","title":"Exchanges.tickerprice","text":"Get price from ticker.\n\ntickerprice(tkr) -> Any\n\n\nThe tickerprice function takes the following parameters:\n\ntkr: a Ticker object.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.tickers-Tuple{Exchange, Any}","page":"Exchanges","title":"Exchanges.tickers","text":"Get the exchange tickers.\n\ntickers(\n    exc::Exchange,\n    quot;\n    min_vol,\n    skip_fiat,\n    with_margin,\n    with_leverage,\n    as_vec,\n    verbose,\n    type,\n    cross_match\n)\n\n\nexc: an Exchange object to fetch the tickers from.\nquot: only choose pairs where the quote currency equals quot.\nmin_vol: the minimum volume of each pair.\nskip_fiat (optional, default is true): ignore fiat/fiat pairs.\nwith_margin (optional, default is the result of config.margin != NoMargin()): only choose pairs enabled for margin trading.\nwith_leverage (optional, default is :no): if :no, skip all pairs where the base currency matches the leverage_pair_rgx regex.\nas_vec (optional, default is false): return the pair list as a Vector instead of as a Dict.\nverbose (optional, default is true): print detailed output about the operation.\ntype (optional, default is the result of markettype(exc)): the type of markets to fetch tickers for.\ncross_match list of other exchanges where the filter pairs must also be present in\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.tickers-Tuple{Symbol, Vararg{Any}}","page":"Exchanges","title":"Exchanges.tickers","text":"Get the tickers matching quote currency quot.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.tier-Tuple{SortedDict{Int64, Exchanges.LeverageTier}, Real}","page":"Exchanges","title":"Exchanges.tier","text":"Get the leverage tier for a specific size from a sorted dictionary of tiers.\n\ntier(\n    tiers::SortedDict{Int64, Exchanges.LeverageTier},\n    size::Real\n) -> Tuple{Union{Nothing, Int64}, Exchanges.LeverageTier}\n\n\ntiers: a SortedDict where the keys are integers representing the size thresholds and the values are LeverageTier objects.\nsize: a Real number representing the size to fetch the tier for.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.timeout!","page":"Exchanges","title":"Exchanges.timeout!","text":"Set exchange timeout. (milliseconds)\n\ntimeout!(exc::Exchange) -> Int64\ntimeout!(exc::Exchange, v) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"API/exchanges/#Exchanges.timestamp-Tuple{Exchange}","page":"Exchanges","title":"Exchanges.timestamp","text":"The current timestamp from the exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.to_float","page":"Exchanges","title":"Exchanges.to_float","text":"Convert a Python object to a float number.\n\n\n\n\n\n","category":"function"},{"location":"API/exchanges/#Exchanges.to_num-Tuple{Py}","page":"Exchanges","title":"Exchanges.to_num","text":"Convert a Python object to a number.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Instruments.value-Tuple{Exchanges.CurrencyCash}","page":"Exchanges","title":"Instruments.value","text":"The currency cash as a number.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Serialization.deserialize-Tuple{Serialization.AbstractSerializer, Type{<:Exchange}}","page":"Exchanges","title":"Serialization.deserialize","text":"When deserializing an exchange, use the deserialized id to construct the exchange.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Serialization.serialize-Union{Tuple{E}, Tuple{Serialization.AbstractSerializer, E}} where E<:Exchange","page":"Exchanges","title":"Serialization.serialize","text":"When serializing an exchange, serialize only its id.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Serialization.serialize-Union{Tuple{E}, Tuple{Serialization.AbstractSerializer, E}} where E<:ExchangeTypes.CcxtExchange","page":"Exchanges","title":"Serialization.serialize","text":"When serializing an exchange, serialize only its id.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Exchanges.@exchange!-Tuple{Any}","page":"Exchanges","title":"Exchanges.@exchange!","text":"Define an exchange variable set to its matching exchange instance.\n\n\n\n\n\n","category":"macro"},{"location":"API/exchanges/#Exchanges.@tickers!","page":"Exchanges","title":"Exchanges.@tickers!","text":"Fetch and cache tickers data.\n\nThe @tickers! macro takes the following parameters:\n\ntype (optional, default is nothing): the type of tickers to fetch and cache.\nforce (optional, default is false): a boolean that indicates whether to force the data fetch, even if the data is already present.\n\n\n\n\n\n","category":"macro"},{"location":"API/exchanges/#ExchangeTypes.HOOKS","page":"Exchanges","title":"ExchangeTypes.HOOKS","text":"Functions f(::Exchange) to call when an exchange is loaded\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#ExchangeTypes.exchangeIds","page":"Exchanges","title":"ExchangeTypes.exchangeIds","text":"All possible exchanges that can be instantiated by ccxt.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#ExchangeTypes.exchanges","page":"Exchanges","title":"ExchangeTypes.exchanges","text":"Global var holding Exchange instances. Used as a cache.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#ExchangeTypes.sb_exchanges","page":"Exchanges","title":"ExchangeTypes.sb_exchanges","text":"Global var holding Sandbox Exchange instances. Used as a cache.\n\n\n\n\n\n","category":"constant"},{"location":"API/exchanges/#ExchangeTypes.CcxtExchange","page":"Exchanges","title":"ExchangeTypes.CcxtExchange","text":"The CcxtExchange type wraps a ccxt exchange instance. Some attributes frequently accessed are copied over to avoid round tripping python. More attributes might be added in the future. To instantiate an exchange call getexchange! or setexchange!.\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#ExchangeTypes.ExcPrecisionMode","page":"Exchanges","title":"ExchangeTypes.ExcPrecisionMode","text":"Same as ccxt precision mode enums.\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#ExchangeTypes.Exchange","page":"Exchanges","title":"ExchangeTypes.Exchange","text":"Instantiates a new Exchange wrapper for the provided x Python object.\n\nThis constructs a CcxtExchange struct with the provided Python object. It extracts the exchange ID, name, and other metadata. It runs any registered hook functions for that exchange. It sets a finalizer to close the exchange when garbage collected.\n\nReturns the new Exchange instance, or an empty one if x is None.\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#ExchangeTypes.Exchange-2","page":"Exchanges","title":"ExchangeTypes.Exchange","text":"Abstract exchange type.\n\nDefines the interface for interacting with crypto exchanges. Implemented for CCXT in CcxtExchange.\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#ExchangeTypes.ExchangeID","page":"Exchanges","title":"ExchangeTypes.ExchangeID","text":"A structure for handling Exchange IDs in CCXT.\n\nThis structure is used to manage Exchange IDs in the CCXT library. It contains methods for creating an Exchange ID from a symbol, a Python object, or directly from a symbol type. It ensures that the symbol is in the list of valid exchange IDs.\n\n\n\n\n\n","category":"type"},{"location":"API/exchanges/#Base.first-Tuple{Exchange, Vararg{Symbol}}","page":"Exchanges","title":"Base.first","text":"Return the first available property from a variable number of Symbol arguments in the given Exchange.\n\nfirst(exc::Exchange, args::Symbol...) -> Any\n\n\nThis function iterates through the provided Symbols and returns the value of the first property that exists in the Exchange object.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Base.getproperty-Union{Tuple{E}, Tuple{E, Symbol}} where E<:Exchange","page":"Exchanges","title":"Base.getproperty","text":"Attributes not matching the Exchange struct fields are forwarded to the wrapped ccxt class instance.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#Base.hash-Tuple{Exchange, UInt64}","page":"Exchanges","title":"Base.hash","text":"The hash of an exchange object is reduced to its symbol (the function used to instantiate the object from ccxt).\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#ExchangeTypes._has-Tuple{Symbol}","page":"Exchanges","title":"ExchangeTypes._has","text":"Checks if the specified feature feat is supported by any of the exchanges available through the ccxt library.\n\nArguments\n\ns::Symbol: The feature to check for support across exchanges.\nfull::Bool=true: If true, checks both static and instantiated properties of the exchange for support.\n\nReturns\n\nVector{String}: A list of exchange names that support the specified feature.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#ExchangeTypes.close_exc-Tuple{ExchangeTypes.CcxtExchange}","page":"Exchanges","title":"ExchangeTypes.close_exc","text":"Closes the given exchange.\n\nclose_exc(\n    exc::ExchangeTypes.CcxtExchange\n) -> Union{Nothing, Task}\n\n\nThis function attempts to close the given exchange if it exists. It checks if the exchange has a 'close' attribute and if so, it schedules the 'close' coroutine for execution.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#ExchangeTypes.decimal_to_size-Tuple{Any, ExcPrecisionMode}","page":"Exchanges","title":"ExchangeTypes.decimal_to_size","text":"Converts value v to integer size with precision p.\n\ndecimal_to_size(v, p::ExcPrecisionMode; exc) -> Any\n\n\nUsed when converting exchange API responses to integer sizes for orders.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#ExchangeTypes.eids-Tuple","page":"Exchanges","title":"ExchangeTypes.eids","text":"Union type of many exchange ids (from Symbol arguments)\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#ExchangeTypes.exchangeid-Tuple{ExchangeID}","page":"Exchanges","title":"ExchangeTypes.exchangeid","text":"Return the given ExchangeID instance.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#ExchangeTypes.exchangeid-Tuple{Symbol}","page":"Exchanges","title":"ExchangeTypes.exchangeid","text":"Create an ExchangeID instance from a symbol.\n\n\n\n\n\n","category":"method"},{"location":"API/exchanges/#See-Also","page":"Exchanges","title":"See Also","text":"","category":"section"},{"location":"API/exchanges/","page":"Exchanges","title":"Exchanges","text":"CCXT API - CCXT library integration and utilities\nEngine API - Core execution engine functions\nStrategies API - Strategy base classes and interfaces\nExchange Configuration Guide - Setting up exchange connections\nTroubleshooting - Common exchange connection issues","category":"page"},{"location":"reference/api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"This section provides comprehensive documentation for all Planar.jl modules and functions. Each module page includes function signatures, detailed descriptions, working code examples, and usage patterns.","category":"page"},{"location":"reference/api/#Quick-Navigation","page":"API Reference","title":"Quick Navigation","text":"","category":"section"},{"location":"reference/api/#Core-Trading-Components","page":"API Reference","title":"Core Trading Components","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Strategies - Strategy base classes, interfaces, and core functionality\nEngine - Core execution engine for backtesting, paper trading, and live trading\nExecutors - Order execution and trade management\nInstances - Strategy instance management and asset handling","category":"page"},{"location":"reference/api/#Data-Management","page":"API Reference","title":"Data Management","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Data - Data structures, persistence, and OHLCV data handling\nFetch - Data fetching and retrieval utilities\nProcessing - Data processing and transformation functions\nCollections - Specialized collection types and utilities","category":"page"},{"location":"reference/api/#Exchange-Integration","page":"API Reference","title":"Exchange Integration","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Exchanges - Exchange interfaces and connectivity\nCCXT Integration - CCXT library integration and utilities\nInstruments - Financial instrument definitions and management","category":"page"},{"location":"reference/api/#Analysis-and-Optimization","page":"API Reference","title":"Analysis & Optimization","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Metrics - Performance metrics and analysis\nOptimization - Parameter optimization and hyperparameter tuning\nStrategy Tools - Utilities for strategy development\nStrategy Statistics - Statistical analysis of strategy performance","category":"page"},{"location":"reference/api/#Visualization-and-Utilities","page":"API Reference","title":"Visualization & Utilities","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Plotting - Charting and visualization functions\nDataFrame Utils - DataFrame manipulation utilities\nPython Integration - Python interoperability functions\nMiscellaneous - Additional utility functions and helpers","category":"page"},{"location":"reference/api/#Getting-Started-with-the-API","page":"API Reference","title":"Getting Started with the API","text":"","category":"section"},{"location":"reference/api/#Basic-Usage-Pattern","page":"API Reference","title":"Basic Usage Pattern","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Most Planar functions follow these common patterns:","category":"page"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"# Activate PlanarInteractive project\nimport Pkg\nPkg.activate(\"PlanarInteractive\")\n\ntry\n    using PlanarInteractive\n    @environment!\n\n    # Example API usage patterns\n    println(\"Common Planar API patterns:\")\n    \n    # Load a strategy (example)\n    println(\"s = strategy(:MyStrategy)  # Load strategy\")\n    \n    # Access strategy data (examples)\n    println(\"assets_list = assets(s)    # Get assets\")\n    println(\"exchange_info = exchange(s) # Get exchange\")\n    println(\"current_cash = freecash(s)  # Get cash\")\n    \n    # Work with data (examples)\n    println(\"ohlcv_data = load_ohlcv(s)  # Load OHLCV data\")\n    println(\"fetch_ohlcv!(s)            # Fetch new data\")\n    \n    # Note: Real usage requires proper strategy configuration\n    \ncatch e\n    @warn \"PlanarInteractive not available: $e\"\nend","category":"page"},{"location":"reference/api/#Common-Function-Categories","page":"API Reference","title":"Common Function Categories","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Strategy Functions: Functions that operate on Strategy objects\nData Functions: Functions for loading, processing, and managing market data\nOrder Functions: Functions for creating and managing orders\nAnalysis Functions: Functions for calculating metrics and statistics\nUtility Functions: Helper functions for common operations","category":"page"},{"location":"reference/api/#Function-Naming-Conventions","page":"API Reference","title":"Function Naming Conventions","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Functions ending with ! modify their arguments in-place\nFunctions starting with is return boolean values\nFunctions starting with get retrieve information\nFunctions starting with set modify configuration or state","category":"page"},{"location":"reference/api/#Error-Handling","page":"API Reference","title":"Error Handling","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Most API functions use Julia's standard error handling:","category":"page"},{"location":"reference/api/#Performance-Considerations","page":"API Reference","title":"Performance Considerations","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Use in-place functions (ending with !) when possible to avoid allocations\nBatch operations when working with multiple assets\nConsider using @async for independent operations\nCache frequently accessed data","category":"page"},{"location":"reference/api/#See-Also","page":"API Reference","title":"See Also","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Getting Started Guide - Introduction to Planar\nStrategy Development Guide - Building trading strategies\nData Management Guide - Working with market data\nTroubleshooting - Common issues and solutions","category":"page"},{"location":"reference/api/#Contributing-to-API-Documentation","page":"API Reference","title":"Contributing to API Documentation","text":"","category":"section"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"If you find missing or incorrect information in the API documentation, please:","category":"page"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"Check the source code for the most up-to-date function signatures\nTest any code examples before submitting changes\nFollow the established documentation format and style\nInclude working examples for new functions","category":"page"},{"location":"reference/api/","page":"API Reference","title":"API Reference","text":"For more information on contributing, see the Contributing Guide.","category":"page"},{"location":"guides/strategy-development/#Strategy-Development-Guide","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"This comprehensive guide covers everything you need to know about developing trading strategies in Planar. From basic concepts to advanced patterns, you'll learn how to build robust, profitable trading systems using Julia's powerful dispatch system.","category":"page"},{"location":"guides/strategy-development/#Quick-Navigation","page":"Strategy Development Guide","title":"Quick Navigation","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Strategy Fundamentals - Core concepts and architecture\nstrategies - Interactive and manual setup\nStrategy Interface - Understanding the call! dispatch system\nAdvanced Examples - Multi-timeframe, portfolio, and optimization strategies\nBest Practices - Code organization and performance tips\ntroubleshooting - Common issues and solutions","category":"page"},{"location":"guides/strategy-development/#Prerequisites","page":"Strategy Development Guide","title":"Prerequisites","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Before diving into strategy development, ensure you have:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Completed the Getting Started Guide\nBasic understanding of Data Management\nFamiliarity with Execution Modes","category":"page"},{"location":"guides/strategy-development/#Related-Topics","page":"Strategy Development Guide","title":"Related Topics","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"optimization - Parameter tuning and backtesting-mode)\nPlotting - Visualizing strategy performance\nCustomization - Extending strategy functionality","category":"page"},{"location":"guides/strategy-development/#Strategy-Fundamentals","page":"Strategy Development Guide","title":"Strategy Fundamentals","text":"","category":"section"},{"location":"guides/strategy-development/#Architecture-Overview","page":"Strategy Development Guide","title":"Architecture Overview","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Planar strategies are built around Julia's powerful dispatch system, enabling clean separation of concerns and easy customization. Each strategy is a Julia module that implements specific interface methods through the call! function dispatch pattern.","category":"page"},{"location":"guides/strategy-development/#Core-Components","page":"Strategy Development Guide","title":"Core Components","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Strategy Module: Contains your trading logic and configuration\nDispatch System: Uses call! methods to handle different strategy events\nAsset Universe: Collection of tradeable assets managed by the strategy\nExecution Modes: Sim (backtesting-mode)), Paper (simulated live), and Live trading\nMargin Support: Full support for isolated and cross margin trading","category":"page"},{"location":"guides/strategy-development/#Strategy-Type-Hierarchy","page":"Strategy Development Guide","title":"Strategy Type Hierarchy","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Where:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Mode: Execution mode (Sim, Paper, Live)\nName: Strategy module name as Symbol\nExchange: Exchange identifier\nMargin: Margin mode (NoMargin, Isolated, Cross)\nQuoteCurrency: Base currency symbol","category":"page"},{"location":"guides/strategy-development/#Dispatch-System","page":"Strategy Development Guide","title":"Dispatch System","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"The strategy interface uses Julia's multiple dispatch through the call! function. This pattern allows you to define different behaviors for different contexts while maintaining clean, extensible code.","category":"page"},{"location":"guides/strategy-development/#Key-Dispatch-Patterns","page":"Strategy Development Guide","title":"Key Dispatch Patterns","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Type vs Instance Dispatch:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Methods dispatching on Type{<:Strategy} are called before strategy construction\nMethods dispatching on strategy instances are called during runtime","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Action-Based Dispatch:","category":"page"},{"location":"guides/strategy-development/#Exchange-Specific-Dispatch","page":"Strategy Development Guide","title":"Exchange-Specific Dispatch","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"You can customize behavior for specific exchanges:","category":"page"},{"location":"guides/strategy-development/#Margin-Trading-Concepts","page":"Strategy Development Guide","title":"Margin Trading Concepts","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Planar provides comprehensive margin trading support with proper position management and risk controls.","category":"page"},{"location":"guides/strategy-development/#Margin-Modes","page":"Strategy Development Guide","title":"Margin Modes","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"NoMargin: Spot trading only","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Isolated Margin: Each position has independent margin","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Cross Margin: Shared margin across all positions","category":"page"},{"location":"guides/strategy-development/#Position-Management","page":"Strategy Development Guide","title":"Position Management","text":"","category":"section"},{"location":"guides/strategy-development/#Risk-Management-Patterns","page":"Strategy Development Guide","title":"Risk Management Patterns","text":"","category":"section"},{"location":"guides/strategy-development/#Creating-Strategies","page":"Strategy Development Guide","title":"Creating Strategies","text":"","category":"section"},{"location":"guides/strategy-development/#Interactive-Strategy-Generator","page":"Strategy Development Guide","title":"Interactive Strategy Generator","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"The simplest way to create a strategy is using the interactive generator, which prompts for all required configuration options:","category":"page"},{"location":"guides/strategy-development/#Non-Interactive-Strategy-Creation","page":"Strategy Development Guide","title":"Non-Interactive Strategy Creation","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"You can also create strategies programmatically without user interaction:","category":"page"},{"location":"guides/strategy-development/#Manual-Strategy-Setup","page":"Strategy Development Guide","title":"Manual Strategy Setup","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"If you want to create a strategy manually you can either:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Copy the user/strategies/Template.jl to a new file in the same directory and customize it\nGenerate a new project in user/strategies and customize Template.jl to be your project entry file","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"For more advanced setups you can also use Planar as a library, and construct the strategy object directly from your own module:","category":"page"},{"location":"guides/strategy-development/#Project-Based-Strategies","page":"Strategy Development Guide","title":"Project-Based Strategies","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"For complex strategies, use the project structure:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"user/strategies/MyStrategy/\n├── Project.toml          # Package definition and dependencies\n├── Manifest.toml         # Locked dependency versions\n├── src/\n│   ├── MyStrategy.jl     # Main strategy module\n│   ├── indicators.jl     # Custom indicators\n│   ├── utils.jl         # Utility functions\n│   └── risk.jl          # Risk management\n└── test/\n    └── test_strategy.jl  # Strategy tests","category":"page"},{"location":"guides/strategy-development/#Strategy-Interface","page":"Strategy Development Guide","title":"Strategy Interface","text":"","category":"section"},{"location":"guides/strategy-development/#Loading-a-Strategy","page":"Strategy Development Guide","title":"Loading a Strategy","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Strategies are instantiated by loading a Julia module at runtime:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"The strategy name corresponds to the module name, which is imported from:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"user/strategies/Example.jl (single file strategy)\nuser/strategies/Example/src/Example.jl (project-based strategy)","category":"page"},{"location":"guides/strategy-development/#Strategy-Type-Structure","page":"Strategy Development Guide","title":"Strategy Type Structure","text":"","category":"section"},{"location":"guides/strategy-development/#Basic-Strategy-Module","page":"Strategy Development Guide","title":"Basic Strategy Module","text":"","category":"section"},{"location":"guides/strategy-development/#Function-Signature-Convention","page":"Strategy Development Guide","title":"Function Signature Convention","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"The call! function follows a consistent signature pattern:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Subject: Either strategy type (Type{<:Strategy}) or instance (Strategy)\nArguments: Function-specific parameters\nVerb: Action type that determines the dispatch (e.g., ::LoadStrategy)\nKeyword Arguments: Optional parameters","category":"page"},{"location":"guides/strategy-development/#Strategy-Lifecycle","page":"Strategy Development Guide","title":"Strategy Lifecycle","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Understanding the strategy lifecycle is crucial for proper implementation:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Module Loading: Strategy module is imported\nType Construction: Strategy type is created with parameters\nInstance Creation: call!(Type{<:SC}, config, ::LoadStrategy) is called\nReset/Initialization: call!(s::SC, ::ResetStrategy) is called\nExecution Loop: call!(s::SC, timestamp, context) is called repeatedly\nCleanup: call!(s::SC, ::StopStrategy) is called when stopping","category":"page"},{"location":"guides/strategy-development/#Essential-Strategy-Methods","page":"Strategy Development Guide","title":"Essential Strategy Methods","text":"","category":"section"},{"location":"guides/strategy-development/#Required-Methods","page":"Strategy Development Guide","title":"Required Methods","text":"","category":"section"},{"location":"guides/strategy-development/#Optional-Methods","page":"Strategy Development Guide","title":"Optional Methods","text":"","category":"section"},{"location":"guides/strategy-development/#Advanced-Dispatch-Patterns","page":"Strategy Development Guide","title":"Advanced Dispatch Patterns","text":"","category":"section"},{"location":"guides/strategy-development/#Conditional-Dispatch-by-Mode","page":"Strategy Development Guide","title":"Conditional Dispatch by Mode","text":"","category":"section"},{"location":"guides/strategy-development/#Parameter-Based-Dispatch","page":"Strategy Development Guide","title":"Parameter-Based Dispatch","text":"","category":"section"},{"location":"guides/strategy-development/#Advanced-Examples","page":"Strategy Development Guide","title":"Advanced Examples","text":"","category":"section"},{"location":"guides/strategy-development/#Multi-Timeframe-Strategy","page":"Strategy Development Guide","title":"Multi-Timeframe Strategy","text":"","category":"section"},{"location":"guides/strategy-development/#Portfolio-Rebalancing-Strategy","page":"Strategy Development Guide","title":"Portfolio Rebalancing Strategy","text":"","category":"section"},{"location":"guides/strategy-development/#Advanced-Optimization-Strategy","page":"Strategy Development Guide","title":"Advanced Optimization Strategy","text":"","category":"section"},{"location":"guides/strategy-development/#Simple-Moving-Average-Strategy","page":"Strategy Development Guide","title":"Simple Moving Average Strategy","text":"","category":"section"},{"location":"guides/strategy-development/#Margin-Trading-Strategy","page":"Strategy Development Guide","title":"Margin Trading Strategy","text":"","category":"section"},{"location":"guides/strategy-development/#Best-Practices","page":"Strategy Development Guide","title":"Best Practices","text":"","category":"section"},{"location":"guides/strategy-development/#Code-Organization","page":"Strategy Development Guide","title":"Code Organization","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Module Constants: Define strategy metadata at the top\nEnvironment Macros: Use appropriate environment macros within your strategy module\nParameter Management: Use strategy attributes for parameters","category":"page"},{"location":"guides/strategy-development/#Error-Handling","page":"Strategy Development Guide","title":"Error Handling","text":"","category":"section"},{"location":"guides/strategy-development/#Performance-Optimization","page":"Strategy Development Guide","title":"Performance Optimization","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Minimize Allocations: Reuse data structures when possible\nBatch Operations: Group similar operations together\nConditional Logic: Use early returns to avoid unnecessary computations","category":"page"},{"location":"guides/strategy-development/#Testing-and-Validation","page":"Strategy Development Guide","title":"Testing and Validation","text":"","category":"section"},{"location":"guides/strategy-development/#Strategy-Configuration","page":"Strategy Development Guide","title":"Strategy Configuration","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Strategies can be configured through user/[planar.toml](../config.md#configuration-file):","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"[strategies.MyStrategy]\nexchange = \"binance\"\nmargin = \"NoMargin\"\ntimeframe = \"1h\"\ninitial_cash = 10000.0\nsandbox = true\n\n[strategies.MyStrategy.attrs]\ncustom_param1 = 1.5\ncustom_param2 = \"value\"","category":"page"},{"location":"guides/strategy-development/#Quick-Troubleshooting","page":"Strategy Development Guide","title":"Quick Troubleshooting","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"For comprehensive strategy troubleshooting with detailed solutions, see Strategy Problems.","category":"page"},{"location":"guides/strategy-development/#Common-Issues-Quick-Reference","page":"Strategy Development Guide","title":"Common Issues Quick Reference","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"❌ Strategy loading fails → Strategy Problems: Loading Issues","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Module not found errors\nCompilation failures\nMissing dependencies","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"❌ Runtime execution errors → Strategy Problems: Execution Issues","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Method dispatch errors\nData access problems\nSignal generation failures","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"❌ No trades executing → Strategy Problems: Order Execution","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Insufficient balance\nOrder validation failures\nPosition management errors","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"❌ Slow performance → Performance Issues","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Backtesting optimization\nMemory usage problems\nAlgorithm efficiency","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"❌ Data problems → Exchange Issues or Performance Issues: Data","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Missing market data\nExchange connectivity\nDatabase performance","category":"page"},{"location":"guides/strategy-development/#Development-Tips","page":"Strategy Development Guide","title":"Development Tips","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Enable Debug Logging:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Test Components Individually:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Use Simulation Mode for Debugging:","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"For detailed troubleshooting steps and platform-specific solutions, visit Strategy Problems.es","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"Check that call!(s::SC, ::OptScore) returns appropriate metrics\nVerify that parameter overrides are applied correctly in call!(s::SC, params, ::OptRun)","category":"page"},{"location":"guides/strategy-development/#Debugging-Strategies","page":"Strategy Development Guide","title":"Debugging Strategies","text":"","category":"section"},{"location":"guides/strategy-development/#Enable-Debug-Logging","page":"Strategy Development Guide","title":"Enable Debug Logging","text":"","category":"section"},{"location":"guides/strategy-development/#Strategy-State-Inspection","page":"Strategy Development Guide","title":"Strategy State Inspection","text":"","category":"section"},{"location":"guides/strategy-development/#Performance-Profiling","page":"Strategy Development Guide","title":"Performance Profiling","text":"","category":"section"},{"location":"guides/strategy-development/#Removing-Strategies","page":"Strategy Development Guide","title":"Removing Strategies","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"The function remove_strategy allows you to discard a strategy by its name:","category":"page"},{"location":"guides/strategy-development/#Advanced-Topics","page":"Strategy Development Guide","title":"Advanced Topics","text":"","category":"section"},{"location":"guides/strategy-development/#Dynamic-Universe-Management","page":"Strategy Development Guide","title":"Dynamic Universe Management","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"The universe (s.universe) is backed by a DataFrame (s.universe.data). It is possible to add and remove assets from the universe during runtime, although this feature is not extensively tested.","category":"page"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n\n    # Add new asset to universe (experimental)\n    function add_asset_to_universe_example(s, symbol::String)\n        # This requires careful handling of data synchronization\n        @info \"Adding asset to universe: $symbol\"\n        # Real implementation would be:\n        # new_asset = Asset(symbol, exchange(s))\n        # Careful handling of data synchronization required\n        println(\"Asset $symbol would be added to universe\")\n    end\n\n    # Remove asset from universe (experimental)\n    function remove_asset_from_universe_example(s, symbol::String)\n        # Close any open positions first\n        @info \"Removing asset from universe: $symbol\"\n        # Real implementation would be:\n        # ai = s[symbol]\n        # if !isnothing(ai) && freecash(ai) != 0\n        #     close_position(s, ai)\n        # end\n        println(\"Asset $symbol would be removed from universe\")\n    end\n    \n    println(\"Universe management functions defined (experimental)\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"guides/strategy-development/#Custom-Indicators","page":"Strategy Development Guide","title":"Custom Indicators","text":"","category":"section"},{"location":"guides/strategy-development/#Integration-with-External-Libraries","page":"Strategy Development Guide","title":"Integration with External Libraries","text":"","category":"section"},{"location":"guides/strategy-development/","page":"Strategy Development Guide","title":"Strategy Development Guide","text":"This comprehensive guide provides everything you need to develop sophisticated trading strategies in Planar. Start with the basic examples and gradually work your way up to more advanced patterns as you become comfortable with the dispatch system and strategy architecture.","category":"page"},{"location":"engine/engine_notes/#Backtesting-overview","page":"Backtesting overview","title":"Backtesting overview","text":"","category":"section"},{"location":"engine/engine_notes/#Goals","page":"Backtesting overview","title":"Goals","text":"","category":"section"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"The backtest should be able to be executed given a custom start and end date.\nThe strategy has to have access to the OHLCV and all past trade history.\nIt must be able to run during live trading.","category":"page"},{"location":"engine/engine_notes/#Main-loop","page":"Backtesting overview","title":"Main loop","text":"","category":"section"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"for each timestamp:\nwhile true:\nprocess([strategy](../guides/strategy-development.md), timestamp, context)","category":"page"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"The loop is just a timestamp feeder!, and the strategy holds all the state.","category":"page"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"Because we use the TimeFrames abstraction, the step can be arbitrary, the strategy will just index into ohlcv data according to the last candle compatible with the given timestamp. This is a performance trade-off, we prefer to always index with dates, and never with integers, because it reduces the assumptions to the row data must match its timestamp (its not corrupted!) compared to spurious bugs that might arise by integer indexing.\nThe simulation is adversarial to the strategy, it is the job of the simulation to decide how much loss a trade has incurred.","category":"page"},{"location":"engine/engine_notes/#Strategy-General-Considerations","page":"Backtesting overview","title":"Strategy General Considerations","text":"","category":"section"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"The strategy must account for a  tie breaker to choose which trades to perform on the same candle since we don't know which pair we observed first. In general this is a good use case for MC.","category":"page"},{"location":"engine/engine_notes/#See-Also","page":"Backtesting overview","title":"See Also","text":"","category":"section"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"Optimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management\nStrategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"engine/engine_notes/#What-does-executing-an-order-mean?","page":"Backtesting overview","title":"What does executing an order mean?","text":"","category":"section"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"When the engine executes an order, it does the following for every order:","category":"page"},{"location":"engine/engine_notes/","page":"Backtesting overview","title":"Backtesting overview","text":"Decide if order should be honored or fail\nPerform simulations, like spread, slippage, market impact.\nSignal to the strategy about failed (canceled) orders.","category":"page"},{"location":"config/#Configuration-Guide","page":"Configuration","title":"Configuration Guide","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Planar uses a flexible configuration system based on TOML files to manage strategies, exchanges, and sensitive credentials. This guide covers all aspects of configuration from basic setup to advanced customization.","category":"page"},{"location":"config/#Configuration-Files-Overview","page":"Configuration","title":"Configuration Files Overview","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Planar uses two main configuration files:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"user/planar.toml - Main configuration file for strategies, exchanges, and general settings\nuser/secrets.toml - Secure storage for API keys and sensitive credentials","category":"page"},{"location":"config/#Configuration-File","page":"Configuration","title":"Configuration File","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"The main configuration file user/planar.toml serves as the central hub for all Planar settings. This file contains strategy definitions, exchange configurations, and system preferences.","category":"page"},{"location":"config/#Basic-Structure","page":"Configuration","title":"Basic Structure","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"# Strategy definitions\n[StrategyName]\ninclude_file = \"strategies/StrategyName.jl\"\n\n# Package-based strategies\n[sources]\nAdvancedStrategy = \"strategies/AdvancedStrategy/Project.toml\"\n\n# Exchange configurations\n[binance]\nleveraged = \"from\"\n\n[bybit]\nfutures = true","category":"page"},{"location":"config/#Strategy-Configuration","page":"Configuration","title":"Strategy Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Strategies can be configured in two ways:","category":"page"},{"location":"config/#File-based-Strategies","page":"Configuration","title":"File-based Strategies","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Simple strategies defined in single Julia files:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"[MyStrategy]\ninclude_file = \"strategies/MyStrategy.jl\"\nmode = \"Paper\"  # Optional: Paper, Live, or Simulation","category":"page"},{"location":"config/#Package-based-Strategies","page":"Configuration","title":"Package-based Strategies","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Complex strategies organized as Julia packages:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"[sources]\nMyAdvancedStrategy = \"strategies/MyAdvancedStrategy/Project.toml\"","category":"page"},{"location":"config/#Exchange-Configuration","page":"Configuration","title":"Exchange Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Configure exchange-specific settings for each supported exchange:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"# Binance configuration\n[binance]\nleveraged = \"from\"  # Leverage mode: \"from\", \"to\", or \"both\"\nsandbox = false     # Use sandbox environment\n\n# Bybit configuration  \n[bybit]\nfutures = true      # Enable futures trading\ntestnet = false     # Use testnet environment\n\n# KuCoin configuration\n[kucoin]\nfutures = false     # Disable futures trading\n\n# KuCoin Futures (separate configuration)\n[kucoinfutures]\nfutures = true","category":"page"},{"location":"config/#Execution-Mode-Configuration","page":"Configuration","title":"Execution Mode Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Set default execution modes for strategies:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"[MyStrategy]\ninclude_file = \"strategies/MyStrategy.jl\"\nmode = \"Paper\"      # Default mode: Paper, Live, or Simulation","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Available modes:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Simulation - Historical backtesting with no real market connection\nPaper - Real-time simulation with live market data but no actual trades\nLive - Real trading with actual market orders","category":"page"},{"location":"config/#Secrets-Management","page":"Configuration","title":"Secrets Management","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Sensitive information like API keys and credentials are stored separately in user/secrets.toml for security.","category":"page"},{"location":"config/#API-Keys-Structure","page":"Configuration","title":"API Keys Structure","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"# Exchange API credentials\n[exchanges.binance]\napiKey = \"your_binance_api_key\"\nsecret = \"your_binance_secret_key\"\n\n[exchanges.bybit]\napiKey = \"your_bybit_api_key\"\nsecret = \"your_bybit_secret_key\"\n\n[exchanges.coinbase]\napiKey = \"your_coinbase_api_key\"\nsecret = \"your_coinbase_secret_key\"\npassphrase = \"your_coinbase_passphrase\"","category":"page"},{"location":"config/#Third-party-Service-Keys","page":"Configuration","title":"Third-party Service Keys","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"For data providers and external services:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"[default]\ncoinmarketcap_apikey = \"your_coinmarketcap_key\"\nalpha_vantage = \"your_alpha_vantage_key\"\nfred_apikey = \"your_fred_api_key\"","category":"page"},{"location":"config/#Security-Best-Practices","page":"Configuration","title":"Security Best Practices","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Never commit secrets.toml to version control - Add it to .gitignore\nUse environment-specific keys - Separate keys for development and production\nEnable IP restrictions - Limit API access to your server's IP address\nUse minimal permissions - Only enable required trading permissions\nRotate keys regularly - Change API keys periodically for security","category":"page"},{"location":"config/#Advanced-Configuration","page":"Configuration","title":"Advanced Configuration","text":"","category":"section"},{"location":"config/#Multi-Exchange-Setup","page":"Configuration","title":"Multi-Exchange Setup","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Configure multiple exchanges for diversified trading:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"# Primary exchange\n[binance]\nleveraged = \"from\"\nprimary = true\n\n# Secondary exchange\n[bybit]\nfutures = true\nbackup = true\n\n# Spot-only exchange\n[kucoin]\nfutures = false\nspot_only = true","category":"page"},{"location":"config/#Strategy-Parameters","page":"Configuration","title":"Strategy Parameters","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Pass parameters to strategies through configuration:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"[MyStrategy]\ninclude_file = \"strategies/MyStrategy.jl\"\nmode = \"Paper\"\n\n# Strategy-specific parameters\n[MyStrategy.params]\nrisk_level = 0.02\nmax_positions = 5\nrebalance_frequency = \"daily\"","category":"page"},{"location":"config/#Data-Source-Configuration","page":"Configuration","title":"Data Source Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Configure data fetching and storage:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"[data]\ncache_enabled = true\ncache_duration = \"1h\"\ndefault_timeframe = \"1m\"\nmax_history_days = 365\n\n[data.sources]\nprimary = \"binance\"\nbackup = [\"bybit\", \"kucoin\"]","category":"page"},{"location":"config/#Logging-Configuration","page":"Configuration","title":"Logging Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Control logging levels and output:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"[logging]\nlevel = \"INFO\"  # DEBUG, INFO, WARN, ERROR\nfile_output = true\nconsole_output = true\nlog_directory = \"user/logs\"","category":"page"},{"location":"config/#Environment-Variables","page":"Configuration","title":"Environment Variables","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Some settings can be overridden using environment variables:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"PLANAR_CONFIG_PATH - Path to custom planar.toml file\nPLANAR_SECRETS_PATH - Path to custom secrets.toml file\nPLANAR_LOG_LEVEL - Override logging level\nPLANAR_MODE - Default execution mode","category":"page"},{"location":"config/#Configuration-Validation","page":"Configuration","title":"Configuration Validation","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Planar validates configuration files on startup and provides helpful error messages for common issues:","category":"page"},{"location":"config/#Common-Configuration-Errors","page":"Configuration","title":"Common Configuration Errors","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Missing Strategy Files\nError: Strategy file not found: strategies/MyStrategy.jl\nInvalid Exchange Configuration\nError: Unknown exchange configuration key: 'invalid_option'\nMissing API Credentials\nError: API credentials not found for exchange: binance","category":"page"},{"location":"config/#Validation-Commands","page":"Configuration","title":"Validation Commands","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Test your configuration before running strategies:","category":"page"},{"location":"config/#Configuration-Examples","page":"Configuration","title":"Configuration Examples","text":"","category":"section"},{"location":"config/#Basic-Trading-Setup","page":"Configuration","title":"Basic Trading Setup","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"# Simple strategy configuration\n[MyFirstStrategy]\ninclude_file = \"strategies/MyFirstStrategy.jl\"\nmode = \"Paper\"\n\n# Single exchange setup\n[binance]\nleveraged = \"from\"","category":"page"},{"location":"config/#Advanced-Multi-Strategy-Setup","page":"Configuration","title":"Advanced Multi-Strategy Setup","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"# Multiple strategies\n[TrendFollowing]\ninclude_file = \"strategies/TrendFollowing.jl\"\nmode = \"Live\"\n\n[MeanReversion]\ninclude_file = \"strategies/MeanReversion.jl\"\nmode = \"Paper\"\n\n# Package-based strategies\n[sources]\nArbitrageBot = \"strategies/ArbitrageBot/Project.toml\"\nGridTrader = \"strategies/GridTrader/Project.toml\"\n\n# Multiple exchanges\n[binance]\nleveraged = \"from\"\nprimary = true\n\n[bybit]\nfutures = true\nbackup = true\n\n[kucoin]\nfutures = false\nspot_only = true","category":"page"},{"location":"config/#Troubleshooting-Configuration","page":"Configuration","title":"Troubleshooting Configuration","text":"","category":"section"},{"location":"config/#Common-Issues","page":"Configuration","title":"Common Issues","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Configuration File Not Found\nEnsure user/planar.toml exists in the correct location\nCheck file permissions and accessibility\nInvalid TOML Syntax\nValidate TOML syntax using online validators\nCheck for missing quotes, brackets, or commas\nStrategy Loading Errors\nVerify strategy file paths are correct\nEnsure strategy files contain valid Julia code\nAPI Authentication Failures\nVerify API keys in user/secrets.toml\nCheck API key permissions on exchange\nEnsure IP restrictions allow your connection","category":"page"},{"location":"config/#Getting-Help","page":"Configuration","title":"Getting Help","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"If you encounter configuration issues:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Check the troubleshooting guide\nReview exchange-specific issues\nValidate your configuration syntax\nTest with minimal configuration first","category":"page"},{"location":"config/#See-Also","page":"Configuration","title":"See Also","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Getting Started Guide - Initial setup and installation\nStrategy Development - Creating and configuring strategies\nExchange Integration - Exchange-specific configuration details\nTroubleshooting - Common configuration problems\nAPI Reference - Configuration API documentation","category":"page"},{"location":"API/instruments/#Instruments-API","page":"Instruments","title":"Instruments API","text":"","category":"section"},{"location":"API/instruments/","page":"Instruments","title":"Instruments","text":"The Instruments module provides definitions and management for financial instruments in Planar. It handles different asset types, currency management, and derivative instruments for advanced trading strategies.","category":"page"},{"location":"API/instruments/#Overview","page":"Instruments","title":"Overview","text":"","category":"section"},{"location":"API/instruments/","page":"Instruments","title":"Instruments","text":"The Instruments module includes:","category":"page"},{"location":"API/instruments/","page":"Instruments","title":"Instruments","text":"Base asset types and currency definitions\nCash and currency management\nDerivative instruments (futures, options, etc.)\nAsset validation and conversion utilities\nCompact number formatting for financial data","category":"page"},{"location":"API/instruments/#Core-Asset-Types","page":"Instruments","title":"Core Asset Types","text":"","category":"section"},{"location":"API/instruments/#Base-Asset-Types","page":"Instruments","title":"Base Asset Types","text":"","category":"section"},{"location":"API/instruments/#Asset-Creation-and-Management","page":"Instruments","title":"Asset Creation and Management","text":"","category":"section"},{"location":"API/instruments/#Currency-Operations","page":"Instruments","title":"Currency Operations","text":"","category":"section"},{"location":"API/instruments/#Advanced-Cash-Operations","page":"Instruments","title":"Advanced Cash Operations","text":"","category":"section"},{"location":"API/instruments/#Derivative-Instruments","page":"Instruments","title":"Derivative Instruments","text":"","category":"section"},{"location":"API/instruments/#Derivative-Types","page":"Instruments","title":"Derivative Types","text":"","category":"section"},{"location":"API/instruments/#Working-with-Derivatives","page":"Instruments","title":"Working with Derivatives","text":"","category":"section"},{"location":"API/instruments/#Derivative-Portfolio-Management","page":"Instruments","title":"Derivative Portfolio Management","text":"","category":"section"},{"location":"API/instruments/#Number-Formatting","page":"Instruments","title":"Number Formatting","text":"","category":"section"},{"location":"API/instruments/#Compact-Number-Display","page":"Instruments","title":"Compact Number Display","text":"","category":"section"},{"location":"API/instruments/#Asset-Validation-and-Utilities","page":"Instruments","title":"Asset Validation and Utilities","text":"","category":"section"},{"location":"API/instruments/#Asset-Validation","page":"Instruments","title":"Asset Validation","text":"","category":"section"},{"location":"API/instruments/#Asset-Comparison-and-Sorting","page":"Instruments","title":"Asset Comparison and Sorting","text":"","category":"section"},{"location":"API/instruments/#Integration-with-Strategy-Framework","page":"Instruments","title":"Integration with Strategy Framework","text":"","category":"section"},{"location":"API/instruments/#Asset-Instance-Integration","page":"Instruments","title":"Asset Instance Integration","text":"","category":"section"},{"location":"API/instruments/#Performance-Considerations","page":"Instruments","title":"Performance Considerations","text":"","category":"section"},{"location":"API/instruments/#Efficient-Asset-Operations","page":"Instruments","title":"Efficient Asset Operations","text":"","category":"section"},{"location":"API/instruments/#Complete-API-Reference","page":"Instruments","title":"Complete API Reference","text":"","category":"section"},{"location":"API/instruments/#Instruments.AbstractAsset","page":"Instruments","title":"Instruments.AbstractAsset","text":"Abstract base type for representing an asset.\n\nDefines the interface and common functionality for all asset types.\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.AbstractCash","page":"Instruments","title":"Instruments.AbstractCash","text":"Abstract base type for representing a variable quantity of some currency.\n\nThis type defines the interface and common functionality for all cash types.\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.Asset","page":"Instruments","title":"Instruments.Asset","text":"An Asset represents a parsed raw (usually ccxt) pair of base and quote currency.\n\nraw: The raw underlying string e.g. 'BTC/USDT'\nbc: base currency (Symbol)\nqc: quote currency (Symbol)\nfiat: if both the base and quote currencies match a known fiat symbol e.g. 'USDT/USDC'\nleveraged: if parsing matched a leveraged token e.g. 'ETH3L/USDT' or 'ETH3S/USDT'\nunleveraged_bc: a leveraged token with the mod removed, e.g. ETH3L => ETH\n\n> asset = a\"BTC/USDT\"\n> typeof(asset)\nAsset{:BTC, :USDT}\nend\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.BaseCurrency","page":"Instruments","title":"Instruments.BaseCurrency","text":"A symbol checked to be a valid base currency.\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.Cash","page":"Instruments","title":"Instruments.Cash","text":"A variable quantity of some currency.\n\nvalue\n\n> ca = c\"USDT\"\n> typeof(ca)\n# Instruments.Cash{:USDT}\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.QuoteCurrency","page":"Instruments","title":"Instruments.QuoteCurrency","text":"A symbol checked to be a valid quote currency.\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.Derivatives.Derivative8","page":"Instruments","title":"Instruments.Derivatives.Derivative8","text":"Derivative parsed accordingly to regex.\n\nasset\nsc\nid\nstrike\nkind\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.Derivatives.DerivativeKind","page":"Instruments","title":"Instruments.Derivatives.DerivativeKind","text":"Differentiates between perpetuals and options.\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.Derivatives.SettlementCurrency","page":"Instruments","title":"Instruments.Derivatives.SettlementCurrency","text":"A symbol parsed as settlement currency.\n\n\n\n\n\n","category":"type"},{"location":"API/instruments/#Instruments.addzero!-Tuple{Cash, Any, Vararg{Any}}","page":"Instruments","title":"Instruments.addzero!","text":"Add v to cash, approximating to zero if cash is a small value.\n\naddzero!(c::Cash, v, args...; kwargs...) -> Cash\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.bc-Tuple{AbstractAsset}","page":"Instruments","title":"Instruments.bc","text":"Returns the base currency of a.\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.cash!-Tuple{Cash, Any, Vararg{Any}}","page":"Instruments","title":"Instruments.cash!","text":"Sets the cash object to v.\n\ncash!(c::Cash, v, args...; kwargs...) -> Cash\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.compactnum-Tuple{N} where N<:Number","page":"Instruments","title":"Instruments.compactnum","text":"Compact a numeric value num to a smaller unit if possible.\n\ncompactnum(val::Number) -> Any\n\n\nThe function converts the numeric value to a smaller unit of time if the value is greater than or equal to 1000, and returns the compacted value.\n\nExample:\n\nnum = 5000\nresult = compactnum(num)  # returns 5 since 5000 can be compacted to 5\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.deleverage_pair-Tuple{T} where T<:AbstractString","page":"Instruments","title":"Instruments.deleverage_pair","text":"Remove leveraged pair pre/suffixes from base currency.\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.deleverage_qc-Union{Tuple{Vector{T}}, Tuple{T}} where T<:AbstractString","page":"Instruments","title":"Instruments.deleverage_qc","text":"Remove the leverage component from a CCXT quote currency quote.\n\ndeleverage_qc(pair::Array{T<:AbstractString, 1})\n\n\nThe function returns a new string with the leverage component removed.\n\nExample:\n\nquote = \"3BTC/USDT\"\ndeleveraged_quote = deleverage_qc(quote)  # returns \"USDT\"\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.div!-Tuple{Cash, Any, Vararg{Any}}","page":"Instruments","title":"Instruments.div!","text":"Inplace division for Cash objects.\n\ndiv!(c::Cash, v, args...; kwargs...) -> Cash\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.has_punct-Tuple{AbstractString}","page":"Instruments","title":"Instruments.has_punct","text":"Check if a string s contains any punctuation characters.\n\nhas_punct(s::AbstractString) -> Bool\n\n\nThe function returns true if s contains any punctuation characters, and false otherwise.\n\nExample:\n\ns = \"Hello, world!\"\nresult = has_punct(s)  # returns true since the string contains a punctuation character\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.isfiatpair-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractString","page":"Instruments","title":"Instruments.isfiatpair","text":"Check if both base and quote are fiat currencies.\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.isfiatquote-Tuple{AbstractAsset}","page":"Instruments","title":"Instruments.isfiatquote","text":"Check if quote currency is a stablecoin.\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.isleveragedpair-Tuple{Any}","page":"Instruments","title":"Instruments.isleveragedpair","text":"Test if pair has leveraged naming.\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.mod!-Tuple{Cash, Any, Vararg{Any}}","page":"Instruments","title":"Instruments.mod!","text":"Inplace modulo for Cash objects.\n\nmod!(c::Cash, v, args...; kwargs...) -> Cash\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.mul!-Tuple{Cash, Any, Vararg{Any}}","page":"Instruments","title":"Instruments.mul!","text":"Inplace multiplication for Cash objects.\n\nmul!(c::Cash, v, args...; kwargs...) -> Cash\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.qc-Tuple{AbstractAsset}","page":"Instruments","title":"Instruments.qc","text":"Returns the quote currency of a.\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.raw-Tuple{AbstractAsset}","page":"Instruments","title":"Instruments.raw","text":"Convert an AbstractAsset object a to its raw representation.\n\nraw(a::AbstractAsset) -> Any\n\n\nThe function returns a new AbstractAsset object with special characters escaped using backslashes.\n\nExample:\n\na = parse(\"BTC/USDT\")\nraw(a) # returns \"BTC/USDT\"\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.rdiv!-Tuple{Cash, Any, Vararg{Any}}","page":"Instruments","title":"Instruments.rdiv!","text":"Inplace remaineder division for Cash objects.\n\nrdiv!(c::Cash, v, args...; kwargs...) -> Cash\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.splitpair-Tuple{AbstractString}","page":"Instruments","title":"Instruments.splitpair","text":"Split a CCXT pair (symbol) pair into its base and quote currencies.\n\nsplitpair(\n    pair::AbstractString\n) -> Array{SubString{_A}, 1} where _A\n\n\nThe function returns a tuple containing the base currency and quote currency.\n\nExample: pair = \"BTC/USDT\" base, quote = splitpair(pair)  # returns (\"BTC\", \"USDT\")\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.spotpair-Tuple{AbstractString}","page":"Instruments","title":"Instruments.spotpair","text":"Strips the settlement currency from a symbol.\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.subzero!-Tuple{Instruments.AbstractCash, Any, Vararg{Any}}","page":"Instruments","title":"Instruments.subzero!","text":"Sub v to cash, approximating to zero if cash is a small value.\n\nsubzero!(\n    c::Instruments.AbstractCash,\n    v,\n    args...;\n    kwargs...\n) -> Union{Exchanges.CurrencyCash, Cash}\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.Derivatives.is_settled-Tuple{Instruments.Derivatives.Derivative8}","page":"Instruments","title":"Instruments.Derivatives.is_settled","text":"Predicates according to OctoBot\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.Derivatives.perpetual-Tuple{AbstractString, Any, Any}","page":"Instruments","title":"Instruments.Derivatives.perpetual","text":"Create a Derivative from a raw string representation raw, base currency bc, and quote currency qc.\n\nperpetual(raw::AbstractString, bc, qc) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.Derivatives.sc-Tuple{Instruments.Derivatives.Derivative8}","page":"Instruments","title":"Instruments.Derivatives.sc","text":"Short-circuit the execution of a derivative calculation if the derivative d is zero.\n\nsc(d::Instruments.Derivatives.Derivative8; orqc) -> Symbol\n\n\n\n\n\n\n","category":"method"},{"location":"API/instruments/#Instruments.@a_str-Tuple{Any}","page":"Instruments","title":"Instruments.@a_str","text":"Parses pair to an Asset type. ```julia\n\ntypeof(a\"BTC/USDT\")\n\nInstruments.Asset\n\n\n\n\n\n","category":"macro"},{"location":"API/instruments/#Instruments.@c_str","page":"Instruments","title":"Instruments.@c_str","text":"Macro to instantiate Cash statically.\n\nDon't put spaces between the id and the value.\n\n> ca = c\"USDT\"1000\nUSDT: 1000.0\n\n\n\n\n\n","category":"macro"},{"location":"API/instruments/#Instruments.@importcash!-Tuple{}","page":"Instruments","title":"Instruments.@importcash!","text":"Cash should not be edited by a strategy, therefore functions that mutate its value should be explicitly imported.\n\n\n\n\n\n","category":"macro"},{"location":"API/instruments/#Instruments.@pusdt_str-Tuple{Any}","page":"Instruments","title":"Instruments.@pusdt_str","text":"Rewrites sym as a perpetual usdt symbol.\n\n> pusdt\"btc\"\nBTC/USDT:USDT\n\n\n\n\n\n","category":"macro"},{"location":"API/instruments/#Instruments.ALL_MARKET_SEPARATORS","page":"Instruments","title":"Instruments.ALL_MARKET_SEPARATORS","text":"A collection of all possible separators used in market symbols\n\n\n\n\n\n","category":"constant"},{"location":"API/instruments/#Instruments.DEFAULT_MARKET_SEPARATOR","page":"Instruments","title":"Instruments.DEFAULT_MARKET_SEPARATOR","text":"The default separator used in market symbols\n\n\n\n\n\n","category":"constant"},{"location":"API/instruments/#Instruments.FULL_SYMBOL_GROUPS_REGEX","page":"Instruments","title":"Instruments.FULL_SYMBOL_GROUPS_REGEX","text":"From CCTX\n\n\n\n\n\n","category":"constant"},{"location":"API/instruments/#Instruments.SETTLEMENT_SEPARATOR","page":"Instruments","title":"Instruments.SETTLEMENT_SEPARATOR","text":"The separator used to separate the settlement currency from the quote currency in a market symbol.\n\n\n\n\n\n","category":"constant"},{"location":"API/instruments/#Instruments.fiatnames","page":"Instruments","title":"Instruments.fiatnames","text":"A list of fiat and fiat-like assets names.\n\n\n\n\n\n","category":"constant"},{"location":"API/instruments/#Instruments.fiatsyms","page":"Instruments","title":"Instruments.fiatsyms","text":"A set of symbols representing fiat and fiat-like assets\n\n\n\n\n\n","category":"constant"},{"location":"API/instruments/#Instruments.leverage_pair_rgx","page":"Instruments","title":"Instruments.leverage_pair_rgx","text":"A regular expression pattern used to match leveraged naming conventions in market symbols. It captures the separator used in leveraged pairs.\n\n\n\n\n\n","category":"constant"},{"location":"API/instruments/#Instruments.Derivatives.@d_str-Tuple{Any}","page":"Instruments","title":"Instruments.Derivatives.@d_str","text":"Shortand for parsing derivatives:\n\n> drv = d\"BTC/USDT:USDT\"\n> typeof(drv)\n# Instruments.Derivatives.Derivative{Asset{:BTC, :USDT}}\n\n\n\n\n\n","category":"macro"},{"location":"API/instruments/#See-Also","page":"Instruments","title":"See Also","text":"","category":"section"},{"location":"API/instruments/","page":"Instruments","title":"Instruments","text":"Instances API - Asset instance management\nStrategies API - Strategy base classes and interfaces\nData API - Data structures and management\nStrategy Development Guide - Building trading strategies\nAdvanced Trading Guide - Margin and derivative trading","category":"page"},{"location":"API/strategystats/#StrategyStats","page":"Strategy Stats","title":"StrategyStats","text":"","category":"section"},{"location":"API/strategystats/","page":"Strategy Stats","title":"Strategy Stats","text":"Library for common strategy signals generation.","category":"page"},{"location":"API/strategystats/#StrategyStats.bbands!-Tuple{DataFrames.AbstractDataFrame}","page":"Strategy Stats","title":"StrategyStats.bbands!","text":"Adds Bollinger Bands to a DataFrame.\n\nbbands!(\n    df::DataFrames.AbstractDataFrame;\n    kwargs...\n) -> DataFrames.AbstractDataFrame\n\n\nThe bbands! function takes the following parameters:\n\ndf: an AbstractDataFrame to which the Bollinger Bands will be added.\nkwargs: a variable number of optional keyword arguments that allow you to specify additional parameters for the Bollinger Bands.\n\nThe function calculates the Bollinger Bands for the data in df based on the specified parameters in kwargs. Bollinger Bands are a type of statistical chart characterizing the prices and volatility over time of a financial instrument or commodity, using a formulaic method propounded by John Bollinger in the 1980s. The function modifies the input DataFrame df in place by adding the calculated Bollinger Bands.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.diffn-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Strategy Stats","title":"StrategyStats.diffn","text":"diffn(x::Vector{T}; n::Int=1)::Vector{T} where {T<:Real}\ndiffn(X::Matrix; n::Int=1)::Matrix = hcat([diffn(X[:,j], n=n) for j in 1:size(X,2)]...)\n\nLagged differencing\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.down_successrate-Tuple{Any, Union{String, Symbol}}","page":"Strategy Stats","title":"StrategyStats.down_successrate","text":"Complement of up_successrate.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.filterminmax-Tuple{Function, AbstractDict, Real, Real}","page":"Strategy Stats","title":"StrategyStats.filterminmax","text":"Filters and sorts a list of pairs using a predicate function.\n\nfilterminmax(\n    pred::Function,\n    pairs::AbstractDict,\n    min_v::Real,\n    max_v::Real\n) -> Vector{Tuple{AbstractFloat, Data.PairData}}\n\n\nThis function takes a list of pairs and a predicate function. It filters the list by applying the predicate function to each pair and keeping only those pairs for which the function returns a Real number. The function then sorts the filtered list based on the returned Real numbers.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.find_bottomed-Tuple{AbstractDict{String, Data.PairData}}","page":"Strategy Stats","title":"StrategyStats.find_bottomed","text":"See find_bottomed.\n\nfind_bottomed(\n    pairs::AbstractDict{String, Data.PairData};\n    kwargs...\n) -> Dict{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.find_bottomed-Tuple{AbstractVector{Data.PairData}}","page":"Strategy Stats","title":"StrategyStats.find_bottomed","text":"Finds pairs that have bottomed out in the given data for long positions.\n\nfind_bottomed(\n    pairs::AbstractVector{Data.PairData};\n    bb_thresh,\n    up_thresh,\n    n,\n    mn,\n    mx\n) -> Dict{Any, Any}\n\n\nThe find_bottomed function takes the following parameters:\n\npairs: an AbstractVector of PairData objects that represent pair data.\nbb_thresh (optional, default is 0.05): a threshold value which the Bollinger Bands value must exceed to be considered a bottom.\nup_thresh (optional, default is 0.05): a threshold value which the price change must exceed to be considered an uptrend.\nn (optional, default is 12): an integer that represents the number of periods to consider for the bottom and uptrend detection.\nmn (optional, default is 1.0): a minimum value for the price to be considered a bottom.\nmx (optional, default is 90.0): a maximum value for the price to be considered a bottom.\n\nThe function scans through the pairs in the pairs vector and determines which pairs have bottomed out based on the specified criteria.\n\nThe function returns a list of pairs that have bottomed out for long positions.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.find_peaked-Tuple{AbstractDict{String, Data.PairData}}","page":"Strategy Stats","title":"StrategyStats.find_peaked","text":"See find_peaked.\n\nfind_peaked(\n    pairs::AbstractDict{String, Data.PairData};\n    kwargs...\n) -> Dict{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.find_peaked-Tuple{AbstractVector{Data.PairData}}","page":"Strategy Stats","title":"StrategyStats.find_peaked","text":"Complementary to find_bottomed.\n\nfind_peaked(\n    pairs::AbstractVector{Data.PairData};\n    bb_thresh,\n    up_thresh,\n    n,\n    mn,\n    mx\n) -> Dict{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.fltsummary-Tuple{AbstractVector{Tuple{AbstractFloat, Data.PairData}}}","page":"Strategy Stats","title":"StrategyStats.fltsummary","text":"Generates a summary of a vector of tuples containing Floats and PairData.\n\nfltsummary(\n    flt::AbstractVector{Tuple{AbstractFloat, Data.PairData}}\n) -> Any\n\n\nThis function takes a vector flt of tuples, where each tuple contains an AbstractFloat and a PairData. It generates a summary of flt, providing insights into the characteristics of the Floats and PairData in the vector.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.gridbbands-Tuple{DataFrames.AbstractDataFrame}","page":"Strategy Stats","title":"StrategyStats.gridbbands","text":"Generates a grid of Bollinger Bands with varying parameters.\n\ngridbbands(\n    df::DataFrames.AbstractDataFrame;\n    n_range,\n    sigma_range,\n    corr\n) -> Tuple{Dict{Any, Any}, DataFrames.DataFrame}\n\n\nThe gridbbands function takes the following parameters:\n\ndf: an AbstractDataFrame that represents historical market data.\nn_range (optional, default is 2:2:100): a range that represents the range of possible values for the number of periods to calculate the moving average over.\nsigma_range (optional, default is [1.0]): an array that represents the range of possible values for the number of standard deviations to calculate the bands at.\ncorr (optional, default is :corke): a symbol that represents the correlation method to use.\n\nThe function generates a grid of Bollinger Bands based on the input DataFrame df and the specified parameters. Each band in the grid uses a different combination of n_range and sigma_range.\n\nThe function returns a DataFrame that represents the grid of Bollinger Bands.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.gridrenko-Tuple{AbstractDict}","page":"Strategy Stats","title":"StrategyStats.gridrenko","text":"gridrenko over a dict of PairData.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.gridrenko-Tuple{DataFrames.AbstractDataFrame}","page":"Strategy Stats","title":"StrategyStats.gridrenko","text":"Generates a grid of Renko charts with varying parameters.\n\ngridrenko(\n    data::DataFrames.AbstractDataFrame;\n    head_range,\n    tail_range,\n    n_range\n) -> Vector{Any}\n\n\nThe gridrenko function takes the following parameters:\n\ndata: an AbstractDataFrame that represents historical market data.\nhead_range (optional, default is 1:10): a range that represents the range of possible values for the head in the Renko chart. The head is the most recent part of the chart.\ntail_range (optional, default is 1:3): a range that represents the range of possible values for the tail in the Renko chart. The tail is the oldest part of the chart.\nn_range (optional, default is 10:10:200): a range that represents the range of possible values for the number of periods to calculate the Average True Range (ATR) over.\n\nThe function generates a grid of Renko charts based on the input DataFrame data and the specified parameters. Each chart in the grid uses a different combination of head_range, tail_range, and n_range. The function returns a DataFrame that represents the grid of Renko charts.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.is_bottomed-Tuple{DataFrames.DataFrame}","page":"Strategy Stats","title":"StrategyStats.is_bottomed","text":"Determines if a bottom has occurred in the OHLCV data.\n\nis_bottomed(ohlcv::DataFrames.DataFrame; thresh, n) -> Bool\n\n\nThe is_bottomed function takes the following parameters:\n\nohlcv: a DataFrame that represents OHLCV (Open, High, Low, Close, Volume) data.\nthresh (optional, default is 0.05): a threshold value which the price change must exceed to be considered a bottom.\nn (optional, default is 26): an integer that represents the number of periods to consider for the bottom detection.\n\nThe function determines if a bottom has occurred in the OHLCV data based on the specified threshold and number of periods. A bottom is considered to have occurred when the price change exceeds the threshold within the given number of periods. The function returns a boolean that indicates whether a bottom has occurred.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.is_peaked-Tuple{DataFrames.DataFrame}","page":"Strategy Stats","title":"StrategyStats.is_peaked","text":"Determines if a peak has occurred in the OHLCV data.\n\nis_peaked(ohlcv::DataFrames.DataFrame; thresh, n) -> Bool\n\n\nThe is_peaked function takes the following parameters:\n\nohlcv: a DataFrame that represents OHLCV (Open, High, Low, Close, Volume) data.\nthresh (optional, default is 0.05): a threshold value which the price change must exceed to be considered a peak.\nn (optional, default is 26): an integer that represents the number of periods to consider for the peak detection.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.is_slopebetween-Tuple{DataFrames.DataFrame}","page":"Strategy Stats","title":"StrategyStats.is_slopebetween","text":"Checks if slope of a DataFrame is within certain bounds.\n\nis_slopebetween(\n    ohlcv::DataFrames.DataFrame;\n    mn,\n    mx,\n    n\n) -> Any\n\n\nThis function takes a DataFrame ohlcv and optionally three integers mn (default is 5), mx (default is 90), and n (default is 26). It checks if the slope of a linear regression line fit to the last n data points in ohlcv is between mn and mx.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.is_uptrend-Tuple{DataFrames.DataFrame}","page":"Strategy Stats","title":"StrategyStats.is_uptrend","text":"Determines if an uptrend has occurred in the OHLCV data.\n\nis_uptrend(ohlcv::DataFrames.DataFrame; thresh, n) -> Any\n\n\nThe is_uptrend function takes the following parameters:\n\nohlcv: a DataFrame that represents OHLCV (Open, High, Low, Close, Volume) data.\nthresh (optional, default is 0.05): a threshold value which the price change must exceed to be considered an uptrend.\nn (optional, default is 26): an integer that represents the number of periods to consider for the uptrend detection.\n\nThe function determines if an uptrend has occurred in the OHLCV data based on the specified threshold and number of periods. An uptrend is considered to have occurred when the price change exceeds the threshold within the given number of periods.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.isrenkoentry-Tuple{AbstractDict}","page":"Strategy Stats","title":"StrategyStats.isrenkoentry","text":"Determines if the current state in a Renko chart indicates an entry point.\n\nisrenkoentry(data::AbstractDict; kwargs...) -> Vector{Bool}\n\n\nThe isrenkoentry function takes the following parameters:\n\ndata: an AbstractDict that represents the current state in a Renko chart.\nkwargs: a variable number of optional keyword arguments that allow you to specify additional criteria for an entry point.\n\nThe function determines if the current state in the Renko chart represented by data indicates an entry point based on the specified criteria. An entry point in a Renko chart is typically determined by a change in the direction of the bricks (or boxes).\n\nThe function returns a boolean that indicates whether the current state represents an entry point.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.isrenkoentry-Tuple{DataFrames.AbstractDataFrame}","page":"Strategy Stats","title":"StrategyStats.isrenkoentry","text":"A good renko entry is determined by X candles of the opposite color after Y candles.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.maxmin-Tuple{Any}","page":"Strategy Stats","title":"StrategyStats.maxmin","text":"Identifies maximum and minimum points in a DataFrame.\n\nmaxmin(df; order, threshold, window) -> Any\n\n\nThe maxmin function takes the following parameters:\n\ndf: a DataFrame in which to identify maxima and minima.\norder (optional, default is 1): an integer specifying how many points on each side of a point to use for the comparison to consider the point as a maximum or minimum. For example, if order=3, a point will be considered a maximum if it has three datapoints in either direction that are smaller than it.\nthreshold (optional, default is 0.0): a threshold value which the datapoint must exceed to be considered a maximum or minimum.\nwindow (optional, default is 100): a window size to apply a moving maximum/minimum filter.\n\nThe function identifies maximum and minimum points in the DataFrame df based on the specified order, threshold, and window. It then returns a DataFrame with the identified maxima and minima.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.renkodf-Tuple{Any}","page":"Strategy Stats","title":"StrategyStats.renkodf","text":"Generates a Renko chart DataFrame.\n\nrenkodf(df; box_size, use_atr, n) -> Any\n\n\nThe renkodf function takes the following parameters:\n\ndf: a DataFrame that represents historical market data.\nbox_size (optional, default is 10.0): a float that represents the box size for the Renko chart. This is the minimum price change required to form a new brick in the chart.\nuse_atr (optional, default is false): a boolean that indicates whether to use the Average True Range (ATR) to determine the box size. If true, the function will calculate the ATR over n periods and use this as the box size.\nn (optional, default is 14): an integer that represents the number of periods to calculate the ATR over if use_atr is true.\n\nThe function generates a Renko chart DataFrame based on the input DataFrame df and the specified parameters. Renko charts are price charts with rising and falling bricks (or boxes) that are based on changes in price, not time, unlike most charts. They help filter out market noise and can be a useful tool in technical analysis. The function returns a DataFrame that represents the Renko chart.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.slopeangle-Tuple{Any}","page":"Strategy Stats","title":"StrategyStats.slopeangle","text":"Calculates the slope angle for a given array.\n\nslopeangle(arr; n) -> Any\n\n\nThis function takes an array arr and optionally an integer n (default is 10). It calculates the slope angle of a linear regression line fit to the last n data points in arr.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.slopefilter","page":"Strategy Stats","title":"StrategyStats.slopefilter","text":"Applies a slope filter to a dataset.\n\nslopefilter(\n;\n    ...\n) -> Vector{Tuple{AbstractFloat, Data.PairData}}\nslopefilter(\n    timeframe;\n    qc,\n    minv,\n    maxv,\n    window\n) -> Vector{Tuple{AbstractFloat, Data.PairData}}\n\n\nThis function applies a slope filter to a dataset. It checks whether the slope of a linear regression line fit to the data meets certain criteria, and retains only those data points that pass the filter.\n\n\n\n\n\n","category":"function"},{"location":"API/strategystats/#StrategyStats.slopefilter-Tuple{AbstractDict}","page":"Strategy Stats","title":"StrategyStats.slopefilter","text":"slopefilter over a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.supres-Tuple{Any}","page":"Strategy Stats","title":"StrategyStats.supres","text":"Identifies support and resistance levels in a DataFrame.\n\nsupres(df; order, threshold, window) -> Any\n\n\nThe supres function takes the following parameters:\n\ndf: a DataFrame in which to identify support and resistance levels.\norder (optional, default is 1): an integer specifying how many points on each side of a point to use for the comparison to consider the point as a support or resistance level. For example, if order=3, a point will be considered a support/resistance level if it has three datapoints in either direction that are smaller/larger than it.\nthreshold (optional, default is 0.0): a threshold value which the datapoint must exceed to be considered a support or resistance level.\nwindow (optional, default is 16): a window size to apply a moving maximum/minimum filter.\n\nThe function identifies support and resistance levels in the DataFrame df based on the specified order, threshold, and window. It then returns a DataFrame with the identified support and resistance levels.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#StrategyStats.up_successrate-Tuple{Any, Union{String, Symbol}}","page":"Strategy Stats","title":"StrategyStats.up_successrate","text":"Calculates the success rate of given column against the next candle.\n\nup_successrate(\n    df,\n    bcol::Union{String, Symbol};\n    threshold\n) -> Any\n\n\nThe up_successrate function takes the following parameters:\n\ndf: a DataFrame that represents historical market data.\nbcol: a Symbol or String that represents the column name in df to calculate the success rate against.\nthreshold (optional, default is 0.05): a threshold value which the price change must exceed to be considered a success.\n\nThe function calculates the success rate of a particular strategy indicated by bcol for buying or selling. A trade is considered successful if the price change in the next candle exceeds the threshold. The direction of the trade (buy or sell) is determined by the bcol column: true for buy and false for sell.\n\nThe function returns a float that represents the success rate of the strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/strategystats/#See-Also","page":"Strategy Stats","title":"See Also","text":"","category":"section"},{"location":"API/strategystats/","page":"Strategy Stats","title":"Strategy Stats","text":"Strategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"getting-started/#Getting-Started-with-Planar","page":"Overview","title":"Getting Started with Planar","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Welcome to Planar! This section will help you get up and running quickly with the Planar trading framework. Whether you're new to algorithmic trading or experienced with other platforms, these guides will help you understand Planar's unique approach and get your first strategy running.","category":"page"},{"location":"getting-started/#Learning-Objectives","page":"Overview","title":"Learning Objectives","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"By completing this getting started section, you will:","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Understand Planar's core concepts and unique advantages\nSuccessfully install and configure Planar on your system\nRun your first backtest and interpret the results\nBuild a custom strategy from scratch using technical indicators-development.md#technical-indicators)\nAnalyze performance metrics and debug strategy issues\nKnow the next steps for advanced strategy development","category":"page"},{"location":"getting-started/#Section-Overview","page":"Overview","title":"Section Overview","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"This getting started section is organized in a logical progression:","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Installation Guide - Set up your development environment (10 minutes)\nQuick Start Guide - Run your first strategy and see results (15 minutes)\nFirst Strategy Tutorial - Build a custom RSI strategy from scratch (20 minutes)","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Total estimated time: 45 minutes","category":"page"},{"location":"getting-started/#Why-Planar?","page":"Overview","title":"Why Planar?","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Planar is an advanced trading bot framework built in Julia, designed for demanding practitioners who need sophisticated cryptocurrency trading capabilities. Here's what makes it special:","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Customizable: Julia's dispatch mechanism enables easy customization without monkey patching\nMargin/Leverage Support: Full type hierarchy for isolated and cross margin trading with hedged/unhedged positions\nLarge Dataset Handling: Uses Zarr.jl for progressive chunk-by-chunk data access and storage\nData Consistency: Ensures OHLCV data integrity with contiguous date checking\nLookahead Bias Prevention: Full-featured date/timeframe handling to prevent common backtesting errors\nBy-Simulation: Unique ability to run simulation during live trading for tuning and validation\nLow Code Duplication: Same strategy code works across backtesting, paper, and live trading modes","category":"page"},{"location":"getting-started/#Prerequisites","page":"Overview","title":"Prerequisites","text":"","category":"section"},{"location":"getting-started/#Required-Knowledge","page":"Overview","title":"Required Knowledge","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Basic trading concepts: Understanding of OHLCV data, buy/sell orders, and cryptocurrency exchanges\nCommand line comfort: Ability to run commands in terminal/command prompt\nBasic programming concepts: Variables, functions, and modules (Julia experience helpful but not required)","category":"page"},{"location":"getting-started/#System-Requirements","page":"Overview","title":"System Requirements","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Operating System: Linux, macOS, or Windows\nMemory: 4GB RAM minimum, 8GB recommended for smooth operation\nStorage: 2GB free space for installation, additional space for historical data\nNetwork: Stable internet connection for data downloads","category":"page"},{"location":"getting-started/#Optional-for-Getting-Started","page":"Overview","title":"Optional for Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Julia 1.11+ (we'll install this together in the installation guide)\nCryptocurrency exchange) account (only needed for live trading, not for learning)","category":"page"},{"location":"getting-started/#Recommended-Learning-Paths","page":"Overview","title":"Recommended Learning Paths","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Choose the path that best matches your experience level:","category":"page"},{"location":"getting-started/#Complete-Beginner-Path","page":"Overview","title":"🆕 Complete Beginner Path","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Best for: New to algorithmic trading or Planar   Time: 45 minutes | Difficulty: ⭐☆☆","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"📥 Installation Guide (10 min) - Set up your environment\n⚡ Quick Start (15 min) - Run your first backtest  \n🎯 First Strategy (20 min) - Build from scratch","category":"page"},{"location":"getting-started/#Experienced-Trader-Path","page":"Overview","title":"🚀 Experienced Trader Path","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Best for: Know trading, new to Planar   Time: 25 minutes | Difficulty: ⭐⭐☆","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"⚡ Quick Start (15 min) - See Planar in action\n🎯 First Strategy (10 min) - Focus on architecture\n🏗️ Strategy Development - Jump to advanced concepts","category":"page"},{"location":"getting-started/#Developer/Programmer-Path","page":"Overview","title":"💻 Developer/Programmer Path","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Best for: Comfortable with Julia or similar languages   Time: 15 minutes | Difficulty: ⭐⭐⭐","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"📥 Installation (5 min) - Quick setup\n🎯 First Strategy (10 min) - Understand the patterns\n📚 API Reference - Dive into the details","category":"page"},{"location":"getting-started/#Getting-Help","page":"Overview","title":"Getting Help","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"If you run into issues:","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Check the Troubleshooting Guide) for common problems\nReview the API Documentation for detailed function references\nVisit our Contacts page for community resources","category":"page"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Let's get started! 🚀","category":"page"},{"location":"getting-started/#After-Getting-Started","page":"Overview","title":"After Getting Started","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Once you complete this section, you'll be ready to:","category":"page"},{"location":"getting-started/#Immediate-Next-Steps","page":"Overview","title":"Immediate Next Steps","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Strategy Development Guide - Learn advanced patterns and best practices\nData Management - Understand Planar's powerful data system  \nExecution Modes - Progress from simulation to live trading","category":"page"},{"location":"getting-started/#Advanced-Topics","page":"Overview","title":"Advanced Topics","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Parameter Optimization) - Systematically improve your strategies\nMulti-Exchange Trading).md) - Scale across multiple exchanges\nCustom Indicators - Build your own technical analysis tools","category":"page"},{"location":"getting-started/#Related-Topics","page":"Overview","title":"Related Topics","text":"","category":"section"},{"location":"getting-started/","page":"Overview","title":"Overview","text":"Data Management - Understanding Planar's data system\nExecution Modes - Sim, Paper, and Live trading modes\nCustomization - Extending Planar's functionality","category":"page"},{"location":"customizations/orders/#Custom-Orders","page":"Custom Orders","title":"Custom Orders","text":"","category":"section"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"This section demonstrates how to implement an OCO (One-Cancels-the-Other) order type for simulation purposes:","category":"page"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"We can base our implementation on the existing constructor for limit orders and modify it to meet the requirements of an OCO order:","category":"page"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"Next, we introduce two call! functions to handle creating and updating simulated OCO orders:","category":"page"},{"location":"customizations/orders/#Custom-Instruments","page":"Custom Orders","title":"Custom Instruments","text":"","category":"section"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"We can extend instruments to create new types such as Asset and Derivative, which are subtypes of AbstractAsset. They are named using the CCXT convention (QUOTE/BASE:SETTLE), and it's expected that all instruments define a base and a quote currency.","category":"page"},{"location":"customizations/orders/#See-Also","page":"Custom Orders","title":"See Also","text":"","category":"section"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nStrategy Development - Guide: Strategy development and implementation\nOptimization - Strategy development and implementation","category":"page"},{"location":"customizations/orders/#Instances-and-Exchanges","page":"Custom Orders","title":"Instances and Exchanges","text":"","category":"section"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"Asset instances are parameterized by the type of the asset (e.g., asset, derivative) and the exchange they are associated with. By using ExchangeID as a parameter, we can fine-tune the behavior for specific exchanges.","category":"page"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"For example, if we want to handle OCO orders differently across exchanges in live mode, we can define call! functions that are specialized based on the exchange parameter of the asset instance.","category":"page"},{"location":"customizations/orders/","page":"Custom Orders","title":"Custom Orders","text":"The function above is designed to handle asset instances that are specifically tied to the bybit exchange.","category":"page"},{"location":"guides/data-management/#Data-Management-Guide","page":"Data Management Guide","title":"Data Management Guide","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"This comprehensive guide covers Planar's data management system for OHLCV (Open, High, Low, Close, Volume) data and other time-series market data. Learn how to efficiently collect, store, and access market data using multiple collection methods and storage backends.","category":"page"},{"location":"guides/data-management/#Quick-Navigation","page":"Data Management Guide","title":"Quick Navigation","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Storage Architecture - Understanding Zarr and LMDB backends\nData Collection Methods - Overview of collection approaches\nHistorical Data - Using Scrapers for bulk data collection\nReal-Time Data - Fetching live data from exchanges\nLive Streaming - Continuous data monitoring with Watchers\nCustom Data Sources - Integrating your own data\nData Access Patterns - Efficient data querying and indexing\noptimization - Caching and optimization strategies\ntroubleshooting - Common issues and solutions","category":"page"},{"location":"guides/data-management/#Prerequisites","page":"Data Management Guide","title":"Prerequisites","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Basic understanding of OHLCV data concepts\nFamiliarity with exchanges","category":"page"},{"location":"guides/data-management/#Related-Topics","page":"Data Management Guide","title":"Related Topics","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Strategy Development) - Using data in trading strategies\nWatchers - Real-time data monitoring\nProcessing - Data transformation and analysis","category":"page"},{"location":"guides/data-management/#Storage-Architecture","page":"Data Management Guide","title":"Storage Architecture","text":"","category":"section"},{"location":"guides/data-management/#Zarr-Backend","page":"Data Management Guide","title":"Zarr Backend","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Planar uses Zarr as its primary storage backend, which offers several advantages for time-series data:","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Columnar Storage: Optimized for array-based data, similar to Feather or Parquet\nFlexible Encoding: Supports different compression and encoding schemes\nStorage Agnostic: Can be backed by various storage layers, including network-based systems\nChunked Access: Efficient for time-series queries despite chunk-based reading\nScalability: Handles large datasets with progressive loading capabilities","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"The framework wraps a Zarr subtype of AbstractStore in a Planar.Data.ZarrInstance. The global ZarrInstance is accessible at Data.zi[], with LMDB as the default underlying store.","category":"page"},{"location":"guides/data-management/#Data-Organization","page":"Data Management Guide","title":"Data Organization","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"OHLCV data is organized hierarchically using Planar.Data.key_path:","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"ZarrInstance/\n├── exchange_name/\n│   ├── pair_name/\n│   │   ├── [timeframe](../guides/data-management.md#timeframes)/\n│   │   │   ├── timestamp\n│   │   │   ├── open\n│   │   │   ├── high\n│   │   │   ├── low\n│   │   │   ├── close\n│   │   │   └── volume\n│   │   └── ...\n│   └── ...\n└── ...","category":"page"},{"location":"guides/data-management/#Storage-Hierarchy-Benefits","page":"Data Management Guide","title":"Storage Hierarchy Benefits","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"This hierarchical organization provides:","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Logical Grouping: Data organized by source, instrument, and timeframe\nEfficient Queries: Fast access to specific data subsets\nScalability: Easy addition of new exchanges, pairs, and timeframes\nData Integrity: Consistent structure across all data sources\nPerformance: Optimized for common access patterns","category":"page"},{"location":"guides/data-management/#Data-Collection-Methods","page":"Data Management Guide","title":"Data Collection Methods","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Planar provides multiple methods for collecting market data, each optimized for different use cases:","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Method Use Case Speed Data Range Rate Limits\nScrapers Historical bulk data Fast Months/Years None\nFetch Recent data, gap filling Medium Days/Weeks High\nWatchers Real-time streaming Real-time Live only Low","category":"page"},{"location":"guides/data-management/#Choosing-the-Right-Method","page":"Data Management Guide","title":"Choosing the Right Method","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Use Scrapers for initial historical data collection and backtesting datasets\nUse Fetch for recent data updates and filling gaps in historical data\nUse Watchers for live trading and real-time analysis","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"⚠️ Data collection issues? See Performance Issues: Data-Related for slow loading and database problems, or Exchange Issues for connectivity problems.","category":"page"},{"location":"guides/data-management/#","page":"Data Management Guide","title":"","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Historical Data Collection","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"The Scrapers module provides access to historical data archives from major exchanges, offering the most efficient method for obtaining large amounts of historical data.","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Supported Exchanges: Binance and Bybit archives","category":"page"},{"location":"guides/data-management/#Basic-Scraper-Usage","page":"Data Management Guide","title":"Basic Scraper Usage","text":"","category":"section"},{"location":"guides/data-management/#Market-Types-and-Frequencies","page":"Data Management Guide","title":"Market Types and Frequencies","text":"","category":"section"},{"location":"guides/data-management/#Advanced-Scraper-Examples","page":"Data Management Guide","title":"Advanced Scraper Examples","text":"","category":"section"},{"location":"guides/data-management/#Error-Handling-and-Data-Validation","page":"Data Management Guide","title":"Error Handling and Data Validation","text":"","category":"section"},{"location":"guides/data-management/#Bybit-Scrapers","page":"Data Management Guide","title":"Bybit Scrapers","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"warning: Download Caching\nDownloads are cached - requesting the same pair path again will only download newer archives. If data becomes corrupted, pass reset=true to force a complete redownload.","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"tip: Performance Optimization\nMonthly Archives: Use for historical backtesting (faster download, larger chunks)\nDaily Archives: Use for recent data or frequent updates\nParallel Downloads: Consider for multiple symbols, but respect exchange rate limits","category":"page"},{"location":"guides/data-management/#Real-Time-Data-Fetching","page":"Data Management Guide","title":"Real-Time Data Fetching","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"The Fetch module downloads data directly from exchanges using CCXT, making it ideal for:","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Getting the most recent market data\nFilling gaps in historical data\nReal-time data updates for live trading","category":"page"},{"location":"guides/data-management/#Basic-Fetch-Usage","page":"Data Management Guide","title":"Basic Fetch Usage","text":"","category":"section"},{"location":"guides/data-management/#Advanced-Fetch-Examples","page":"Data Management Guide","title":"Advanced Fetch Examples","text":"","category":"section"},{"location":"guides/data-management/#Multi-Exchange-Data-Collection","page":"Data Management Guide","title":"Multi-Exchange Data Collection","text":"","category":"section"},{"location":"guides/data-management/#Rate-Limit-Management","page":"Data Management Guide","title":"Rate Limit Management","text":"","category":"section"},{"location":"guides/data-management/#Data-Validation-and-Quality-Checks","page":"Data Management Guide","title":"Data Validation and Quality Checks","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"warning: Rate Limit Considerations\nDirect exchange fetching is heavily rate-limited, especially for smaller timeframes. Use archives for bulk historical data collection.","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"tip: Fetch Best Practices\nRecent Updates: Use fetch for recent data updates and gap filling\nRate Limiting: Implement delays between requests to respect exchange limits\nData Validation: Always validate fetched data before using in strategies\nRaw Data: Use fetch_candles for unchecked data when you need raw exchange responses## L","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"ive Data Streaming","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"The Watchers module enables real-time data tracking from exchanges and other sources, storing data locally for:","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Live trading operations\nReal-time data analysis\nContinuous market monitoring","category":"page"},{"location":"guides/data-management/#[OHLCV](../guides/data-management.md#ohlcv-data)-Ticker-Watcher","page":"Data Management Guide","title":"OHLCV Ticker Watcher","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"The ticker watcher monitors multiple pairs simultaneously using exchange ticker endpoints:","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n    \n    # Example watcher output (this would be the result of displaying a watcher)\n    println(\"Example watcher display:\")\n    println(\"17-element Watchers.Watcher20{Dict{String, NamedTup...Nothing, Float64}, Vararg{Float64, 7}}}}\")\n    println(\"Name: ccxt_ohlcv_ticker\")\n    println(\"Intervals: 5 seconds(TO), 5 seconds(FE), 6 minutes(FL)\")\n    println(\"Fetched: 2023-03-07T12:06:18.690 busy: true\")\n    println(\"Flushed: 2023-03-07T12:04:31.472\")\n    println(\"Active: true\")\n    println(\"Attempts: 0\")\n    \n    # Note: In real usage, 'w' would be an actual watcher instance\n    # w = create_watcher(...)  # This would create the actual watcher\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"As a convention, the view property of a watcher shows the processed data:","category":"page"},{"location":"guides/data-management/#Single-Pair-OHLCV-Watcher","page":"Data Management Guide","title":"Single-Pair OHLCV Watcher","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"There is another OHLCV watcher based on trades, that tracks only one pair at a time with higher precision:","category":"page"},{"location":"guides/data-management/#Advanced-Watcher-Configuration","page":"Data Management Guide","title":"Advanced Watcher Configuration","text":"","category":"section"},{"location":"guides/data-management/#Watcher-Management","page":"Data Management Guide","title":"Watcher Management","text":"","category":"section"},{"location":"guides/data-management/#Orderbook-Watcher","page":"Data Management Guide","title":"Orderbook Watcher","text":"","category":"section"},{"location":"guides/data-management/#Custom-Data-Processing","page":"Data Management Guide","title":"Custom Data Processing","text":"","category":"section"},{"location":"guides/data-management/#Error-Handling-and-Resilience","page":"Data Management Guide","title":"Error Handling and Resilience","text":"","category":"section"},{"location":"guides/data-management/#Data-Persistence-and-Storage","page":"Data Management Guide","title":"Data Persistence and Storage","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"tip: Watcher Best Practices\nMonitor watcher health regularly with wc.isrunning()\nImplement proper error handling and reconnection logic\nSave data periodically to prevent loss during interruptions\nUse appropriate fetch intervals to balance data freshness with rate limits\nConsider using multiple watchers for redundancy in critical applications","category":"page"},{"location":"guides/data-management/#Custom-Data-Sources","page":"Data Management Guide","title":"Custom Data Sources","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Assuming you have your own pipeline to fetch candles, you can use the functions Planar.Data.save_ohlcv and Planar.Data.load_ohlcv to manage the data.","category":"page"},{"location":"guides/data-management/#Basic-Custom-Data-Integration","page":"Data Management Guide","title":"Basic Custom Data Integration","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"To save the data, it is easier if you pass a standard OHLCV dataframe, otherwise you need to provide a saved_col argument that indicates the correct column index to use as the timestamp column (or use lower-level functions).","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"To load the data back:","category":"page"},{"location":"guides/data-management/#Advanced-Custom-Data-Examples","page":"Data Management Guide","title":"Advanced Custom Data Examples","text":"","category":"section"},{"location":"guides/data-management/#Custom-Data-Validation","page":"Data Management Guide","title":"Custom Data Validation","text":"","category":"section"},{"location":"guides/data-management/#Working-with-Large-Custom-Datasets","page":"Data Management Guide","title":"Working with Large Custom Datasets","text":"","category":"section"},{"location":"guides/data-management/#Generic-Data-Storage","page":"Data Management Guide","title":"Generic Data Storage","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"If you want to save other kinds of data, there are the Planar.Data.save_data and Planar.Data.load_data functions. Unlike the ohlcv functions, these functions don't check for contiguity, so it is possible to store sparse data. The data, however, still requires a timestamp column, because data when saved can either be prepend or appended, therefore an index must still be available to maintain order.","category":"page"},{"location":"guides/data-management/#Serialized-Data-Storage","page":"Data Management Guide","title":"Serialized Data Storage","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"While OHLCV data requires a concrete type for storage (default Float64) generic data can either be saved with a shared type, or instead serialized. To serialize the data while saving pass the serialize=true argument to save_data, while to load serialized data pass serialized=true to load_data.","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"warning: Data Contiguity\nOHLCV save/load functions validate timestamp contiguity by default. Use check=:none to disable validation for irregular data.","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"tip: Performance Optimization\nUse progressive loading (raw=true) for large datasets to avoid memory issues\nProcess data in chunks when dealing with very large time series\nConsider serialization for complex data structures that don't fit standard numeric types","category":"page"},{"location":"guides/data-management/#Data-Access-Patterns","page":"Data Management Guide","title":"Data Access Patterns","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"The Data module implements dataframe indexing by dates such that you can conveniently access rows by:","category":"page"},{"location":"guides/data-management/#Advanced-Indexing-Examples","page":"Data Management Guide","title":"Advanced Indexing Examples","text":"","category":"section"},{"location":"guides/data-management/#Timeframe-Management","page":"Data Management Guide","title":"Timeframe Management","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"With ohlcv data, we can access the timeframe of the series directly from the dataframe by calling timeframe!(df). This will either return the previously set timeframe or infer it from the timestamp column. You can set the timeframe by calling e.g. timeframe!(df, tf\"1m\") or timeframe!! to overwrite it.","category":"page"},{"location":"guides/data-management/#Efficient-Data-Slicing","page":"Data Management Guide","title":"Efficient Data Slicing","text":"","category":"section"},{"location":"guides/data-management/#Progressive-Data-Loading","page":"Data Management Guide","title":"Progressive Data Loading","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"When loading data from storage, you can directly use the ZArray by passing raw=true to load_ohlcv or as_z=true or with_z=true to load_data. By managing the array directly you can avoid materializing the entire dataset, which is required when dealing with large amounts of data.","category":"page"},{"location":"guides/data-management/#Data-Aggregation-and-Resampling","page":"Data Management Guide","title":"Data Aggregation and Resampling","text":"","category":"section"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    using DataFrames\n    @environment!\n    \n    # Aggregate data to different timeframes\n    function resample_ohlcv(data, target_timeframe)\n        # Group by target timeframe periods\n        data.period = floor.(data.timestamp, target_timeframe)\n        \n        aggregated = combine(groupby(data, :period)) do group\n            (\n                timestamp = first(group.timestamp),\n                open = first(group.open),\n                high = maximum(group.high),\n                low = minimum(group.low),\n                close = last(group.close),\n                volume = sum(group.volume)\n            )\n        end\n        \n        select!(aggregated, Not(:period))\n        return aggregated\n    end\n    \n    println(\"Data resampling function defined\")\n    \ncatch e\n    @warn \"Planar or DataFrames not available: $e\"\nend\n\n# Example: Convert 1m data to 5m\nminute_data = Data.load_ohlcv(Data.zi[], \"binance\", \"BTC/USDT\", \"1m\")\nfive_min_data = resample_ohlcv(minute_data, Minute(5))","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"Data is returned as a DataFrame with open,high,low,close,volume,timestamp columns. Since these save/load functions require a timestamp column, they check that the provided index is contiguous, it should not have missing timestamps, according to the subject timeframe. It is possible to disable those checks by passing check=:none.","category":"page"},{"location":"guides/data-management/","page":"Data Management Guide","title":"Data Management Guide","text":"This comprehensive data management guide provides everything you need to efficiently collect, store, and access market data in Planar. Start with the basic collection methods and gradually explore more advanced features as your data requirements grow.","category":"page"},{"location":"API/engine/#Engine-API","page":"Engine","title":"Engine API","text":"","category":"section"},{"location":"API/engine/","page":"Engine","title":"Engine","text":"The Engine module provides the core execution framework for Planar strategies. It handles data management, order execution, and coordinates between different execution modes (simulation, paper trading, and live trading).","category":"page"},{"location":"API/engine/#Overview","page":"Engine","title":"Overview","text":"","category":"section"},{"location":"API/engine/","page":"Engine","title":"Engine","text":"The Engine serves as the central coordinator that:","category":"page"},{"location":"API/engine/","page":"Engine","title":"Engine","text":"Manages strategy execution across different modes\nHandles data loading and OHLCV management\nCoordinates with exchanges and executors\nProvides unified interfaces for backtesting and live trading","category":"page"},{"location":"API/engine/#Core-Functions","page":"Engine","title":"Core Functions","text":"","category":"section"},{"location":"API/engine/#Data-Management","page":"Engine","title":"Data Management","text":"","category":"section"},{"location":"API/engine/#OHLCV-Data-Functions","page":"Engine","title":"OHLCV Data Functions","text":"","category":"section"},{"location":"API/engine/#Usage-Examples","page":"Engine","title":"Usage Examples","text":"","category":"section"},{"location":"API/engine/#Advanced-Data-Operations","page":"Engine","title":"Advanced Data Operations","text":"","category":"section"},{"location":"API/engine/#Strategy-Execution","page":"Engine","title":"Strategy Execution","text":"","category":"section"},{"location":"API/engine/#Execution-Control","page":"Engine","title":"Execution Control","text":"","category":"section"},{"location":"API/engine/#Example:-Strategy-Lifecycle","page":"Engine","title":"Example: Strategy Lifecycle","text":"","category":"section"},{"location":"API/engine/#Exchange-Integration","page":"Engine","title":"Exchange Integration","text":"","category":"section"},{"location":"API/engine/#Exchange-Access","page":"Engine","title":"Exchange Access","text":"","category":"section"},{"location":"API/engine/#Example:-Exchange-Operations","page":"Engine","title":"Example: Exchange Operations","text":"","category":"section"},{"location":"API/engine/#Data-Structures-and-Types","page":"Engine","title":"Data Structures and Types","text":"","category":"section"},{"location":"API/engine/#Core-Types","page":"Engine","title":"Core Types","text":"","category":"section"},{"location":"API/engine/","page":"Engine","title":"Engine","text":"The Engine module works with several key types:","category":"page"},{"location":"API/engine/#Data-Handlers","page":"Engine","title":"Data Handlers","text":"","category":"section"},{"location":"API/engine/#Integration-Patterns","page":"Engine","title":"Integration Patterns","text":"","category":"section"},{"location":"API/engine/#Backtesting-Pattern","page":"Engine","title":"Backtesting Pattern","text":"","category":"section"},{"location":"API/engine/#Paper-Trading-Pattern","page":"Engine","title":"Paper Trading Pattern","text":"","category":"section"},{"location":"API/engine/#Live-Trading-Pattern","page":"Engine","title":"Live Trading Pattern","text":"","category":"section"},{"location":"API/engine/#Performance-Optimization","page":"Engine","title":"Performance Optimization","text":"","category":"section"},{"location":"API/engine/#Efficient-Data-Access","page":"Engine","title":"Efficient Data Access","text":"","category":"section"},{"location":"API/engine/#Batch-Operations","page":"Engine","title":"Batch Operations","text":"","category":"section"},{"location":"API/engine/#Error-Handling","page":"Engine","title":"Error Handling","text":"","category":"section"},{"location":"API/engine/#Robust-Data-Loading","page":"Engine","title":"Robust Data Loading","text":"","category":"section"},{"location":"API/engine/#Exchange-Connection-Handling","page":"Engine","title":"Exchange Connection Handling","text":"","category":"section"},{"location":"API/engine/#Complete-API-Reference","page":"Engine","title":"Complete API Reference","text":"","category":"section"},{"location":"API/engine/#Strategies.Strategy-Tuple{Module, Union{AbstractSet{String}, Tuple{Vararg{String}}, Dict, AbstractVector{String}}}","page":"Engine","title":"Strategies.Strategy","text":"Initializes a Strategy object in the Strategies module.\n\nStrategy(\n    self::Module,\n    assets::Union{AbstractSet{String}, Tuple{Vararg{String}}, Dict, AbstractVector{String}};\n    load_data,\n    config,\n    params,\n    account,\n    mode,\n    margin,\n    sandbox,\n    timeframe\n)\n\n\nThe Strategy function takes the following parameters:\n\nself: a Module object representing the current module.\nassets: a Union of a dictionary or iterable of strings representing the assets to be included in the strategy.\nload_data (optional, default is true): a boolean indicating whether to load data for the assets.\nconfig: a Config object representing the configuration settings for the strategy.\nmode (optional, default is config.mode): a mode setting for the strategy.\nmargin (optional, default is config.margin): a margin setting for the strategy.\nsandbox (optional, default is true): a boolean indicating whether to run the strategy in a sandbox environment.\ntimeframe (optional, default is config.min_timeframe): a timeframe setting for the strategy.\n\nThe function initializes a Strategy object with the specified settings and assets.\n\n\n\n\n\n","category":"method"},{"location":"API/engine/#Base.fill!-Tuple{Collections.AssetCollection, Vararg{Any}}","page":"Engine","title":"Base.fill!","text":"fill! all the instances with given timeframes data...\n\nfill!(\n    ac::Collections.AssetCollection,\n    tfs...;\n    kwargs...\n) -> DataFrames.DataFrame\n\n\n\n\n\n\n","category":"method"},{"location":"API/engine/#Base.fill!-Tuple{Instances.AssetInstance, Vararg{Any}}","page":"Engine","title":"Base.fill!","text":"Pulls data from storage, or resamples from the shortest timeframe available.\n\nfill!(ai::Instances.AssetInstance, tfs...; exc, force, from)\n\n\nThis fill! function takes the following parameters:\n\nai: an AssetInstance object which represents an instance of an asset.\ntfs...: one or more TimeFrame objects that represent the desired timeframes to fill the data for.\nexc (optional, default is ai.exchange): an Exchange object that represents the exchange to pull data from.\nforce (optional, default is false): a boolean that indicates whether to force the data filling, even if the data is already present.\nfrom (optional, default is nothing): a DateTime object that represents the starting date from which to fill the data.\n\nFills the data for the specified timeframes. If the data is already present and force is false, the function does nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/engine/#Data.stub!-Tuple{Collections.AssetCollection, Any}","page":"Engine","title":"Data.stub!","text":"Replaces the data of the asset instances with src which should be a mapping. Used for backtesting.\n\nstub!(ac::Collections.AssetCollection, src; fromfiat)\n\n\nThe stub! function takes the following parameters:\n\nac: an AssetCollection object which encapsulates a collection of assets.\nsrc: The mapping, should be a pair TimeFrame => Dict{String, PairData}.\nfromfiat (optional, default is true): a boolean that indicates whether the assets are priced in fiat currency. If true, the assets are priced in fiat currency.\n\nThe function replaces the OHLCV data of the assets in the ac collection with the data from the src mapping. This is useful for backtesting trading strategies.\n\nExample:\n\nusing Scrapers.BinanceData as bn\nusing Strategies\nusing Exchanges\nsetexchange!(:binanceusdm)\ncfg = Config(Symbol(exc.id))\nstrat = strategy!(:Example, cfg)\ndata = bn.binanceload()\nstub!(strat.universe, data)\n\n\n\n\n\n","category":"method"},{"location":"API/engine/#See-Also","page":"Engine","title":"See Also","text":"","category":"section"},{"location":"API/engine/","page":"Engine","title":"Engine","text":"Strategies API - Strategy base classes and interfaces\nData API - Data structures and management\nExecutors API - Order execution and management\nExecution Modes Guide - Understanding sim, paper, and live modes\nData Management Guide - Working with market data","category":"page"},{"location":"presentation/#Why-Planar?","page":"Overview","title":"Why Planar?","text":"","category":"section"},{"location":"presentation/","page":"Overview","title":"Overview","text":"using Markdown\nlet lines = readlines(\"../../README.md\", keep=true)\nstart_idx = 1\nline = \"\"\nwhile !occursin(\"PRESENTATION BEGIN\", lines[start_idx])\n    start_idx+=1\nend\nstop_idx = start_idx + 1\nwhile !occursin(\"PRESENTATION END\", lines[stop_idx])\n    stop_idx+=1\nend\njoin(lines[start_idx+1:stop_idx-1]) |> Markdown.parse\nend\n","category":"page"},{"location":"API/executors/#Executors-API","page":"Executors","title":"Executors API","text":"","category":"section"},{"location":"API/executors/","page":"Executors","title":"Executors","text":"The Executors module handles order execution and trade management in Planar. It provides the interface between strategy logic and actual order placement, managing the execution lifecycle across different trading modes.","category":"page"},{"location":"API/executors/#Overview","page":"Executors","title":"Overview","text":"","category":"section"},{"location":"API/executors/","page":"Executors","title":"Executors","text":"The Executors module is responsible for:","category":"page"},{"location":"API/executors/","page":"Executors","title":"Executors","text":"Order creation and validation\nTrade execution across different modes (sim, paper, live)\nOrder lifecycle management\nPosition tracking and updates\nRisk management and validation","category":"page"},{"location":"API/executors/#Core-Execution-Events","page":"Executors","title":"Core Execution Events","text":"","category":"section"},{"location":"API/executors/#Event-Types","page":"Executors","title":"Event Types","text":"","category":"section"},{"location":"API/executors/#Event-Handling","page":"Executors","title":"Event Handling","text":"","category":"section"},{"location":"API/executors/#Order-Management","page":"Executors","title":"Order Management","text":"","category":"section"},{"location":"API/executors/#Order-Access-and-Manipulation","page":"Executors","title":"Order Access and Manipulation","text":"","category":"section"},{"location":"API/executors/#Order-Creation-Example","page":"Executors","title":"Order Creation Example","text":"","category":"section"},{"location":"API/executors/#Order-Lifecycle-Management","page":"Executors","title":"Order Lifecycle Management","text":"","category":"section"},{"location":"API/executors/#Optimization-Integration","page":"Executors","title":"Optimization Integration","text":"","category":"section"},{"location":"API/executors/#Optimization-Setup","page":"Executors","title":"Optimization Setup","text":"","category":"section"},{"location":"API/executors/#Optimization-Example","page":"Executors","title":"Optimization Example","text":"","category":"section"},{"location":"API/executors/#Position-Management-(Margin-Trading)","page":"Executors","title":"Position Management (Margin Trading)","text":"","category":"section"},{"location":"API/executors/#Position-Updates","page":"Executors","title":"Position Updates","text":"","category":"section"},{"location":"API/executors/#Risk-Management","page":"Executors","title":"Risk Management","text":"","category":"section"},{"location":"API/executors/#Order-Validation","page":"Executors","title":"Order Validation","text":"","category":"section"},{"location":"API/executors/#Risk-Monitoring","page":"Executors","title":"Risk Monitoring","text":"","category":"section"},{"location":"API/executors/#Performance-Patterns","page":"Executors","title":"Performance Patterns","text":"","category":"section"},{"location":"API/executors/#Efficient-Order-Processing","page":"Executors","title":"Efficient Order Processing","text":"","category":"section"},{"location":"API/executors/#Complete-API-Reference","page":"Executors","title":"Complete API Reference","text":"","category":"section"},{"location":"API/executors/#Executors.AnyFOKOrder","page":"Executors","title":"Executors.AnyFOKOrder","text":"Type alias for any FOK order \n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.AnyGTCOrder","page":"Executors","title":"Executors.AnyGTCOrder","text":"Type alias for any GTC order \n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.AnyIOCOrder","page":"Executors","title":"Executors.AnyIOCOrder","text":"Type alias for any IOC order \n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.IncreaseLimitOrder","page":"Executors","title":"Executors.IncreaseLimitOrder","text":"Union type representing limit order increase operations. Includes Buy and Sell Short orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.IncreaseLimitTrade","page":"Executors","title":"Executors.IncreaseLimitTrade","text":"Union type representing limit trade increase operations. Includes Buy and Sell Short trades.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.LIQUIDATION_BUFFER","page":"Executors","title":"Executors.LIQUIDATION_BUFFER","text":"Some exchanges add funding rates and trading fees to the liquidation price, we use a default buffer of -0.02.\n\n\n\n\n\n","category":"constant"},{"location":"API/executors/#Executors.ReduceLimitOrder","page":"Executors","title":"Executors.ReduceLimitOrder","text":"Union type representing limit order reduction operations. Includes Sell and Buy Short orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.ReduceLimitTrade","page":"Executors","title":"Executors.ReduceLimitTrade","text":"Union type representing limit trade reduction operations. Includes Sell and Buy Short trades.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.AnyLimitOrder","page":"Executors","title":"Executors.AnyLimitOrder","text":"Type alias for any limit order \n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.AnyMarketOrder","page":"Executors","title":"Executors.AnyMarketOrder","text":"Type alias for any market order \n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.AnyPostOnlyOrder","page":"Executors","title":"Executors.AnyPostOnlyOrder","text":"Type alias for any post only order \n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.CancelOrders","page":"Executors","title":"Executors.CancelOrders","text":"Action to cancel open orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.Context","page":"Executors","title":"Executors.Context","text":"The configuration against which a strategy is tested.\n\nThe Context struct has the following type parameter:\n\nM: a subtype of ExecMode.\n\nThe struct has the following fields:\n\nrange: The date range to backtest around.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.Context-Tuple{Strategy}","page":"Executors","title":"Executors.Context","text":"Create an instance of Context for a given strategy using the shortest timeframe.\n\nContext(s::Strategy) -> Executors.Context\n\n\nThe Context function takes the following parameters:\n\ns: a Strategy object of subtype ExecMode.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.InitData","page":"Executors","title":"Executors.InitData","text":"Action to initialize OHLCV data.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.LimitBuyTrade","page":"Executors","title":"Executors.LimitBuyTrade","text":"Type representing a limit buy trade, specific to long position buy limit orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.LimitSellTrade","page":"Executors","title":"Executors.LimitSellTrade","text":"Type representing a limit sell trade, specific to long position sell limit orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.LimitTrade","page":"Executors","title":"Executors.LimitTrade","text":"Type representing a limit trade, includes long position limit orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.LongMarketBuyTrade","page":"Executors","title":"Executors.LongMarketBuyTrade","text":"Defines a long market buy trade type.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.LongMarketSellTrade","page":"Executors","title":"Executors.LongMarketSellTrade","text":"Represents a long market sell trade on a certain exchange for a specific asset.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.NewTrade","page":"Executors","title":"Executors.NewTrade","text":"Action executed after a new trade occurs.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.OptMinimize","page":"Executors","title":"Executors.OptMinimize","text":"Action to indicate if the optimization is a minimization problem.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.OptRun","page":"Executors","title":"Executors.OptRun","text":"Action run before a single simulation during optimization.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.OptScore","page":"Executors","title":"Executors.OptScore","text":"Action to get the score of a single simulation (after it has finished).\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.OptSetup","page":"Executors","title":"Executors.OptSetup","text":"Action to setup an optimizer (context and params).\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.OrderIterator","page":"Executors","title":"Executors.OrderIterator","text":"A data structure for maintaining a collection of iterators.\n\niters\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.ShortLimitBuyTrade","page":"Executors","title":"Executors.ShortLimitBuyTrade","text":"Type representing a short limit buy trade, specific to short position buy limit orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.ShortLimitSellTrade","page":"Executors","title":"Executors.ShortLimitSellTrade","text":"Type representing a short limit sell trade, specific to short position sell limit orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.ShortLimitTrade","page":"Executors","title":"Executors.ShortLimitTrade","text":"Type representing a short limit trade, includes short position limit orders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.UpdateData","page":"Executors","title":"Executors.UpdateData","text":"Action to update OHLCV data (from watchers).\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.UpdateLeverage","page":"Executors","title":"Executors.UpdateLeverage","text":"Action to update leverage.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.UpdateMargin","page":"Executors","title":"Executors.UpdateMargin","text":"Action to update margin mode.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.UpdateOrders","page":"Executors","title":"Executors.UpdateOrders","text":"(DEPRECATED) order updates are done internally now.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.UpdateOrdersShuffled","page":"Executors","title":"Executors.UpdateOrdersShuffled","text":"(DEPRECATED) The shuffled version of UpdateOrders.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.UpdatePositions","page":"Executors","title":"Executors.UpdatePositions","text":"Action to update positions size.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Executors.WatchOHLCV","page":"Executors","title":"Executors.WatchOHLCV","text":"Action to setup an OHLCV watcher.\n\n\n\n\n\n","category":"type"},{"location":"API/executors/#Base.collect-Tuple{Executors.OrderIterator}","page":"Executors","title":"Base.collect","text":"Collects all elements of the OrderIterator into a Vector.\n\ncollect(\n    oi::Executors.OrderIterator\n) -> Vector{Pair{@NamedTuple{price::Float64, time::Dates.DateTime}, <:OrderTypes.Order}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.count-Tuple{Executors.OrderIterator}","page":"Executors","title":"Base.count","text":"Counts the number of elements in the OrderIterator.\n\ncount(oi::Executors.OrderIterator) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.delete!-Tuple{Strategy, Any, OrderTypes.IncreaseOrder}","page":"Executors","title":"Base.delete!","text":"Removes a single order from the order queue.\n\ndelete!(\n    s::Strategy,\n    ai,\n    o::OrderTypes.IncreaseOrder\n) -> Union{Nothing, Set{Instances.AssetInstance{T, E} where T<:AbstractAsset} where E<:ExchangeID}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.delete!-Tuple{Strategy, Any, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}}","page":"Executors","title":"Base.delete!","text":"Removes a single short buy order from the order queue.\n\ndelete!(\n    s::Strategy,\n    ai,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}\n) -> Union{Nothing, Set{Instances.AssetInstance{T, E} where T<:AbstractAsset} where E<:ExchangeID}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.delete!-Tuple{Strategy, Any, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}}","page":"Executors","title":"Base.delete!","text":"Removes a single sell order from the order queue.\n\ndelete!(\n    s::Strategy,\n    ai,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}\n) -> Union{Nothing, Set{Instances.AssetInstance{T, E} where T<:AbstractAsset} where E<:ExchangeID}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.delete!-Tuple{Strategy, Any, Type{<:Union{OrderTypes.Buy, OrderTypes.Sell}}}","page":"Executors","title":"Base.delete!","text":"Removes all buy/sell orders for an asset instance.\n\ndelete!(\n    s::Strategy,\n    ai,\n    t::Type{<:Union{OrderTypes.Buy, OrderTypes.Sell}}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.delete!-Tuple{Strategy, Any, Type{OrderTypes.BuyOrSell}}","page":"Executors","title":"Base.delete!","text":"Removes all buy and sell orders for an asset instance.\n\ndelete!(\n    s::Strategy,\n    ai,\n    _::Type{OrderTypes.BuyOrSell}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.delete!-Tuple{Strategy, Any}","page":"Executors","title":"Base.delete!","text":"Removes all orders for an asset instance.\n\ndelete!(s::Strategy, ai) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.eltype-Tuple{Executors.OrderIterator}","page":"Executors","title":"Base.eltype","text":"Returns the element type of the OrderIterator.\n\neltype(\n    _::Executors.OrderIterator\n) -> Type{Pair{@NamedTuple{price::Float64, time::Dates.DateTime}, <:OrderTypes.Order}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.fill!-Tuple{Strategy{<:Union{Misc.Paper, Misc.Sim}}, Instances.AssetInstance, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}, OrderTypes.ShortBuyTrade}","page":"Executors","title":"Base.fill!","text":"Fills a short buy order.\n\nfill!(\n    _::Strategy{<:Union{Misc.Paper, Misc.Sim}},\n    ai::Instances.AssetInstance,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E},\n    t::OrderTypes.ShortBuyTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.fill!-Tuple{Strategy{<:Union{Misc.Paper, Misc.Sim}}, Instances.AssetInstance, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}, OrderTypes.SellTrade}","page":"Executors","title":"Base.fill!","text":"Fills a sell order.\n\nfill!(\n    _::Strategy{<:Union{Misc.Paper, Misc.Sim}},\n    ai::Instances.AssetInstance,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E},\n    t::OrderTypes.SellTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.fill!-Tuple{Strategy{<:Union{Misc.Paper, Misc.Sim}}, Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Long} where {A, E}, OrderTypes.BuyTrade}","page":"Executors","title":"Base.fill!","text":"Fills a buy order for a no-margin strategy.\n\nfill!(\n    _::Strategy{<:Union{Misc.Paper, Misc.Sim}},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin},\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Long} where {A, E},\n    t::OrderTypes.BuyTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.fill!-Tuple{Strategy{var\"#s1948\", N, <:ExchangeID, <:Misc.WithMargin, C} where {var\"#s1948\"<:Union{Misc.Paper, Misc.Sim}, N, C}, Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, OrderTypes.IncreaseOrder, OrderTypes.IncreaseTrade}","page":"Executors","title":"Base.fill!","text":"Fills an increase order for a margin strategy.\n\nfill!(\n    _::Strategy{var\"#s1948\", N, <:ExchangeID, <:Misc.WithMargin, C} where {var\"#s1948\"<:Union{Misc.Paper, Misc.Sim}, N, C},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    o::OrderTypes.IncreaseOrder,\n    t::OrderTypes.IncreaseTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.first-Union{Tuple{E}, Tuple{S}, Tuple{M}, Tuple{Strategy{M, S, E}, Any}, Tuple{Strategy{M, S, E}, Any, OrderTypes.BySide}} where {M, S, E}","page":"Executors","title":"Base.first","text":"Returns the first order for an asset in a strategy.\n\nfirst(s::Strategy{M, S, E}, ai) -> Any\nfirst(\n    s::Strategy{M, S, E},\n    ai,\n    bs::OrderTypes.BySide\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.firstindex-Union{Tuple{E}, Tuple{S}, Tuple{M}, Tuple{Strategy{M, S, E}, Any}, Tuple{Strategy{M, S, E}, Any, OrderTypes.BySide}} where {M, S, E}","page":"Executors","title":"Base.firstindex","text":"Returns the first index for an order for an asset in a strategy.\n\nfirstindex(s::Strategy{M, S, E}, ai) -> Any\nfirstindex(\n    s::Strategy{M, S, E},\n    ai,\n    bs::OrderTypes.BySide\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.haskey-Tuple{Strategy, Any, @NamedTuple{price::Float64, time::Dates.DateTime}, Union{Type{OrderTypes.BuyOrSell}, OrderTypes.BuyOrSell, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.BuyOrSell}}}, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.BuyOrSell}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.BuyOrSell}}}}","page":"Executors","title":"Base.haskey","text":"Checks if a strategy has a specific order for an asset by price and time.\n\nhaskey(\n    s::Strategy,\n    ai,\n    pt::@NamedTuple{price::Float64, time::Dates.DateTime},\n    _::Union{Type{OrderTypes.BuyOrSell}, OrderTypes.BuyOrSell, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.BuyOrSell}}}, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.BuyOrSell}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.BuyOrSell}}}\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.haskey-Tuple{Strategy, Any, @NamedTuple{price::Float64, time::Dates.DateTime}, Union{Type{var\"#s1948\"}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{var\"#s1948\"}}}, OrderTypes.Order{<:OrderTypes.OrderType{var\"#s1948\"}}, OrderTypes.Trade{<:OrderTypes.OrderType{var\"#s1948\"}}, var\"#s1948\"} where var\"#s1948\"<:Union{OrderTypes.Buy, OrderTypes.Sell}}","page":"Executors","title":"Base.haskey","text":"Checks if a strategy has a specific order for an asset by price and time.\n\nhaskey(\n    s::Strategy,\n    ai,\n    pt::@NamedTuple{price::Float64, time::Dates.DateTime},\n    side::Union{Type{var\"#s1948\"}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{var\"#s1948\"}}}, OrderTypes.Order{<:OrderTypes.OrderType{var\"#s1948\"}}, OrderTypes.Trade{<:OrderTypes.OrderType{var\"#s1948\"}}, var\"#s1948\"} where var\"#s1948\"<:Union{OrderTypes.Buy, OrderTypes.Sell}\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.haskey-Tuple{Strategy, Any, @NamedTuple{price::Float64, time::Dates.DateTime}}","page":"Executors","title":"Base.haskey","text":"Checks if a strategy has a specific order for an asset by price and time.\n\nhaskey(\n    s::Strategy,\n    ai,\n    pt::@NamedTuple{price::Float64, time::Dates.DateTime}\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.haskey-Tuple{Strategy, Any, OrderTypes.Order}","page":"Executors","title":"Base.haskey","text":"Checks if a strategy has a specific order for an asset.\n\nhaskey(s::Strategy, ai, o::OrderTypes.Order) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.isdone-Tuple{Executors.OrderIterator}","page":"Executors","title":"Base.isdone","text":"Checks if the OrderIterator is empty.\n\nisdone(oi::Executors.OrderIterator) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.isopen-Tuple{Instances.AssetInstance, OrderTypes.Order}","page":"Executors","title":"Base.isopen","text":"Checks if an order is open.\n\nisopen(\n    ai::Instances.AssetInstance,\n    o::OrderTypes.Order\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.iszero-Tuple{Instances.AssetInstance, OrderTypes.Order}","page":"Executors","title":"Base.iszero","text":"Checks if the order amount left to fill is below minimum qty.\n\niszero(\n    ai::Instances.AssetInstance,\n    o::OrderTypes.Order\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.iterate-Tuple{Executors.OrderIterator, Any}","page":"Executors","title":"Base.iterate","text":"Returns the next element in the OrderIterator.\n\niterate(\n    oi::Executors.OrderIterator,\n    _\n) -> Union{Nothing, Tuple{Any, Nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.keys-Tuple{Strategy, Vararg{Any}}","page":"Executors","title":"Base.keys","text":"Returns all keys for orders in a strategy.\n\nkeys(\n    s::Strategy,\n    args...;\n    kwargs...\n) -> Union{Base.Generator{_A, Executors.var\"#45#46\"} where _A, DiskArrays.DiskGenerator{I, Executors.var\"#45#46\"} where I<:DiskArrays.AbstractDiskArray}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.last-Tuple{Executors.OrderIterator}","page":"Executors","title":"Base.last","text":"Returns the last element in the OrderIterator.\n\nlast(oi::Executors.OrderIterator) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.last-Union{Tuple{E}, Tuple{S}, Tuple{M}, Tuple{Strategy{M, S, E}, Any}, Tuple{Strategy{M, S, E}, Any, OrderTypes.BySide}} where {M, S, E}","page":"Executors","title":"Base.last","text":"Returns the last order for an asset in a strategy.\n\nlast(s::Strategy{M, S, E}, ai) -> Any\nlast(s::Strategy{M, S, E}, ai, bs::OrderTypes.BySide) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.lastindex-Union{Tuple{E}, Tuple{S}, Tuple{M}, Tuple{Strategy{M, S, E}, Any}, Tuple{Strategy{M, S, E}, Any, OrderTypes.BySide}} where {M, S, E}","page":"Executors","title":"Base.lastindex","text":"Returns the last index for an order for an asset in a strategy.\n\nlastindex(s::Strategy{M, S, E}, ai) -> Any\nlastindex(\n    s::Strategy{M, S, E},\n    ai,\n    bs::OrderTypes.BySide\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.push!-Union{Tuple{S}, Tuple{Strategy, Any, OrderTypes.Order{<:OrderTypes.OrderType{S}}}} where S<:OrderTypes.OrderSide","page":"Executors","title":"Base.push!","text":"Inserts an order into the order dict of the asset instance. Orders should be identifiable by a unique (price, date) tuple.\n\npush!(\n    s::Strategy,\n    ai,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}}\n) -> OrderTypes.Order{<:OrderTypes.OrderType{S}} where S<:OrderTypes.OrderSide\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Base.values-Tuple{Strategy, Vararg{Any}}","page":"Executors","title":"Base.values","text":"Returns all values for orders in a strategy.\n\nvalues(\n    s::Strategy,\n    args...;\n    kwargs...\n) -> Union{Base.Generator{_A, Executors.var\"#49#50\"} where _A, DiskArrays.DiskGenerator{I, Executors.var\"#49#50\"} where I<:DiskArrays.AbstractDiskArray}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.Checks.cost-Tuple{OrderTypes.Order}","page":"Executors","title":"Executors.Checks.cost","text":"Returns the cost of an order.\n\ncost(o::OrderTypes.Order) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_cash-Tuple{Instances.AssetInstance, Misc.Long}","page":"Executors","title":"Executors._check_cash","text":"Checks the cash for an asset instance in a strategy for long.\n\n_check_cash(ai::Instances.AssetInstance, _::Misc.Long)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_cash-Tuple{Instances.AssetInstance, Misc.Short}","page":"Executors","title":"Executors._check_cash","text":"Checks the cash for an asset instance in a strategy for short.\n\n_check_cash(ai::Instances.AssetInstance, _::Misc.Short)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_committment-Tuple{Any}","page":"Executors","title":"Executors._check_committment","text":"Checks order committment to be within expected values.\n\n_check_committment(o)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_trade-Tuple{OrderTypes.BuyTrade, Any}","page":"Executors","title":"Executors._check_trade","text":"Checks a buy trade.\n\n_check_trade(t::OrderTypes.BuyTrade, ai)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_trade-Tuple{OrderTypes.SellTrade, Any}","page":"Executors","title":"Executors._check_trade","text":"Checks a sell trade.\n\n_check_trade(t::OrderTypes.SellTrade, ai)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_trade-Tuple{OrderTypes.ShortBuyTrade, Any}","page":"Executors","title":"Executors._check_trade","text":"Checks a short buy trade.\n\n_check_trade(t::OrderTypes.ShortBuyTrade, ai)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_trade-Tuple{OrderTypes.ShortSellTrade, Any}","page":"Executors","title":"Executors._check_trade","text":"Checks a short sell trade.\n\n_check_trade(t::OrderTypes.ShortSellTrade, ai)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_unfillment-Tuple{OrderTypes.AnyBuyOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.LimitOrderType{OrderTypes.Buy}}}","page":"Executors","title":"Executors._check_unfillment","text":"Checks if the unfilled amount for a limit buy order is negative.\n\n_check_unfillment(\n    o::OrderTypes.AnyBuyOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.LimitOrderType{OrderTypes.Buy}}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_unfillment-Tuple{OrderTypes.AnyBuyOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.MarketOrderType{OrderTypes.Buy}}}","page":"Executors","title":"Executors._check_unfillment","text":"Checks if the unfilled amount for a market buy order is negative.\n\n_check_unfillment(\n    o::OrderTypes.AnyBuyOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.MarketOrderType{OrderTypes.Buy}}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_unfillment-Tuple{OrderTypes.AnySellOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.LimitOrderType{OrderTypes.Sell}}}","page":"Executors","title":"Executors._check_unfillment","text":"Checks if the unfilled amount for a limit sell order is positive.\n\n_check_unfillment(\n    o::OrderTypes.AnySellOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.LimitOrderType{OrderTypes.Sell}}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_unfillment-Tuple{OrderTypes.AnySellOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.MarketOrderType{OrderTypes.Sell}}}","page":"Executors","title":"Executors._check_unfillment","text":"Checks if the unfilled amount for a market sell order is positive.\n\n_check_unfillment(\n    o::OrderTypes.AnySellOrder{P, <:AbstractAsset, <:ExchangeID, var\"#s1949\"} where {P<:Misc.PositionSide, var\"#s1949\"<:OrderTypes.MarketOrderType{OrderTypes.Sell}}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_unfillment-Tuple{OrderTypes.LongOrder}","page":"Executors","title":"Executors._check_unfillment","text":"Checks if the unfilled amount for a long order is positive.\n\n_check_unfillment(o::OrderTypes.LongOrder) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._check_unfillment-Tuple{OrderTypes.ShortOrder}","page":"Executors","title":"Executors._check_unfillment","text":"Checks if the unfilled amount for a short order is negative.\n\n_check_unfillment(o::OrderTypes.ShortOrder) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._do_orders_iter-Tuple{Any}","page":"Executors","title":"Executors._do_orders_iter","text":"Filters out empty iterators and returns the smallest value.\n\n_do_orders_iter(oi) -> Union{Nothing, Tuple{Any, Nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._doclamp-Tuple{Any, Any, Vararg{Any}}","page":"Executors","title":"Executors._doclamp","text":"Clamps the given values within the correct boundaries.\n\n_doclamp(clamper, ai, whats...) -> Expr\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors._findmin-Tuple{Any}","page":"Executors","title":"Executors._findmin","text":"Finds and returns the iterator with the smallest value.\n\n_findmin(non_empty_iters) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.aftertrade!","page":"Executors","title":"Executors.aftertrade!","text":"Removes a filled limit order from the queue\n\naftertrade!(s::Strategy, ai, o::OrderTypes.Order) -> Any\naftertrade!(s::Strategy, ai, o::OrderTypes.Order, t) -> Any\n\n\nThe function is used post-trade to clean up the strategy's order queue.\n\n\n\n\n\n","category":"function"},{"location":"API/executors/#Executors.aftertrade!-2","page":"Executors","title":"Executors.aftertrade!","text":"Unconditionally dequeues immediate orders.\n\naftertrade!(\n    s::Strategy,\n    ai,\n    o::Union{OrderTypes.Order{<:OrderTypes.MarketOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}, OrderTypes.FOKOrder, OrderTypes.IOCOrder, OrderTypes.ShortFOKOrder, OrderTypes.ShortIOCOrder}\n) -> Any\naftertrade!(\n    s::Strategy,\n    ai,\n    o::Union{OrderTypes.Order{<:OrderTypes.MarketOrderType{S}, <:AbstractAsset, <:ExchangeID, P} where {S<:OrderTypes.OrderSide, P<:Misc.PositionSide}, OrderTypes.FOKOrder, OrderTypes.IOCOrder, OrderTypes.ShortFOKOrder, OrderTypes.ShortIOCOrder},\n    t\n) -> Any\n\n\nThis function is called after a trade to remove filled 'Fill Or Kill' (FOK) or 'Immediate Or Cancel' (IOC) orders from the strategy's order queue.\n\n\n\n\n\n","category":"function"},{"location":"API/executors/#Executors.aftertrade!-3","page":"Executors","title":"Executors.aftertrade!","text":"Performs cleanups after a trade (attempt).\n\naftertrade!(s, ai, o) -> Any\naftertrade!(s, ai, o, t) -> Any\n\n\n\n\n\n\n","category":"function"},{"location":"API/executors/#Executors.amount-Tuple{OrderTypes.Order}","page":"Executors","title":"Executors.amount","text":"Returns the amount of an order.\n\namount(o::OrderTypes.Order) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.basic_order_state-Union{Tuple{T}, Tuple{Any, Any, Ref{T}, Ref{T}}, Tuple{Any, Any, Ref{T}, Ref{T}, Any}} where T<:Real","page":"Executors","title":"Executors.basic_order_state","text":"Constructs a basic order state with given parameters.\n\nbasic_order_state(\n    take,\n    stop,\n    committed::Ref{T<:Real},\n    unfilled::Ref{T<:Real}\n) -> NamedTuple{(:take, :stop, :committed, :unfilled, :trades), T1} where {T<:Real, T1<:Union{Tuple{Nothing, Nothing, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}, Tuple{Nothing, Real, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}, Tuple{Real, Nothing, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}, Tuple{Real, Real, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}}}\nbasic_order_state(\n    take,\n    stop,\n    committed::Ref{T<:Real},\n    unfilled::Ref{T<:Real},\n    trades\n) -> NamedTuple{(:take, :stop, :committed, :unfilled, :trades), T1} where {T<:Real, T1<:Union{Tuple{Nothing, Nothing, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}, Tuple{Nothing, Real, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}, Tuple{Real, Nothing, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}, Tuple{Real, Real, Ref{T}, Ref{T}, Vector{OrderTypes.Trade}}}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.basicorder-Tuple{Instances.AssetInstance, Any, Any, Any, Executors.Checks.SanitizeOff}","page":"Executors","title":"Executors.basicorder","text":"Constructs an Order for a given OrderType type and inputs.\n\nbasicorder(\n    ai::Instances.AssetInstance,\n    price,\n    amount,\n    committed,\n    ::Executors.Checks.SanitizeOff;\n    type,\n    date,\n    loss,\n    profit,\n    id,\n    tag\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.buyorders-Tuple{Strategy, Any}","page":"Executors","title":"Executors.buyorders","text":"Returns buy orders for an asset in a strategy.\n\nbuyorders(\n    s::Strategy,\n    ai\n) -> SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.BuyPriceTimeOrdering} where D<:(OrderTypes.AnyBuyOrder{P, T, E} where {E<:ExchangeID, P<:Misc.PositionSide, T<:AbstractAsset})\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.cancel!-Tuple{Strategy, OrderTypes.Order, Any}","page":"Executors","title":"Executors.cancel!","text":"Cancels an order with given error.\n\ncancel!(s::Strategy, o::OrderTypes.Order, ai; err)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.committment-Tuple{Instances.AssetInstance, OrderTypes.Order}","page":"Executors","title":"Executors.committment","text":"Calculates the commitment for an order.\n\ncommittment(\n    ai::Instances.AssetInstance,\n    o::OrderTypes.Order;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.committment-Tuple{Instances.AssetInstance, OrderTypes.Trade}","page":"Executors","title":"Executors.committment","text":"Calculates the partial commitment of a trade.\n\ncommittment(\n    ai::Instances.AssetInstance,\n    t::OrderTypes.Trade\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.committment-Tuple{Type{<:OrderTypes.IncreaseOrder}, Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any, Any}","page":"Executors","title":"Executors.committment","text":"Calculates the commitment for a leveraged position.\n\ncommittment(\n    o::Type{<:OrderTypes.IncreaseOrder},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    price,\n    amount;\n    ntl,\n    fees,\n    lev,\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.committment-Tuple{Type{<:OrderTypes.IncreaseOrder}, Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, Any, Any}","page":"Executors","title":"Executors.committment","text":"Calculates the commitment for an increase order without margin.\n\ncommittment(\n    ::Type{<:OrderTypes.IncreaseOrder},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin},\n    price,\n    amount;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.committment-Tuple{Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}}, Any, Any, Any}","page":"Executors","title":"Executors.committment","text":"Calculates the commitment when exiting a position for shorts.\n\ncommittment(\n    ::Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}},\n    ai,\n    price,\n    amount;\n    fees_base,\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.committment-Tuple{Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}}, Any, Any, Any}","page":"Executors","title":"Executors.committment","text":"Calculates the commitment when exiting a position for longs.\n\ncommittment(\n    ::Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}},\n    ai,\n    price,\n    amount;\n    fees_base,\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.decommit!","page":"Executors","title":"Executors.decommit!","text":"Decommits an increase order from a strategy.\n\ndecommit!(\n    s::Strategy,\n    o::OrderTypes.IncreaseOrder,\n    ai\n) -> Float64\ndecommit!(\n    s::Strategy,\n    o::OrderTypes.IncreaseOrder,\n    ai,\n    canceled\n) -> Float64\n\n\n\n\n\n\n","category":"function"},{"location":"API/executors/#Executors.decommit!-Tuple{Strategy, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}, Any, Vararg{Any}}","page":"Executors","title":"Executors.decommit!","text":"Decommits a short buy order from an asset instance.\n\ndecommit!(\n    s::Strategy,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E},\n    ai,\n    args...\n) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.decommit!-Tuple{Strategy, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}, Any, Vararg{Any}}","page":"Executors","title":"Executors.decommit!","text":"Decommits a sell order from an asset instance.\n\ndecommit!(\n    s::Strategy,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E},\n    ai,\n    args...\n) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.feespaid-Tuple{OrderTypes.Order}","page":"Executors","title":"Executors.feespaid","text":"The sum of all the trades fees that have heppened for the order.\n\nfeespaid(o::OrderTypes.Order) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.filled_amount-Tuple{Any}","page":"Executors","title":"Executors.filled_amount","text":"Returns the filled amount of an order.\n\nfilled_amount(o) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hascash-Tuple{Strategy}","page":"Executors","title":"Executors.hascash","text":"Checks if any of the holdings has non dust cash.\n\nhascash(s::Strategy) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hasorders-Tuple{Strategy, Instances.AssetInstance}","page":"Executors","title":"Executors.hasorders","text":"Checks if an asset instance has pending orders in a strategy.\n\nhasorders(s::Strategy, ai::Instances.AssetInstance) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hasorders-Tuple{Strategy{X, N, <:ExchangeID, <:Misc.WithMargin, C} where {X<:Misc.ExecMode, N, C}, Any, Misc.PositionSide}","page":"Executors","title":"Executors.hasorders","text":"Checks if there are any orders for a given position side\n\nhasorders(\n    s::Strategy{X, N, <:ExchangeID, <:Misc.WithMargin, C} where {X<:Misc.ExecMode, N, C},\n    ai,\n    ps::Misc.PositionSide\n) -> Bool\n\n\nThis function checks both Buy and Sell sides for any orders that match the provided position side in the Margin Strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hasorders-Tuple{Strategy}","page":"Executors","title":"Executors.hasorders","text":"Checks if a strategy has orders.\n\nhasorders(s::Strategy) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hasorders-Union{Tuple{S}, Tuple{Strategy, Any, String}, Tuple{Strategy, Any, String, OrderTypes.BySide{S}}} where S<:OrderTypes.OrderSide","page":"Executors","title":"Executors.hasorders","text":"Checks if an asset instance has a specific order in a strategy by side.\n\nhasorders(s::Strategy, ai, id::String) -> Bool\nhasorders(\n    s::Strategy,\n    ai,\n    id::String,\n    ::Union{Type{S<:OrderTypes.OrderSide}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}}}, OrderTypes.Order{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}}, S<:OrderTypes.OrderSide}\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hasorders-Union{Tuple{S}, Tuple{Strategy, Any, Type{S}}} where S<:Union{OrderTypes.Buy, OrderTypes.Sell}","page":"Executors","title":"Executors.hasorders","text":"Checks if an asset instance has pending buy orders in a strategy.\n\nhasorders(\n    s::Strategy,\n    ai,\n    _::Type{S<:Union{OrderTypes.Buy, OrderTypes.Sell}}\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hasorders-Union{Tuple{S}, Tuple{Strategy, OrderTypes.BySide{S}}} where S<:OrderTypes.OrderSide","page":"Executors","title":"Executors.hasorders","text":"Checks if a strategy has sell orders.\n\nhasorders(\n    s::Strategy,\n    _::Union{Type{S<:OrderTypes.OrderSide}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}}}, OrderTypes.Order{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}}, S<:OrderTypes.OrderSide}\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hastrade-Tuple{Instances.AssetInstance, OrderTypes.Order, OrderTypes.Trade}","page":"Executors","title":"Executors.hastrade","text":"More precise version of hastrade.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hastrade-Tuple{OrderTypes.Order, OrderTypes.Trade}","page":"Executors","title":"Executors.hastrade","text":"Check if the given trade is in the order.\n\nhastrade(o::OrderTypes.Order, t::OrderTypes.Trade) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hold!-Tuple{Strategy, Any, OrderTypes.IncreaseOrder}","page":"Executors","title":"Executors.hold!","text":"When an increase order is added to a strategy, the asset is added to the holdings.\n\nhold!(\n    s::Strategy,\n    ai,\n    o::OrderTypes.IncreaseOrder\n) -> Set{Instances.AssetInstance{T, E} where T<:AbstractAsset} where E<:ExchangeID\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.hold!-Tuple{Strategy, Any, OrderTypes.ReduceOrder}","page":"Executors","title":"Executors.hold!","text":"Reduce orders can never switch an asset from not held to held.\n\nhold!(_::Strategy, _, _::OrderTypes.ReduceOrder)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.iscommittable-Tuple{Strategy, OrderTypes.IncreaseOrder, Any}","page":"Executors","title":"Executors.iscommittable","text":"Checks if an increase order can be committed to a strategy.\n\niscommittable(\n    s::Strategy,\n    o::OrderTypes.IncreaseOrder,\n    ai\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.iscommittable-Tuple{Strategy, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}, Any}","page":"Executors","title":"Executors.iscommittable","text":"Checks if a short buy order can be committed to an asset instance.\n\niscommittable(\n    _::Strategy,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E},\n    ai\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.iscommittable-Tuple{Strategy, OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}, Any}","page":"Executors","title":"Executors.iscommittable","text":"Checks if a sell order can be committed to an asset instance.\n\niscommittable(\n    _::Strategy,\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E},\n    ai\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.iscommittable-Tuple{Strategy, Type{<:OrderTypes.IncreaseOrder}, Any, Any}","page":"Executors","title":"Executors.iscommittable","text":"Checks if a strategy can commit to an increase order.\n\niscommittable(\n    s::Strategy,\n    _::Type{<:OrderTypes.IncreaseOrder},\n    commit,\n    ai\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.iscommittable-Tuple{Strategy, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}}, Any, Any}","page":"Executors","title":"Executors.iscommittable","text":"Checks if a strategy can commit to a short buy order.\n\niscommittable(\n    _::Strategy,\n    _::Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, A, E, Misc.Short} where {A, E}},\n    commit,\n    ai\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.iscommittable-Tuple{Strategy, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}}, Any, Any}","page":"Executors","title":"Executors.iscommittable","text":"Checks if a strategy can commit to a sell order.\n\niscommittable(\n    s::Strategy,\n    _::Type{<:OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Sell}, A, E, Misc.Long} where {A, E}},\n    commit,\n    ai\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.isfilled-Tuple{Instances.AssetInstance, OrderTypes.Order}","page":"Executors","title":"Executors.isfilled","text":"Checks if an order is filled.\n\nisfilled(\n    ai::Instances.AssetInstance,\n    o::OrderTypes.Order\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.isfirstfill-Tuple{Instances.AssetInstance, OrderTypes.Trade{<:OrderTypes.LimitOrderType}}","page":"Executors","title":"Executors.isfirstfill","text":"Checks if the provided trade is the first fill for the given asset instance.\n\nisfirstfill(\n    _::Instances.AssetInstance,\n    t::OrderTypes.Trade{<:OrderTypes.LimitOrderType}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.islastfill-Tuple{Instances.AssetInstance, OrderTypes.Trade{<:OrderTypes.LimitOrderType}}","page":"Executors","title":"Executors.islastfill","text":"Checks if the provided trade is the last fill for the given asset instance.\n\nislastfill(\n    ai::Instances.AssetInstance,\n    t::OrderTypes.Trade{<:OrderTypes.LimitOrderType}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.isliquidatable-Tuple{RTStrategy, Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Misc.PositionSide, Dates.DateTime}","page":"Executors","title":"Executors.isliquidatable","text":"Tests if a position should be liquidated at a particular price.\n\nisliquidatable(\n    _::RTStrategy,\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    p::Misc.PositionSide,\n    date::Dates.DateTime\n) -> Any\n\n\nThis function checks whether a position in a Paper or Live strategy should be liquidated at the current price at the specified date.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.isliquidatable-Tuple{SimStrategy, Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Misc.PositionSide, Dates.DateTime}","page":"Executors","title":"Executors.isliquidatable","text":"Checks if a position is liquidatable at a given date\n\nisliquidatable(\n    _::SimStrategy,\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    p::Misc.PositionSide,\n    date::Dates.DateTime\n) -> Any\n\n\nThis function determines whether a position in a margin strategy is eligible for liquidation at the specified date.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.isoutof_orders-Tuple{Strategy}","page":"Executors","title":"Executors.isoutof_orders","text":"Checks if a strategy is out of orders.\n\nisoutof_orders(s::Strategy) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.isqueued-Union{Tuple{S}, Tuple{OrderTypes.Order{<:OrderTypes.OrderType{S}}, Strategy, Any}} where S<:OrderTypes.OrderSide","page":"Executors","title":"Executors.isqueued","text":"Checks if an order is already added to the queue.\n\nisqueued(\n    o::OrderTypes.Order{<:OrderTypes.OrderType{S<:OrderTypes.OrderSide}},\n    s::Strategy,\n    ai\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.limitorder-Tuple{Strategy, Any, Any}","page":"Executors","title":"Executors.limitorder","text":"Places a limit order in the strategy\n\nlimitorder(\n    s::Strategy,\n    ai,\n    amount;\n    date,\n    type,\n    price,\n    take,\n    stop,\n    skipcommit,\n    kwargs...\n)\n\n\nThis function places a limit order with specified parameters in the strategy s. The type argument specifies the type of the order. The price defaults to the current price at the given date if not provided. The take and stop arguments are optional and default to nothing. If skipcommit is true, the function will not commit the order. Additional arguments can be passed via kwargs.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.liquidations-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin}","page":"Executors","title":"Executors.liquidations","text":"The number of liquidations that have happened for an asset instance.\n\nliquidations(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin\n) -> @NamedTuple{long::Vector{OrderTypes.Trade}, long_loss::Float64, short::Vector{OrderTypes.Trade}, short_loss::Float64}\n\n\nThis function counts the number of liquidations that have occurred in the history of a margin asset instance.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.longorders-Tuple{Strategy, Any, Type{<:OrderTypes.OrderSide}}","page":"Executors","title":"Executors.longorders","text":"Returns a generator for long orders matching a given order side\n\nlongorders(\n    s::Strategy,\n    ai,\n    os::Type{<:OrderTypes.OrderSide}\n) -> Base.Generator{I, typeof(identity)} where I<:(Base.Iterators.Filter{Executors.var\"#orders##24#orders##25\"{Misc.Long}})\n\n\nThis function utilizes the orders function to generate orders for the Long position side that match the provided order side.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.marketorder-Tuple{Strategy, Any, Any}","page":"Executors","title":"Executors.marketorder","text":"Executes a market order.\n\nmarketorder(\n    s::Strategy,\n    ai,\n    amount;\n    date,\n    type,\n    take,\n    stop,\n    price,\n    skipcommit,\n    kwargs...\n)\n\n\nThis function takes a strategy, an ai, an amount, and other optional arguments such as date, type, take, stop, price, and kwargs. It executes a market order with the given parameters. If skipcommit is set to false (default), the order is committed. Returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.order_byid-Tuple{Strategy, Instances.AssetInstance, String}","page":"Executors","title":"Executors.order_byid","text":"Returns the order that matches the given id (if any).\n\norder_byid(\n    s::Strategy,\n    ai::Instances.AssetInstance,\n    id::String\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Any, Any, Type{OrderTypes.BuyOrSell}}","page":"Executors","title":"Executors.orders","text":"Returns all orders for an asset instance in a strategy.\n\norders(s, ai, _::Type{OrderTypes.BuyOrSell}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Any, Misc.PositionSide, Type{<:OrderTypes.OrderSide}}","page":"Executors","title":"Executors.orders","text":"Returns a generator for orders matching a given position side and order side\n\norders(\n    s::Strategy,\n    ai,\n    pos::Misc.PositionSide,\n    os::Type{<:OrderTypes.OrderSide}\n) -> Base.Generator{I, typeof(identity)} where I<:(Base.Iterators.Filter{F} where F<:(Executors.var\"#orders##24#orders##25\"{<:Misc.PositionSide}))\n\n\nThis function iterates over the orders of a strategy, returning only those that match the provided position side and order side.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Any, Misc.PositionSide}","page":"Executors","title":"Executors.orders","text":"Returns a generator for orders matching a given position side\n\norders(\n    s::Strategy,\n    ai,\n    pos::Misc.PositionSide\n) -> Base.Iterators.Flatten{I} where I<:(Base.Generator{Tuple{DataType, DataType}, F} where F<:(Executors.var\"#orders##26#orders##27\"{Strategy{X, N, E, M, C}, _A, <:Misc.PositionSide} where {X<:Misc.ExecMode, N, E<:ExchangeID, M<:Misc.MarginMode, C, _A}))\n\n\nThis function iterates over the orders of a strategy for both Buy and Sell sides, returning those that match the provided position side.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Instances.AssetInstance, Val{:orderless}}","page":"Executors","title":"Executors.orders","text":"Iterates over all the orderless orders for an asset instance in a strategy.\n\norders(\n    s::Strategy,\n    ai::Instances.AssetInstance,\n    _::Val{:orderless}\n) -> Base.Iterators.Flatten{I} where I<:(Base.Generator{Tuple{DataType, DataType}, F} where F<:(Executors.var\"#orders##18#orders##19\"{Strategy{X, N, E, M, C}, Instances.AssetInstance{T, E1, M1}} where {X<:Misc.ExecMode, N, E<:ExchangeID, M<:Misc.MarginMode, C, T<:AbstractAsset, E1<:ExchangeID, M1<:Misc.MarginMode}))\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Instances.AssetInstance}","page":"Executors","title":"Executors.orders","text":"Iterates over all the orders for an asset instance in a strategy.\n\norders(\n    s::Strategy,\n    ai::Instances.AssetInstance\n) -> Union{Executors.OrderIterator, SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.BuyPriceTimeOrdering} where D<:(OrderTypes.AnyBuyOrder{P, T, E} where {E<:ExchangeID, P<:Misc.PositionSide, T<:AbstractAsset}), SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.SellPriceTimeOrdering} where D<:(OrderTypes.AnySellOrder{P, T, E} where {E<:ExchangeID, P<:Misc.PositionSide, T<:AbstractAsset})}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Union{Type{OrderTypes.Buy}, OrderTypes.Buy, Type{<:OrderTypes.AnyBuyOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Buy}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Buy}}, OrderTypes.AnyBuyOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}}","page":"Executors","title":"Executors.orders","text":"Returns all buy orders for a strategy.\n\norders(\n    s::Strategy,\n    _::Union{Type{OrderTypes.Buy}, OrderTypes.Buy, Type{<:OrderTypes.AnyBuyOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Buy}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Buy}}, OrderTypes.AnyBuyOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}\n) -> Executors.OrderIterator\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Union{Type{OrderTypes.Sell}, OrderTypes.Sell, Type{<:OrderTypes.AnySellOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Sell}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Sell}}, OrderTypes.AnySellOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}}","page":"Executors","title":"Executors.orders","text":"Returns all sell orders for a strategy.\n\norders(\n    s::Strategy,\n    _::Union{Type{OrderTypes.Sell}, OrderTypes.Sell, Type{<:OrderTypes.AnySellOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Sell}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Sell}}, OrderTypes.AnySellOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}\n) -> Executors.OrderIterator\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Val{:orderless}, Val{:universe}}","page":"Executors","title":"Executors.orders","text":"Iterates orderlessly over all the orders in a strategy (all the assets in the universe).\n\norders(\n    s::Strategy,\n    _::Val{:orderless},\n    _::Val{:universe}\n) -> Executors.OrderIterator\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Val{:orderless}}","page":"Executors","title":"Executors.orders","text":"Iterates over all the orderless orders in a strategy.\n\norders(\n    s::Strategy,\n    _::Val{:orderless}\n) -> Base.Iterators.Flatten{I} where I<:(Base.Generator{Tuple{DataType, DataType}, F} where F<:(Executors.var\"#orders##4#orders##5\"{Strategy{X, N, E, M, C}} where {X<:Misc.ExecMode, N, E<:ExchangeID, M<:Misc.MarginMode, C}))\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy, Val{:universe}}","page":"Executors","title":"Executors.orders","text":"Iterates over all the orders in a strategy (all the assets in the universe).\n\norders(\n    s::Strategy,\n    _::Val{:universe}\n) -> Executors.OrderIterator\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Tuple{Strategy}","page":"Executors","title":"Executors.orders","text":"Iterates over all the orders in a strategy.\n\norders(s::Strategy) -> Executors.OrderIterator\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Union{Tuple{E}, Tuple{S}, Tuple{M}, Tuple{Strategy{M, S, E}, Any, Union{Type{OrderTypes.Buy}, OrderTypes.Buy, Type{<:OrderTypes.AnyBuyOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Buy}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Buy}}, OrderTypes.AnyBuyOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}}} where {M, S, E}","page":"Executors","title":"Executors.orders","text":"Returns all buy orders for an asset in a strategy.\n\norders(\n    s::Strategy{M, S, E},\n    ai,\n    _::Union{Type{OrderTypes.Buy}, OrderTypes.Buy, Type{<:OrderTypes.AnyBuyOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Buy}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Buy}}, OrderTypes.AnyBuyOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}\n) -> SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.BuyPriceTimeOrdering} where D<:(OrderTypes.AnyBuyOrder{P, T, _A} where {_A, P<:Misc.PositionSide, T<:AbstractAsset})\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orders-Union{Tuple{E}, Tuple{S}, Tuple{M}, Tuple{Strategy{M, S, E}, Any, Union{Type{OrderTypes.Sell}, OrderTypes.Sell, Type{<:OrderTypes.AnySellOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Sell}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Sell}}, OrderTypes.AnySellOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}}} where {M, S, E}","page":"Executors","title":"Executors.orders","text":"Returns all sell orders for an asset in a strategy.\n\norders(\n    s::Strategy{M, S, E},\n    ai,\n    _::Union{Type{OrderTypes.Sell}, OrderTypes.Sell, Type{<:OrderTypes.AnySellOrder{P, A, E, var\"#s1947\"} where {var\"#s1947\"<:OrderTypes.OrderType{OrderTypes.Sell}, A<:AbstractAsset, E<:ExchangeID, P<:Misc.PositionSide}}, OrderTypes.Trade{<:OrderTypes.OrderType{OrderTypes.Sell}}, OrderTypes.AnySellOrder{P, A, E} where {P<:Misc.PositionSide, A<:AbstractAsset, E<:ExchangeID}}\n) -> SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.SellPriceTimeOrdering} where D<:(OrderTypes.AnySellOrder{P, T, _A} where {_A, P<:Misc.PositionSide, T<:AbstractAsset})\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Tuple{Strategy, Instances.AssetInstance, Type{OrderTypes.BuyOrSell}}","page":"Executors","title":"Executors.orderscount","text":"Returns the count of orders for an asset in a strategy.\n\norderscount(\n    s::Strategy,\n    ai::Instances.AssetInstance,\n    _::Type{OrderTypes.BuyOrSell}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Tuple{Strategy, Instances.AssetInstance, Type{OrderTypes.Buy}}","page":"Executors","title":"Executors.orderscount","text":"Returns the count of buy orders for an asset in a strategy.\n\norderscount(\n    s::Strategy,\n    ai::Instances.AssetInstance,\n    _::Type{OrderTypes.Buy}\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Tuple{Strategy, Instances.AssetInstance, Type{OrderTypes.Sell}}","page":"Executors","title":"Executors.orderscount","text":"Returns the count of sell orders for an asset in a strategy.\n\norderscount(\n    s::Strategy,\n    ai::Instances.AssetInstance,\n    _::Type{OrderTypes.Sell}\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Tuple{Strategy, Instances.AssetInstance}","page":"Executors","title":"Executors.orderscount","text":"Returns the count of orders for an asset in a strategy.\n\norderscount(s::Strategy, ai::Instances.AssetInstance) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Tuple{Strategy, Val{:increase}}","page":"Executors","title":"Executors.orderscount","text":"Returns the count of pending entry orders in a strategy.\n\norderscount(s::Strategy, _::Val{:increase}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Tuple{Strategy, Val{:reduce}}","page":"Executors","title":"Executors.orderscount","text":"Returns the count of pending exit orders in a strategy.\n\norderscount(s::Strategy, _::Val{:reduce}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Tuple{Strategy}","page":"Executors","title":"Executors.orderscount","text":"Returns the total count of pending orders in a strategy.\n\norderscount(s::Strategy) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.orderscount-Union{Tuple{O}, Tuple{Strategy, Union{Type{O}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{O}}}, OrderTypes.Order{<:OrderTypes.OrderType{O}}, OrderTypes.Trade{<:OrderTypes.OrderType{O}}, O}}} where O","page":"Executors","title":"Executors.orderscount","text":"Returns the count of orders in a strategy.\n\norderscount(\n    s::Strategy,\n    _::Union{Type{O}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{O}}}, OrderTypes.Order{<:OrderTypes.OrderType{O}}, OrderTypes.Trade{<:OrderTypes.OrderType{O}}, O}\n) -> Tuple{Any, Any}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.ordershistory-Tuple{Instances.AssetInstance}","page":"Executors","title":"Executors.ordershistory","text":"Returns a unique list of orders from the trade history of a given asset instance.\n\nordershistory(ai::Instances.AssetInstance) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.position!-Tuple{IsolatedStrategy, Any, Dates.DateTime, Misc.PositionSide}","page":"Executors","title":"Executors.position!","text":"Updates the position of the isolated strategy to the given position side at the specified date\n\nposition!(\n    s::IsolatedStrategy,\n    ai,\n    date::Dates.DateTime,\n    p::Misc.PositionSide\n) -> Any\n\n\nThis function updates the position of the strategy for the asset in question at the given date to the provided position side.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.position!-Tuple{Strategy{X, N, <:ExchangeID, NoMargin, C} where {X<:Misc.ExecMode, N, C}, Vararg{Any}}","page":"Executors","title":"Executors.position!","text":"Non margin strategies don't have positions.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.priceat-Tuple{Strategy, Type{<:OrderTypes.Order}, Any, Any}","page":"Executors","title":"Executors.priceat","text":"The price for an order at a particular date.\n\npriceat(\n    _::Strategy,\n    _::Type{<:OrderTypes.Order},\n    ai,\n    date\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.queue!-Union{Tuple{S}, Tuple{Strategy, OrderTypes.Order{<:OrderTypes.LimitOrderType{S}}, Any}} where S<:OrderTypes.OrderSide","page":"Executors","title":"Executors.queue!","text":"Adds a limit order to the pending orders of the strategy.\n\nqueue!(\n    s::Strategy,\n    o::OrderTypes.Order{<:OrderTypes.LimitOrderType{S<:OrderTypes.OrderSide}},\n    ai;\n    skipcommit\n) -> Bool\n\n\nThis function takes a strategy, a limit order of type LimitOrderType{S}, and an asset instance as arguments. It adds the limit order to the pending orders of the strategy. If skipcommit is set to false (default), the order is committed and held. Returns true if the order was successfully added, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.release!-Tuple{Strategy, Any}","page":"Executors","title":"Executors.release!","text":"An asset is released when there are no orders for it and its balance is zero.\n\nrelease!(\n    s::Strategy,\n    ai\n) -> Union{Nothing, Set{Instances.AssetInstance{T, E} where T<:AbstractAsset} where E<:ExchangeID}\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.sellorders-Tuple{Strategy, Any}","page":"Executors","title":"Executors.sellorders","text":"Returns sell orders for an asset in a strategy.\n\nsellorders(\n    s::Strategy,\n    ai\n) -> SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.SellPriceTimeOrdering} where D<:(OrderTypes.AnySellOrder{P, T, E} where {E<:ExchangeID, P<:Misc.PositionSide, T<:AbstractAsset})\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.shortorders-Tuple{Strategy, Any, Type{<:OrderTypes.OrderSide}}","page":"Executors","title":"Executors.shortorders","text":"Returns a generator for short orders matching a given order side\n\nshortorders(\n    s::Strategy,\n    ai,\n    os::Type{<:OrderTypes.OrderSide}\n) -> Base.Generator{I, typeof(identity)} where I<:(Base.Iterators.Filter{Executors.var\"#orders##24#orders##25\"{Misc.Short}})\n\n\nThis function utilizes the orders function to generate orders for the Short position side that match the provided order side.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.sideorders-Tuple{Strategy, Any, Type{OrderTypes.Buy}}","page":"Executors","title":"Executors.sideorders","text":"Returns orders for an asset in a strategy by side.\n\nsideorders(\n    s::Strategy,\n    ai,\n    _::Type{OrderTypes.Buy}\n) -> SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.BuyPriceTimeOrdering} where D<:(OrderTypes.AnyBuyOrder{P, T, E} where {E<:ExchangeID, P<:Misc.PositionSide, T<:AbstractAsset})\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.sideorders-Tuple{Strategy, Any, Type{OrderTypes.Sell}}","page":"Executors","title":"Executors.sideorders","text":"Returns orders for an asset in a strategy by side.\n\nsideorders(\n    s::Strategy,\n    ai,\n    _::Type{OrderTypes.Sell}\n) -> SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.SellPriceTimeOrdering} where D<:(OrderTypes.AnySellOrder{P, T, E} where {E<:ExchangeID, P<:Misc.PositionSide, T<:AbstractAsset})\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.sideorders-Union{Tuple{S}, Tuple{Strategy, Any, Union{Type{S}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{S}}}, OrderTypes.Order{<:OrderTypes.OrderType{S}}, OrderTypes.Trade{<:OrderTypes.OrderType{S}}, S}}} where S","page":"Executors","title":"Executors.sideorders","text":"Returns orders for an asset in a strategy by side.\n\nsideorders(\n    s::Strategy,\n    ai,\n    _::Union{Type{S}, Type{<:OrderTypes.Order{<:OrderTypes.OrderType{S}}}, OrderTypes.Order{<:OrderTypes.OrderType{S}}, OrderTypes.Trade{<:OrderTypes.OrderType{S}}, S}\n) -> SortedDict{@NamedTuple{price::Float64, time::Dates.DateTime}, D, Strategies.SellPriceTimeOrdering} where D<:(OrderTypes.AnySellOrder{P, T, E} where {E<:ExchangeID, P<:Misc.PositionSide, T<:AbstractAsset})\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.strategycash!-Tuple{IsolatedStrategy, Any, OrderTypes.IncreaseTrade}","page":"Executors","title":"Executors.strategycash!","text":"Updates the strategy's cash after an increase trade.\n\nstrategycash!(\n    s::IsolatedStrategy,\n    ai,\n    t::OrderTypes.IncreaseTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.strategycash!-Tuple{IsolatedStrategy, Any, OrderTypes.ReduceTrade}","page":"Executors","title":"Executors.strategycash!","text":"Updates the strategy's cash after a reduce trade.\n\nstrategycash!(\n    s::IsolatedStrategy,\n    ai,\n    t::OrderTypes.ReduceTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.strategycash!-Tuple{Strategy{X, N, <:ExchangeID, NoMargin, C} where {X<:Misc.ExecMode, N, C}, Any, OrderTypes.BuyTrade}","page":"Executors","title":"Executors.strategycash!","text":"Updates the strategy's cash after a buy trade.\n\nstrategycash!(\n    s::Strategy{X, N, <:ExchangeID, NoMargin, C} where {X<:Misc.ExecMode, N, C},\n    ai,\n    t::OrderTypes.BuyTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.strategycash!-Tuple{Strategy{X, N, <:ExchangeID, NoMargin, C} where {X<:Misc.ExecMode, N, C}, Any, OrderTypes.SellTrade}","page":"Executors","title":"Executors.strategycash!","text":"Updates the strategy's cash after a sell trade.\n\nstrategycash!(\n    s::Strategy{X, N, <:ExchangeID, NoMargin, C} where {X<:Misc.ExecMode, N, C},\n    _,\n    t::OrderTypes.SellTrade\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.trade!-Tuple{Strategy, Any, Any}","page":"Executors","title":"Executors.trade!","text":"Executes a trade with the given parameters and updates the strategy state.\n\ntrade!(\n    s::Strategy,\n    o,\n    ai;\n    date,\n    price,\n    actual_amount,\n    fees,\n    slippage,\n    kwargs...\n)\n\n\nThis function executes a trade based on the given order and asset instance. It calculates the actual price, creates a trade using the maketrade function, and updates the strategy and asset instance. If the trade cannot be executed (e.g., not enough cash), the function updates the state as if the order was filled without creating a trade. The function returns the created trade or nothing if the trade could not be executed.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.unfilled-Tuple{OrderTypes.Order}","page":"Executors","title":"Executors.unfilled","text":"Returns the absolute value of the unfilled amount of an order.\n\nunfilled(o::OrderTypes.Order) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.unfillment-Tuple{OrderTypes.Order}","page":"Executors","title":"Executors.unfillment","text":"Calculates the unfulfilled amount for an order.\n\nunfillment(o::OrderTypes.Order) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.unfillment-Tuple{Type{<:OrderTypes.AnyBuyOrder}, Any}","page":"Executors","title":"Executors.unfillment","text":"Calculates the unfulfilled amount for a buy order.\n\nunfillment(t::Type{<:OrderTypes.AnyBuyOrder}, amount) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.unfillment-Tuple{Type{<:OrderTypes.AnySellOrder}, Any}","page":"Executors","title":"Executors.unfillment","text":"Calculates the unfulfilled amount for a sell order.\n\nunfillment(\n    t::Type{<:OrderTypes.AnySellOrder},\n    amount\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.update_leverage!-Union{Tuple{Instances.Position{P}}, Tuple{P}} where P","page":"Executors","title":"Executors.update_leverage!","text":"Updates leverage based on position state.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.update_maintenance!-Tuple{Instances.Position}","page":"Executors","title":"Executors.update_maintenance!","text":"Updates leverage based on position state.\n\nupdate_maintenance!(po::Instances.Position; ntl, mmr) -> Any\n\n\nThis function updates the leverage of a position based on its current state, using the provided leverage, price, and maintenance margin ratio.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.update_notional!-Tuple{Instances.Position}","page":"Executors","title":"Executors.update_notional!","text":"Updates notional value.\n\nupdate_notional!(po::Instances.Position; ntl, size)\n\n\nThis function updates the notional value of a position using the provided notional amount and size.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.update_price!-Tuple{Instances.Position}","page":"Executors","title":"Executors.update_price!","text":"Update the entry price from notional, amount diff and cash.\n\nupdate_price!(po::Instances.Position; ntl, prev_ntl, size)\n\n\nThis function calculates the new entry price of a position using the notional amount, the difference in amount, and the cash in the position.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.withtrade!-Union{Tuple{P}, Tuple{Instances.Position{P}, OrderTypes.Trade{O, A, E, P} where {O<:OrderTypes.OrderType, A<:AbstractAsset, E<:ExchangeID}}} where P","page":"Executors","title":"Executors.withtrade!","text":"Update position price, notional and leverage from a new trade.\n\nwithtrade!(\n    po::Instances.Position{P},\n    t::OrderTypes.Trade{O, A, E, P} where {O<:OrderTypes.OrderType, A<:AbstractAsset, E<:ExchangeID};\n    settle_price\n) -> Any\n\n\nThis function adjusts the price, notional value, and leverage of a position based on a new trade at the given settlement price.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Instances.committed-Tuple{OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, var\"#s1947\", var\"#s1946\", Misc.Short} where {var\"#s1947\"<:AbstractAsset, var\"#s1946\"<:ExchangeID}}","page":"Executors","title":"Instances.committed","text":"Returns the committed amount of a short buy order.\n\ncommitted(\n    o::OrderTypes.Order{<:OrderTypes.OrderType{OrderTypes.Buy}, var\"#s1947\", var\"#s1946\", Misc.Short} where {var\"#s1947\"<:AbstractAsset, var\"#s1946\"<:ExchangeID}\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Instances.committed-Tuple{OrderTypes.Order}","page":"Executors","title":"Instances.committed","text":"Returns the committed amount of an order.\n\ncommitted(o::OrderTypes.Order) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Instances.committed-Union{Tuple{P}, Tuple{Strategy{X, N, <:ExchangeID, <:Misc.WithMargin, C} where {X<:Misc.ExecMode, N, C}, Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P}}} where P","page":"Executors","title":"Instances.committed","text":"Calculates the committed amount for a given position\n\ncommitted(\n    s::Strategy{X, N, <:ExchangeID, <:Misc.WithMargin, C} where {X<:Misc.ExecMode, N, C},\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    _::Union{Type{P}, Type{O} where O<:(OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), Type{T} where T<:(OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}), OrderTypes.Order{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, OrderTypes.Trade{<:OrderTypes.OrderType, <:AbstractAsset, <:ExchangeID, P}, P}\n) -> Float64\n\n\nThis function sums the amounts of all the orders that match the given position in the Margin Strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Instances.isdust-Tuple{Instances.AssetInstance, OrderTypes.Order}","page":"Executors","title":"Instances.isdust","text":"Checks if the order committed value is below minimum quantity.\n\nisdust(\n    ai::Instances.AssetInstance,\n    o::OrderTypes.Order\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Instances.liqprice-Tuple{Misc.PositionSide, Any, Any, Any}","page":"Executors","title":"Instances.liqprice","text":"Calculates the liquidation price of a position\n\nliqprice(\n    p::Misc.PositionSide,\n    entryprice,\n    leverage,\n    mmr;\n    additional,\n    notional\n) -> Any\n\n\nThis function calculates the price at which a position would be liquidated, given the entry price, leverage, maintenance margin ratio, additional margin, and notional value.\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Instruments.cash!-Tuple{Strategy, Any, OrderTypes.Trade}","page":"Executors","title":"Instruments.cash!","text":"Updates the strategy's and asset instance's cash after a trade.\n\ncash!(s::Strategy, ai, t::OrderTypes.Trade)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Misc.attr-Tuple{OrderTypes.Order, Any}","page":"Executors","title":"Misc.attr","text":"Returns the attribute of an order.\n\nattr(o::OrderTypes.Order, sym) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Misc.reset!-Tuple{OrderTypes.Order, Any}","page":"Executors","title":"Misc.reset!","text":"Resets an order committment and unfilled amount.\n\nreset!(o::OrderTypes.Order, ai) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#OrderTypes.commit!-Tuple{Strategy, OrderTypes.IncreaseOrder, Any}","page":"Executors","title":"OrderTypes.commit!","text":"Commits an increase order to a strategy.\n\ncommit!(s::Strategy, o::OrderTypes.IncreaseOrder, _)\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#OrderTypes.commit!-Tuple{Strategy, OrderTypes.ReduceOrder, Any}","page":"Executors","title":"OrderTypes.commit!","text":"Commits a reduce order to an asset instance.\n\ncommit!(_::Strategy, o::OrderTypes.ReduceOrder, ai) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#OrderTypes.trades-Tuple{OrderTypes.Order}","page":"Executors","title":"OrderTypes.trades","text":"Returns the trades of an order.\n\ntrades(o::OrderTypes.Order) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/executors/#Executors.@amount!-Tuple{Any, Vararg{Any}}","page":"Executors","title":"Executors.@amount!","text":"Ensures the amount is within correct boundaries.\n\n\n\n\n\n","category":"macro"},{"location":"API/executors/#Executors.@price!-Tuple{Any, Vararg{Any}}","page":"Executors","title":"Executors.@price!","text":"Ensures the price is within correct boundaries.\n\n\n\n\n\n","category":"macro"},{"location":"API/executors/#See-Also","page":"Executors","title":"See Also","text":"","category":"section"},{"location":"API/executors/","page":"Executors","title":"Executors","text":"Strategies API - Strategy base classes and interfaces\nOrderTypes API - Order types and structures\nEngine API - Core execution engine functions\nInstances API - Asset instance management\nStrategy Development Guide - Building trading strategies\nExecution Modes Guide - Understanding different execution modes","category":"page"},{"location":"API/metrics/#Metrics","page":"Metrics","title":"Metrics","text":"","category":"section"},{"location":"API/metrics/#Metrics.METRICS","page":"Metrics","title":"Metrics.METRICS","text":"All the metrics that supported.\n\n\n\n\n\n","category":"constant"},{"location":"API/metrics/#Metrics.TradesTuple","page":"Metrics","title":"Metrics.TradesTuple","text":"A NamedTuple representing trade data, including date, amount, price, value, fees, fees_base, size, leverage, entryprice, and order.\n\n\n\n\n\n","category":"type"},{"location":"API/metrics/#Metrics._annualize-Tuple{Any, Any}","page":"Metrics","title":"Metrics._annualize","text":"Annualizes a volatility value.\n\n_annualize(v, tf)\n\n\nThis function takes a volatility value v and a timeframe tf as parameters. It multiplies v by the square root of the ratio of the number of days in a year times the period of tf to the period of a day. This effectively converts v from a volatility per tf period to an annual volatility.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._cum_value_balance-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin, Any}","page":"Metrics","title":"Metrics._cum_value_balance","text":"Calculates the cumulative value balance for a MarginInstance.\n\n_cum_value_balance(\n    ai::Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, M} where M<:Misc.WithMargin,\n    df\n) -> Any\n\n\nThis function takes a MarginInstance ai and a DataFrame df as parameters.  It defines a helper function cvb that calculates the value of an order based on various parameters,  and updates some variables (last_lev, last_ep, last_side) with the details of the last non-missing order.\n\nThe function then applies cvb to each order in df, along with the corresponding ai, entryprice, cum_base, leverage, and close values from df. The earned amounts for each order are returned as a vector.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._earned","page":"Metrics","title":"Metrics._earned","text":"Calculates the earned amount in a trade considering entryprice, amount, leverage, price, and fees.\n\n_earned(\n    o,\n    entryprice,\n    amount,\n    leverage,\n    price,\n    value,\n    fees\n) -> Any\n_earned(\n    o,\n    entryprice,\n    amount,\n    leverage,\n    price,\n    value,\n    fees,\n    fees_base\n) -> Any\n\n\nThe function computes the earned amount as the absolute value of the product of entryprice and amount divided by leverage, plus the profit and loss (pnl) calculated from the entryprice, price, amount, and the position side of the order, minus fees.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics._rawcalmar-Tuple{Any}","page":"Metrics","title":"Metrics._rawcalmar","text":"Computes the non-annualized Calmar ratio.\n\n_rawcalmar(returns; tf) -> Any\n\n\nCalculates the Calmar ratio given an array of returns. The ratio is the annual return divided by the maximum drawdown. tf specifies the timeframe for the returns and defaults to one day.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._rawexpectancy-Tuple{Any}","page":"Metrics","title":"Metrics._rawexpectancy","text":"Computes the trading expectancy.\n\n_rawexpectancy(returns) -> Any\n\n\nCalculates the trading expectancy given an array of returns. This is a measure of the mean value of both winning and losing trades. It takes into account both the probability and the average win/loss of trades.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._rawsharpe-Tuple{Any}","page":"Metrics","title":"Metrics._rawsharpe","text":"Computes the non-annualized Sharpe ratio.\n\n_rawsharpe(returns; rfr, tf) -> Any\n\n\nCalculates the Sharpe ratio given an array of returns. The ratio is computed as the excess of the mean return over the risk-free rate rfr, divided by the standard deviation of the returns. tf specifies the timeframe for the returns and defaults to one day.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._rawsortino-Tuple{Any}","page":"Metrics","title":"Metrics._rawsortino","text":"Computes the non-annualized Sortino ratio.\n\n_rawsortino(returns; rfr, tf) -> Any\n\n\nCalculates the Sortino ratio given an array of returns. The ratio is the excess of the mean return over the risk-free rate rfr, divided by the standard deviation of the negative returns. tf specifies the timeframe for the returns and defaults to one day.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._returns_arr-Tuple{Any}","page":"Metrics","title":"Metrics._returns_arr","text":"Calculates the simple returns for an array of prices.\n\n_returns_arr(arr)\n\n\nThis function takes an array of prices arr as a parameter, calculates the differences between successive prices, divides each difference by the corresponding previous price, and returns the resulting array of simple returns. Please note that the first element of the return array would be NaN due to the lack of a previous price for the first element in arr.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._spent-NTuple{8, Any}","page":"Metrics","title":"Metrics._spent","text":"Calculates the spent amount in a trade considering leverage, value and fees.\n\n_spent(\n    _,\n    _,\n    _,\n    leverage,\n    price,\n    value,\n    fees,\n    fees_base\n) -> Any\n\n\nThe function calculates the spent amount as the value divided by leverage plus fees, and returns the negative absolute value of this amount.  An assertion ensures that the calculated value is non-negative before negation.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._tradesdf","page":"Metrics","title":"Metrics._tradesdf","text":"Retrieves trades from an AssetInstance within a specified range and transforms them into a DataFrame.\n\n_tradesdf(\n    ai::Instances.AssetInstance\n) -> Union{Nothing, DataFrames.DataFrame}\n_tradesdf(\n    ai::Instances.AssetInstance,\n    from\n) -> Union{Nothing, DataFrames.DataFrame}\n_tradesdf(\n    ai::Instances.AssetInstance,\n    from,\n    to\n) -> Union{Nothing, DataFrames.DataFrame}\n\n\nThe function retrieves trades within this range and then transforms them into a DataFrame using the _tradesdf() function.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics._tradesdf-Tuple{AbstractVector}","page":"Metrics","title":"Metrics._tradesdf","text":"Transforms an AbstractVector of trades into a DataFrame.\n\n_tradesdf(trades::AbstractVector) -> DataFrames.DataFrame\n\n\nThe function creates an empty DataFrame from TradesTuple and appends the trades. Afterwards, it renames the :date column to :timestamp.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics._valueat","page":"Metrics","title":"Metrics._valueat","text":"Calculates the value of a position at a given timestamp.\n\n_valueat(\n    ai,\n    cum_amount,\n    timestamp,\n    leverage,\n    entryprice,\n    pos,\n    fees\n)\n_valueat(\n    ai,\n    cum_amount,\n    timestamp,\n    leverage,\n    entryprice,\n    pos,\n    fees,\n    fees_base\n)\n\n\nThis function takes a MarginInstance ai, a cum_amount, a timestamp, a leverage, an entryprice, and a position pos as parameters. It first calculates the closing price at the given timestamp, the value of the position based on the cumulative amount and the closing price, and the fees based on this value. It then returns the earned amount based on these values, using the _earned function.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics._valueat-Tuple{Instances.AssetInstance{<:AbstractAsset, <:ExchangeID, NoMargin}, Any, Any, Vararg{Any}}","page":"Metrics","title":"Metrics._valueat","text":"Calculates the value of a position at a given timestamp for a NoMarginInstance.\n\n_valueat(ai, cum_amount, timestamp, args)\n\n\nThis function takes a NoMarginInstance ai, a cum_amount, and a timestamp as parameters, along with any number of additional arguments. It calculates the value of the position as the product of the cumulative amount and the closing price at the given timestamp, and returns this value. Note: For a NoMarginInstance, leverage is not considered, hence the value is directly dependent on the cumulative amount and the closing price.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.applytimeframe!-Tuple{Any, Any}","page":"Metrics","title":"Metrics.applytimeframe!","text":"Applies a given timeframe to the timestamps in a DataFrame.\n\napplytimeframe!(\n    df,\n    tf\n) -> Union{DataFrames.DataFrame, DataFrames.GroupedDataFrame, DataFrames.SubDataFrame}\n\n\nThis function removes the sample column from the DataFrame df and applies the tf timeframe to the timestamp column.  The DataFrame is then returned with the updated timestamps.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.aroundtrades-Tuple{Any, Any}","page":"Metrics","title":"Metrics.aroundtrades","text":"Provides trade data for a given asset instance around a specified timeframe.\n\naroundtrades(ai, tf)\n\n\nIt calculates a start and a stop date based on the dates of the first and last trades in the AssetInstance history and the specified timeframe. It then extracts the OHLCV data for the AssetInstance within this date range, and resamples this data to the specified timeframe. The resultant resampled DataFrame is returned.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.bydate-Tuple{Any, Any, Vararg{Any}}","page":"Metrics","title":"Metrics.bydate","text":"Groups trade data by date and other specified tags.\n\nbydate(\n    data,\n    tf,\n    tags...;\n    sort\n) -> Union{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.GroupedDataFrame{T} where T<:DataFrames.SubDataFrame}\n\n\nThe function converts timestamps in data to a suitable format based on tf and then groups the data by the specified tags and the converted timestamps.  The sort parameter determines whether the resulting grouped data should be sorted or not.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.cagr","page":"Metrics","title":"Metrics.cagr","text":"Computes the Compound Annual Growth Rate (CAGR) for a given strategy.\n\ncagr(s::Strategy) -> Any\ncagr(s::Strategy, prd::Dates.Period) -> Any\ncagr(s::Strategy, prd::Dates.Period, initial) -> Any\ncagr(\n    s::Strategy,\n    prd::Dates.Period,\n    initial,\n    price_func\n) -> Any\n\n\nCalculates the CAGR for a Strategy s over a specified Period prd, defaulting to the period of the strategy's trades. The initial cash amount initial and the pricing function price_func can also be specified.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.calmar","page":"Metrics","title":"Metrics.calmar","text":"Computes the Calmar ratio for a given strategy.\n\ncalmar(s::Strategy) -> Any\ncalmar(s::Strategy, tf) -> Any\n\n\nCalculates the Calmar ratio for a Strategy s over a specified timeframe tf, defaulting to one day.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.entryexit-Tuple{Any}","page":"Metrics","title":"Metrics.entryexit","text":"Counts the number of entries and exits in a trade.\n\nentryexit(\n    g\n) -> NamedTuple{(:entries, :exits), <:Tuple{Any, Any}}\n\n\nThe function takes a trade as input, counts the number of entries (negative values) and exits (positive values) and returns a tuple with these counts.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.expand","page":"Metrics","title":"Metrics.expand","text":"Expands a DataFrame to include all timestamps in a range.\n\nexpand(df) -> Any\nexpand(df, tf) -> Any\n\n\nThis function takes a DataFrame df and an optional timeframe tf (which defaults to the timeframe of df). It creates a new DataFrame that includes all timestamps within the range of df and the given timeframe, and then joins this new DataFrame with df using an outer join on the timestamp column. The resulting DataFrame is then sorted by timestamp.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.expectancy","page":"Metrics","title":"Metrics.expectancy","text":"Computes the trading expectancy for a given strategy.\n\nexpectancy(s::Strategy) -> Any\nexpectancy(s::Strategy, tf) -> Any\n\n\nCalculates the trading expectancy for a Strategy s over a specified timeframe tf, defaulting to one day.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.ffill!","page":"Metrics","title":"Metrics.ffill!","text":"Forward fills missing values in a vector.\n\nffill!(v)\nffill!(v, out)\n\n\nThis function takes a vector v and an optional output vector out (which defaults to v itself). It starts with the first value in v (which must not be missing) and applies the coalesce function to each subsequent pair of values in v and out. The coalesce function replaces each missing value in v with the corresponding value from out. The function then returns out with the filled missing values. This is effectively a forward fill operation, carrying the most recent non-missing value forward to replace missing values.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.isincreaseorder-Tuple{O} where O<:(OrderTypes.IncreaseOrder)","page":"Metrics","title":"Metrics.isincreaseorder","text":"Checks if an Order is an IncreaseOrder.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.isreduceorder-Tuple{O} where O<:(OrderTypes.ReduceOrder)","page":"Metrics","title":"Metrics.isreduceorder","text":"Checks if an Order is a ReduceOrder.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.maxdd-Tuple{Any}","page":"Metrics","title":"Metrics.maxdd","text":"Computes the maximum drawdown for a series of returns.\n\nmaxdd(\n    returns\n) -> NamedTuple{(:dd, :ath, :cum_returns), <:Tuple{Any, Any, Any}}\n\n\nCalculates the maximum drawdown given an array of returns. The drawdown is the largest percentage drop in the cumulative product of 1 plus the returns.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.multi-Tuple{Strategy, Vararg{Symbol}}","page":"Metrics","title":"Metrics.multi","text":"Returns a dict of calculated metrics for a given strategy.\n\nmulti(\n    s::Strategy,\n    metrics::Symbol...;\n    tf,\n    normalize,\n    norm_max\n) -> Union{Dict, Vector}\n\n\nFor a Strategy s, calculates specified metrics over a specified timeframe tf, defaulting to one day. If normalize is true, the metrics are normalized with respect to norm_max.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.normalize_metric","page":"Metrics","title":"Metrics.normalize_metric","text":"Normalize a metric. Based on the value of max. \n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.resample_trades","page":"Metrics","title":"Metrics.resample_trades","text":"Aggregates all trades of a strategy in a single dataframe\n\nresample_trades(s::Strategy; ...) -> Any\nresample_trades(\n    s::Strategy,\n    tf;\n    style,\n    byinstance,\n    custom,\n    expand_dates\n) -> Any\n\n\nbyinstance: (trades_df, ai) -> nothing can modify the dataframe of a single instance before it is appended to the full df. style: :full or :minimal specifies what columns should be aggregated in the resampled df custom: similar to style but instead allows you to define custom aggregation rules (according to DataFrame) expand_dates: returns a contiguous dataframe from the first trade date to the last (inserting default ohlcv rows where no trades have happened.)\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.resample_trades-Tuple{Instances.AssetInstance, Any}","page":"Metrics","title":"Metrics.resample_trades","text":"Resamples trades data from a smaller to a higher timeframe.\n\nresample_trades(\n    ai::Instances.AssetInstance,\n    to_tf;\n    style,\n    custom\n) -> Union{DataFrames.DataFrame, DataFrames.GroupedDataFrame, DataFrames.SubDataFrame}\n\n\nThis function takes an AssetInstance and a target timeframe to_tf as parameters, as well as optional style and custom parameters for additional customization. It extracts the trades data from the AssetInstance and resamples it to the target timeframe.  Volume adjustments are made based on the margin mode of the AssetInstance. The data is then grouped by date, transformed according to the margin mode, style, and custom parameters, and combined into a new DataFrame.  Finally, the target timeframe is applied to the timestamps in the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.sharpe","page":"Metrics","title":"Metrics.sharpe","text":"Computes the Sharpe ratio for a given strategy.\n\nsharpe(s::Strategy; ...) -> Any\nsharpe(s::Strategy, tf; rfr) -> Any\n\n\nCalculates the Sharpe ratio for a Strategy s over a specified timeframe tf, defaulting to one day. The risk-free rate rfr can be specified, and defaults to 0.0.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.sortino","page":"Metrics","title":"Metrics.sortino","text":"Computes the Sortino ratio for a given strategy.\n\nsortino(s::Strategy; ...) -> Any\nsortino(s::Strategy, tf; rfr) -> Any\n\n\nCalculates the Sortino ratio for a Strategy s over a specified timeframe tf, defaulting to one day. The risk-free rate rfr can be specified, and defaults to 0.0.\n\n\n\n\n\n","category":"function"},{"location":"API/metrics/#Metrics.trades_balance-Tuple{Instances.AssetInstance}","page":"Metrics","title":"Metrics.trades_balance","text":"Replays the trade history of a single asset instance.\n\ntrades_balance(\n    ai::Instances.AssetInstance;\n    tf,\n    return_all,\n    df,\n    initial_cash\n) -> Any\n\n\nreturn_all: if true returns a dataframe where:\n\nbase/quote_balance the volume generated by the trades that happened at that timestamp.\n:cum_total represents the total balance held for each timestamp.\n:cum_value_balance represents the value in quote currency of the asset for each timestamp.\n\nwarning: For single assets only\nIf your strategy trades multiple assets the profits returned by this function won't match the strategy actual holdings since calculation are done only w.r.t this single asset.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_balance-Tuple{Strategy}","page":"Metrics","title":"Metrics.trades_balance","text":"Plots the trade history for all the assets in a strategy.\n\ntrades_balance(s; tf, return_all, byasset, kwargs...)\n\n\nreturn_all[true]: similar to the function for single assets, plus:\n\ncum_quote: the balance of cash for each timestamp\ncum_value_balance: the balance of all held assets in quote currency for each timestamp.\n\nbyasset[false]: also return a column that tracks the value balance by asset for each timestamp normalize_timeframes:\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_duration-Tuple{Instances.AssetInstance}","page":"Metrics","title":"Metrics.trades_duration","text":"Computes the average duration of trades for an asset instance.\n\ntrades_duration(ai::Instances.AssetInstance; raw, f) -> Any\n\n\nCalculates the average duration between trades for an AssetInstance ai. The raw parameter determines whether the result should be in raw format (in milliseconds) or a compact time format. The function f is used to aggregate the durations and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_duration-Tuple{Strategy}","page":"Metrics","title":"Metrics.trades_duration","text":"Computes the average duration of trades for a strategy.\n\ntrades_duration(s::Strategy; f) -> Any\n\n\nCalculates the average duration between trades for a Strategy s. The function f is used to aggregate the durations and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_hour-Tuple{Instances.AssetInstance}","page":"Metrics","title":"Metrics.trades_hour","text":"Computes the average hour of trades for an asset instance.\n\ntrades_hour(ai::Instances.AssetInstance; f) -> Any\n\n\nCalculates the average hour of trades for an AssetInstance ai. The function f is used to aggregate the hours and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_leverage-Tuple{Instances.AssetInstance}","page":"Metrics","title":"Metrics.trades_leverage","text":"Computes the average leverage for trades of an asset instance.\n\ntrades_leverage(ai::Instances.AssetInstance; f) -> Any\n\n\nCalculates the average leverage of trades for an AssetInstance ai. The function f is used to aggregate the leverages and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_monthday-Tuple{Instances.AssetInstance}","page":"Metrics","title":"Metrics.trades_monthday","text":"Computes the average day of the month for trades of an asset instance.\n\ntrades_monthday(ai::Instances.AssetInstance; f) -> Any\n\n\nCalculates the average day of the month for trades for an AssetInstance ai. The function f is used to aggregate the days and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_size-Tuple{Instances.AssetInstance}","page":"Metrics","title":"Metrics.trades_size","text":"Computes the average trade size for an asset instance.\n\ntrades_size(ai::Instances.AssetInstance; f) -> Any\n\n\nCalculates the average size of trades for an AssetInstance ai. The function f is used to aggregate the sizes and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_size-Tuple{Strategy}","page":"Metrics","title":"Metrics.trades_size","text":"Computes the average trade size for a strategy.\n\ntrades_size(s::Strategy; f) -> Any\n\n\nCalculates the average size of trades for a Strategy s. The function f is used to aggregate the sizes and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.trades_weekday-Tuple{Instances.AssetInstance}","page":"Metrics","title":"Metrics.trades_weekday","text":"Computes the average weekday of trades for an asset instance.\n\ntrades_weekday(ai::Instances.AssetInstance; f) -> Any\n\n\nCalculates the average weekday of trades for an AssetInstance ai. The function f is used to aggregate the weekdays and defaults to the mean.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.tradesvolume!-Tuple{Misc.WithMargin, Any}","page":"Metrics","title":"Metrics.tradesvolume!","text":"Entries subtract quote currency, Exits subtract base currency.\n\ntradesvolume!(_::Misc.WithMargin, data) -> Any\n\n\nThis function adjusts the volume of trades in the WithMargin mode.  It assigns size to quote_volume and amount to base_volume in the data.  It then modifies these volumes based on whether each order in data is an increase order or not.  For non-increase orders, base_volume is made non-positive and quote_volume is made non-negative.  For increase orders, base_volume is made non-negative and quote_volume is made non-positive.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.tradesvolume!-Tuple{NoMargin, Any}","page":"Metrics","title":"Metrics.tradesvolume!","text":"Buys subtract quote currency, while sells subtract base currency.\n\ntradesvolume!(_::NoMargin, data)\n\n\nThis function adjusts the volume of trades in the NoMargin mode. It assigns size to quote_volume and amount to base_volume in the data. In debug mode, it asserts that all sell orders have non-positive base volume and non-negative quote volume, and all buy orders have non-negative base volume and non-positive quote volume.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.transforms-Tuple{Misc.MarginMode, Any, Any}","page":"Metrics","title":"Metrics.transforms","text":"Applies custom transformations based on margin mode, style, and custom parameters.\n\ntransforms(m::Misc.MarginMode, style, custom) -> Vector{Any}\n\n\nDepending on the provided MarginMode, style and custom parameters, this function applies different transformations to the data. The customization allows for flexibility in data processing and analysis.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.zeromissing!-Tuple{Any}","page":"Metrics","title":"Metrics.zeromissing!","text":"Replaces missing values in a vector with 0.0.\n\nzeromissing!(v)\n\n\nThis function iterates over each index of the vector v.  If the value at a given index is missing, it replaces it with 0.0.  The vector v is then returned with the replaced values.\n\n\n\n\n\n","category":"method"},{"location":"API/metrics/#Metrics.@balance_arr-Tuple{}","page":"Metrics","title":"Metrics.@balance_arr","text":"Generates code to calculate the cumulative total balance for a given set of trades over a given timeframe.\n\nThis macro generates code that calculates the cumulative total balance for a given set of trades s over a given timeframe tf. It first gets a DataFrame of balances for s and tf using the trades_balance function. If this DataFrame is nothing (which means there are no trades), it immediately returns -Inf. Otherwise, it extracts the cum_total column from the DataFrame, which represents the cumulative total balance, and assigns this to balance. The generated code is then returned.\n\n\n\n\n\n","category":"macro"},{"location":"API/python/#Python","page":"Python Integration","title":"Python","text":"","category":"section"},{"location":"API/python/","page":"Python Integration","title":"Python Integration","text":"Provides python bindings, some helper functions and async management.","category":"page"},{"location":"API/python/#Python.Python","page":"Python Integration","title":"Python.Python","text":"Defines the Python module which sets up the Python interpreter and imports required modules and constants.\n\n\n\n\n\n","category":"module"},{"location":"API/python/#Python.CALLBACKS","page":"Python Integration","title":"Python.CALLBACKS","text":"An array of callback functions.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python.PYMODPATHS","page":"Python Integration","title":"Python.PYMODPATHS","text":"An array of Python module paths.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python.PYTHONPATH","page":"Python Integration","title":"Python.PYTHONPATH","text":"The Python module search path.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python.PY_V","page":"Python Integration","title":"Python.PY_V","text":"The Python version.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python._INITIALIZED","page":"Python Integration","title":"Python._INITIALIZED","text":"This constant indicates whether the Python runtime has been initialized. It is used to delay initialization until the first Python call.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python.pyCached","page":"Python Integration","title":"Python.pyCached","text":"A dictionary for caching Python objects.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python.pyisvalue_func","page":"Python Integration","title":"Python.pyisvalue_func","text":"A Python object used for checking if a value is a Python object.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python.pytryfloat","page":"Python Integration","title":"Python.pytryfloat","text":"A Python object used for converting values to float.\n\n\n\n\n\n","category":"constant"},{"location":"API/python/#Python.PythonAsync","page":"Python Integration","title":"Python.PythonAsync","text":"A structure for handling Python's asynchronous operations.\n\npyaio\npythreads\npyloop\npycoro_type\nglobs\nstart_func\ntask\ntask_running\n\nThis structure is used to manage Python's asynchronous operations. It contains fields for Python's asyncio, threads, event loop, coroutine type, global variables, start function, and task status.\n\n\n\n\n\n","category":"type"},{"location":"API/python/#PythonCall.PyDict-Tuple{Pair}","page":"Python Integration","title":"PythonCall.PyDict","text":"PyDict(p::Pair)\n\nCreate a Python dictionary from a pair.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Base.copyto!-Tuple{Python.PythonAsync, Python.PythonAsync}","page":"Python Integration","title":"Base.copyto!","text":"Copies a python async structures.\n\ncopyto!(\n    pa_to::Python.PythonAsync,\n    pa_from::Python.PythonAsync\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.__pyfetch-Tuple{Py, Val{:try}, Vararg{Any}}","page":"Python Integration","title":"Python.__pyfetch","text":"Fetches the result of a Python function call synchronously and returns an exception if any.\n\n__pyfetch(f::Py, ::Val{:try}, args...; kwargs...) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.__pyfetch-Tuple{Py, Vararg{Any}}","page":"Python Integration","title":"Python.__pyfetch","text":"Fetches the result of a Python function call synchronously.\n\n__pyfetch(f::Py, args...; kwargs...) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python._async_init-Tuple{Python.PythonAsync}","page":"Python Integration","title":"Python._async_init","text":"Initialized a PythonAsync structure (which holds a reference to the event loop.)\n\n_async_init(pa::Python.PythonAsync)\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python._isfutdone-Tuple{Py}","page":"Python Integration","title":"Python._isfutdone","text":"Checks if a Python future is done.\n\n_isfutdone(fut::Py) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python._pyfetch-Tuple{Function, Vararg{Any}}","page":"Python Integration","title":"Python._pyfetch","text":"Fetches the result of a Julia function call synchronously.\n\n_pyfetch(f::Function, args...; kwargs...) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python._pyfetch_timeout-Tuple{Py, Union{Function, Py}, Dates.Period, Vararg{Any}}","page":"Python Integration","title":"Python._pyfetch_timeout","text":"Fetches the result of a Python function call synchronously with a timeout. If the timeout is reached, it calls another function and returns its result.\n\n_pyfetch_timeout(\n    f1::Py,\n    f2::Union{Function, Py},\n    timeout::Dates.Period,\n    args...;\n    kwargs...\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.async_start_runner_func!-Tuple{Any}","page":"Python Integration","title":"Python.async_start_runner_func!","text":"Main async loop function, sleeps indefinitely and closes loop on exception.\n\nasync_start_runner_func!(pa) -> Py\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.clearpypath!-Tuple{}","page":"Python Integration","title":"Python.clearpypath!","text":"Remove wrong python version libraries dirs from python loading path.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.isdict-Tuple{Any}","page":"Python Integration","title":"Python.isdict","text":"Test whether a Python object is a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.isinitialized_async-Tuple{Python.PythonAsync}","page":"Python Integration","title":"Python.isinitialized_async","text":"Checks if python async state (event loop) is initialized.\n\nisinitialized_async(pa::Python.PythonAsync) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.islist-Tuple{Any}","page":"Python Integration","title":"Python.islist","text":"Test whether a Python object is a list.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.py_except_name-Tuple{PyException}","page":"Python Integration","title":"Python.py_except_name","text":"py_except_name(e::PyException)\n\nGet the name of a Python exception.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.py_start_loop","page":"Python Integration","title":"Python.py_start_loop","text":"Starts a python event loop, updating pa.\n\npy_start_loop()\npy_start_loop(pa::Python.PythonAsync)\n\n\n\n\n\n\n","category":"function"},{"location":"API/python/#Python.pycancel","page":"Python Integration","title":"Python.pycancel","text":"Cancels a Python future.\n\npycancel(fut::Py) -> Bool\npycancel(fut::Py, ::Bool) -> Bool\n\n\n\n\n\n\n","category":"function"},{"location":"API/python/#Python.pydicthash-Tuple{Any}","page":"Python Integration","title":"Python.pydicthash","text":"pydicthash(d)\n\nCalculate the hash of a Python dictionary.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pyisnonzero-Tuple{Py}","page":"Python Integration","title":"Python.pyisnonzero","text":"pyisnonzero(v::Py)::Bool\n\nCheck if a Python value is nonzero.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pylist_to_matrix-Tuple{Py}","page":"Python Integration","title":"Python.pylist_to_matrix","text":"pylist_to_matrix(data::Py)\n\nConvert a Python list to a Julia matrix.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pyloop_stop_fn-Tuple{}","page":"Python Integration","title":"Python.pyloop_stop_fn","text":"Generates a function that terminates the python even loop.\n\npyloop_stop_fn() -> Python.var\"#fn#pyloop_stop_fn##0\"\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pyschedule-Tuple{Py}","page":"Python Integration","title":"Python.pyschedule","text":"Schedules a Python coroutine to run on the event loop.\n\npyschedule(coro::Py) -> Py\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pytask-Tuple{Py, Vararg{Any}}","page":"Python Integration","title":"Python.pytask","text":"Creates a Julia task from a Python function call and runs it asynchronously.\n\npytask(f::Py, args...; kwargs...) -> Task\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pytask-Tuple{Py}","page":"Python Integration","title":"Python.pytask","text":"Creates a Julia task from a Python coroutine and returns the Python future and the Julia task.\n\npytask(coro::Py) -> Task\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pytofloat-Union{Tuple{T}, Tuple{Py, T}} where T<:Number","page":"Python Integration","title":"Python.pytofloat","text":"pytofloat(v::Py, def::T)::T where {T<:Number}\n\nConvert a Python value to a Julia float, with a default value.\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.pywait_fut-Tuple{Py}","page":"Python Integration","title":"Python.pywait_fut","text":"Waits for a Python future to be done.\n\npywait_fut(fut::Py) -> Union{Nothing, Py}\n\n\n\n\n\n\n","category":"method"},{"location":"API/python/#Python.@pymodule","page":"Python Integration","title":"Python.@pymodule","text":"Import a python module over a variable defined in global scope.\n\n\n\n\n\n","category":"macro"},{"location":"API/python/#Python.@pystr","page":"Python Integration","title":"Python.@pystr","text":"@pystr(k, v=nothing)\n\nConvert a Julia value to a Python string representation.\n\n\n\n\n\n","category":"macro"},{"location":"reference/#Reference-Documentation","page":"Reference Documentation","title":"Reference Documentation","text":"","category":"section"},{"location":"reference/","page":"Reference Documentation","title":"Reference Documentation","text":"Complete reference documentation for Planar APIs, configuration, and types.","category":"page"},{"location":"reference/#Sections","page":"Reference Documentation","title":"Sections","text":"","category":"section"},{"location":"reference/","page":"Reference Documentation","title":"Reference Documentation","text":"API Documentation - Complete function reference\nconfiguration - All configuration options\nTypes - Type system reference\nExamples - Code examples library","category":"page"},{"location":"reference/#Quick-Links","page":"Reference Documentation","title":"Quick Links","text":"","category":"section"},{"location":"reference/","page":"Reference Documentation","title":"Reference Documentation","text":"Core API - Essential functions\nStrategy API - Strategy development\nExchange API - Exchange integration\nData API - Data management","category":"page"},{"location":"reference/#See-Also","page":"Reference Documentation","title":"See Also","text":"","category":"section"},{"location":"reference/","page":"Reference Documentation","title":"Reference Documentation","text":" - Complete API documentation\nStrategy Development - Learn to use the APIs\n - API troubleshooting\nExchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOptimization - Performance optimization techniques","category":"page"},{"location":"reference/#Usage","page":"Reference Documentation","title":"Usage","text":"","category":"section"},{"location":"reference/","page":"Reference Documentation","title":"Reference Documentation","text":"This reference is designed for quick lookup of specific functions and their parameters. For learning-oriented content, see the Development Guides.","category":"page"},{"location":"disambiguation/#Glossary-and-Disambiguation","page":"Glossary","title":"Glossary and Disambiguation","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"This glossary defines key terms and concepts used throughout Planar documentation and codebase.","category":"page"},{"location":"disambiguation/#Core-Concepts","page":"Glossary","title":"Core Concepts","text":"","category":"section"},{"location":"disambiguation/#Trading-Terms","page":"Glossary","title":"Trading Terms","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Asset : A structure created from parsing a symbol, typically representing an Asset, Derivative, or AssetInstance. Variables representing asset instances are often named ai, while simple assets are named a or aa (for AbstractAsset).","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Symbol (sym) : Though Symbol is a built-in Julia type, in trading contexts it often denotes the pairing of a base currency with a quote currency. Commonly refers to a Symbol for single currencies and a String for currency pairs.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Pair : A String in the format \"BASE/QUOTE\" where the slash separates the base and quote currencies (e.g., \"BTC/USDT\").","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Base Currency (bc) / Quote Currency (qc) : Base currency (bc) is the asset being traded; quote currency (qc) is the currency used to price the base. Both are Symbol types corresponding to AbstractAsset fields.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Amount : The quantity of the base currency. For example, purchasing 100 USD worth of BTC at 1000 USD per BTC results in an amount of 0.1 BTC.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Price : The cost of one unit of base currency quoted in the quote currency. If BTC price is 1000 USD, then 1 BTC = 1000 USD.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Size : The quantity of quote currency used to execute a trade, inclusive of fees.","category":"page"},{"location":"disambiguation/#Position-and-Order-Terms","page":"Glossary","title":"Position and Order Terms","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Long/Short : Used exclusively in margin trading contexts. \"Long\" indicates betting on price increase; \"short\" indicates betting on price decrease.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Side/Position : \"Side\" refers to trade direction (\"buy\" or \"sell\"). \"Position\" refers to market exposure (\"long\" or \"short\"). A trade's side is buy/sell; its position is long/short.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Margin : Trading with borrowed funds to increase position size. Planar supports NoMargin (spot), Isolated (position-specific margin), and Cross (shared margin) modes.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Leverage : The ratio of position size to margin. Higher leverage amplifies both profits and losses.","category":"page"},{"location":"disambiguation/#Data-and-Market-Terms","page":"Glossary","title":"Data and Market Terms","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"OHLCV : Open, High, Low, Close, Volume - standard candlestick data format. Usually refers to a DataFrame containing this market data.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Candle : A single OHLCV data point, can be a DataFrame row, named tuple, or Candle structure.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Timeframe : The duration each candle represents (e.g., tf\"1m\" for 1-minute candles, tf\"1h\" for hourly).","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Pairdata : A complex data structure associating a DataFrame, Zarr array, and trading pair.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Resample : Converting data between timeframes, usually downsampling (e.g., 1m → 1h) as upsampling is rarely beneficial.","category":"page"},{"location":"disambiguation/#Exchange-and-Infrastructure-Terms","page":"Glossary","title":"Exchange and Infrastructure Terms","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Exchange (exc) : Can refer to an Exchange instance, ExchangeID, or the Symbol of an exchanges ID. A global exc variable is defined in ExchangeTypes for REPL convenience.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Sandbox : Exchange-provided \"testnet\" for API testing. Distinct from paper trading - sandbox uses test APIs, paper trading uses live data with simulated execution.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Instance : Typically implies an AssetInstance - the combination of an asset and exchanges.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Futures/Swap/Perps : Swaps are perpetual futures contracts. Following CCXT conventions: swaps use \"BASE/QUOTE:SETTLE\" format, futures include expiry as \"BASE/QUOTE:SETTLE-EXPIRY\".","category":"page"},{"location":"disambiguation/#Planar-Specific-Terms","page":"Glossary","title":"Planar-Specific Terms","text":"","category":"section"},{"location":"disambiguation/#Strategy-System","page":"Glossary","title":"Strategy System","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Strategy : A Julia module implementing trading logic through the call! dispatch system. Parameterized by execution mode, exchange, margin type, and quote currency.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Dispatch : Julia's multiple dispatch system used throughout Planar for customization. Methods are selected based on argument types.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Call! Function : The primary interface for strategy logic. Different method signatures handle different events (execution, loading, optimization, etc.).","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Strategy Environment : Macros like @strategyenv!, @contractsenv!, and @optenv! that import required types and functions into strategy modules.","category":"page"},{"location":"disambiguation/#Execution-Modes","page":"Glossary","title":"Execution Modes","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Sim Mode : Backtesting mode using historical data. Fast execution with simplified order simulation.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Paper Mode : Real-time simulation using live market data but no actual trades. Tests strategy logic with realistic market conditions.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Live Mode : Real trading with actual capital and exchange APIs. Includes full risk management and monitoring.","category":"page"},{"location":"disambiguation/#Data-System","page":"Glossary","title":"Data System","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Zarr : Columnar storage format used for OHLCV data. Supports compression and chunked access for large datasets.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"LMDB : Lightning Memory-Mapped Database used as the default storage backend for Zarr arrays.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"ZarrInstance : Wrapper around Zarr storage providing the data access interface. Global instance available at Data.zi[].","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Scraper : Module for downloading historical data archives from exchanges (currently Binance and Bybit).","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Fetch : Module for downloading data directly from exchange APIs using CCXT.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Watcher : Real-time data monitoring system that continuously collects and stores live market data.","category":"page"},{"location":"disambiguation/#Optimization-and-Analysis","page":"Glossary","title":"Optimization and Analysis","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"OptSession : Structure managing optimization parameters, configuration, and results. Can be saved and reloaded.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Grid Search : Optimization method testing all combinations of parameter values.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Bayesian Optimization : Advanced optimization using probabilistic models to efficiently explore parameter space.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Objective Function : Function returning a score to maximize during optimization (e.g., Sharpe ratio, profit).","category":"page"},{"location":"disambiguation/#Visualization","page":"Glossary","title":"Visualization","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Balloons : Planar's signature trade visualization showing entry/exit points on price charts.","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Backend : Graphics system for plotting (GLMakie for desktop, WGLMakie for web).","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Interactive Plots : Charts with zoom, pan, and hover capabilities for detailed analysis.","category":"page"},{"location":"disambiguation/#Variable-Naming-Conventions","page":"Glossary","title":"Variable Naming Conventions","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Common Variable Names","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"s - Strategy instance\nai - AssetInstance\nexc - Exchange\nts - Timestamp\nats - Available timestamp (validated for data availability)\nctx - Context object\ncfg - Configuration object","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Type Abbreviations","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"SC - Strategy type with generic exchange parameter\nS - Complete strategy type with all parameters\nAI - AssetInstance type\nTF - TimeFrame type","category":"page"},{"location":"disambiguation/#File-and-Directory-Conventions","page":"Glossary","title":"File and Directory Conventions","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Strategy Locations","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Single file: user/[strategies](guides/../guides/strategy-development.md)/StrategyName.jl\nProject: user/[strategies](guides/../guides/strategy-development.md)/StrategyName/src/StrategyName.jl","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Configuration Files","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Main config: user/[planar.toml](config.md#configuration)-file)\nSecrets: user/[secrets.toml](config.md#secrets-management)\nStrategy config: user/[strategies](guides/../guides/strategy-development.md)/StrategyName/Project.toml","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Data Storage","category":"page"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"LMDB files: user/data.mdb, user/lock.mdb\nLogs: user/logs/","category":"page"},{"location":"disambiguation/#See-Also","page":"Glossary","title":"See Also","text":"","category":"section"},{"location":"disambiguation/","page":"Glossary","title":"Glossary","text":"Strategy Development - Learn strategy concepts in detail\nData Management - Understand data storage and access\nAPI Reference - Complete function documentation\nDocumentation Index - Find specific topics quickly","category":"page"},{"location":"common-patterns/#Common-Code-Patterns","page":"Common Code Patterns","title":"Common Code Patterns","text":"","category":"section"},{"location":"common-patterns/","page":"Common Code Patterns","title":"Common Code Patterns","text":"Since we've reduced code blocks dramatically, here are common patterns explained:","category":"page"},{"location":"common-patterns/#Basic-Module-Loading","page":"Common Code Patterns","title":"Basic Module Loading","text":"","category":"section"},{"location":"common-patterns/","page":"Common Code Patterns","title":"Common Code Patterns","text":"Use: using Planar followed by @environment! to load the framework.","category":"page"},{"location":"common-patterns/#Strategy-Creation","page":"Common Code Patterns","title":"Strategy Creation","text":"","category":"section"},{"location":"common-patterns/","page":"Common Code Patterns","title":"Common Code Patterns","text":"Strategies are typically defined as modules with required functions like setup!() and next!().","category":"page"},{"location":"common-patterns/#Configuration","page":"Common Code Patterns","title":"Configuration","text":"","category":"section"},{"location":"common-patterns/","page":"Common Code Patterns","title":"Common Code Patterns","text":"Configuration is handled through TOML files in the user directory, typically user/planar.toml.","category":"page"},{"location":"common-patterns/#Error-Handling","page":"Common Code Patterns","title":"Error Handling","text":"","category":"section"},{"location":"common-patterns/","page":"Common Code Patterns","title":"Common Code Patterns","text":"Most functions return results that should be checked. Use try-catch blocks for robust error handling.","category":"page"},{"location":"common-patterns/#Data-Access","page":"Common Code Patterns","title":"Data Access","text":"","category":"section"},{"location":"common-patterns/","page":"Common Code Patterns","title":"Common Code Patterns","text":"Data is accessed through the Data module with functions for OHLCV retrieval and storage.","category":"page"},{"location":"common-patterns/#Exchange-Integration","page":"Common Code Patterns","title":"Exchange Integration","text":"","category":"section"},{"location":"common-patterns/","page":"Common Code Patterns","title":"Common Code Patterns","text":"Exchanges are configured in your TOML file and accessed through the exchange management system.","category":"page"},{"location":"troubleshooting/strategy-problems/#Troubleshooting:-Strategy-Development-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"This guide covers common problems encountered during strategy development, testing, and execution.","category":"page"},{"location":"troubleshooting/strategy-problems/#Quick-Diagnostics","page":"Troubleshooting: Strategy Development Issues","title":"Quick Diagnostics","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Check Strategy Loading - Verify strategy can be loaded without errors\nValidate Configuration - Ensure strategy is properly configured in user/planar.toml\nTest Data Access - Verify market data is available and accessible","category":"page"},{"location":"troubleshooting/strategy-problems/#Strategy-Loading-and-Compilation-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Strategy Loading and Compilation Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/#Strategy-Not-Found","page":"Troubleshooting: Strategy Development Issues","title":"Strategy Not Found","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"\"Strategy not found\" errors\nModule loading failures\nPath resolution issues","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Incorrect strategy configuration or file structure.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Verification:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n    \n    # Test strategy loading\n    println(\"Testing strategy loading...\")\n    \n    # Example strategy loading (requires actual strategy file)\n    # strategy = load_strategy(:MyStrategy)\n    \n    # For demonstration purposes:\n    println(\"Strategy loading test:\")\n    println(\"✓ Planar environment loaded\")\n    println(\"✓ Ready to load strategies\")\n    \n    # Real usage would be:\n    # try\n    #     strategy = load_strategy(:MyStrategy)\n    #     @info \"Strategy loaded successfully\"\n    # catch e\n    #     @error \"Strategy loading failed\" exception=e\n    # end\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"troubleshooting/strategy-problems/#Compilation-Errors","page":"Troubleshooting: Strategy Development Issues","title":"Compilation Errors","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Syntax errors during strategy loading\nMissing function definitions\nType-related compilation failures","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Syntax errors, missing dependencies, or incorrect function signatures.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Advanced Debugging:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    using Logging\n    @environment!\n    \n    # Enable detailed compilation logging\n    ENV[\"JULIA_DEBUG\"] = \"MyStrategy\"\n    global_logger(ConsoleLogger(stderr, Logging.Debug))\n    \n    println(\"Debug logging enabled for strategy compilation\")\n    \n    # Test individual components (example)\n    # Real usage: include(\"user/strategies/MyStrategy/src/MyStrategy.jl\")\n    println(\"Strategy file would be loaded for debugging\")\n    println(\"Check console for detailed compilation messages\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"troubleshooting/strategy-problems/#Module-Interface-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Module Interface Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"\"Method not defined\" errors\nInterface compliance failures\nMissing required functions","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Strategy doesn't implement required interface methods.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/#Strategy-Execution-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Strategy Execution Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/#Runtime-Errors-During-Execution","page":"Troubleshooting: Strategy Development Issues","title":"Runtime Errors During Execution","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Errors during backtesting or live execution\nUnexpected behavior or results\nData access failures","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Logic errors, data dependencies, or timing issues.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    using Logging\n    using Dates\n    @environment!\n    \n    # Step 1: Enable detailed logging\n    ENV[\"JULIA_DEBUG\"] = \"MyStrategy\"\n    global_logger(ConsoleLogger(stderr, Logging.Debug))\n    \n    println(\"Debugging strategy execution issues...\")\n    \n    # Step 2: Test strategy components individually (example)\n    # Real usage: strategy = load_strategy(:MyStrategy)\n    \n    # Test data access (example)\n    println(\"Testing data access...\")\n    # Real usage would be:\n    # try\n    #     data = get_market_data(strategy)\n    #     @info \"Data access successful\" size=size(data)\n    # catch e\n    #     @error \"Data access failed\" exception=e\n    # end\n    \n    # Test signal generation (example)\n    println(\"Testing signal generation...\")\n    # Real usage would be:\n    # try\n    #     signals = generate_signals(strategy, data, now())\n    #     @info \"Signal generation successful\" signals\n    # catch e\n    #     @error \"Signal generation failed\" exception=e\n    # end\n    \n    # Step 3: Use simulation mode for debugging (example)\n    println(\"Testing simulation mode...\")\n    # Real usage would be:\n    # try\n    #     using SimMode\n    #     sim = SimMode.Simulator(strategy)\n    #     result = SimMode.run!(sim, start_date, end_date)\n    #     @info \"Simulation successful\"\n    # catch e\n    #     @error \"Simulation failed\" exception=e\n    # end\n    \n    println(\"Strategy debugging setup complete\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"troubleshooting/strategy-problems/#Data-Access-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Data Access Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"\"No data available\" errors\nInconsistent data quality\nMissing timeframes or symbols","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Data not fetched, incorrect timeframes, or exchange connectivity issues.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/#Signal-Generation-Problems","page":"Troubleshooting: Strategy Development Issues","title":"Signal Generation Problems","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"No signals generated\nIncorrect signal timing\nSignal validation failures","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Logic errors in signal generation, incorrect data handling, or parameter issues.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# Debug signal generation step by step\nfunction debug_signal_generation(strategy, data)\n    @debug \"Starting signal generation\" data_size=nrow(data)\n    \n    # Check input data\n    if nrow(data) == 0\n        @error \"No data provided for signal generation\"\n        return nothing\n    end\n    \n    # Check for required columns\n    required_cols = [:timestamp, :open, :high, :low, :close, :volume]\n    missing_cols = setdiff(required_cols, names(data))\n    if !isempty(missing_cols)\n        @error \"Missing required columns\" missing=missing_cols\n        return nothing\n    end\n    \n    # Generate signals with error handling\n    try\n        signals = []\n        for (i, row) in enumerate(eachrow(data))\n            @debug \"Processing row $i\" timestamp=row.timestamp\n            \n            signal = compute_signal_for_row(strategy, row, data[1:i, :])\n            push!(signals, signal)\n            \n            @debug \"Generated signal\" signal=signal\n        end\n        \n        return signals\n    catch e\n        @error \"Signal generation failed at processing\" exception=e\n        return nothing\n    end\nend\n\n# Test with your strategy\nsignals = debug_signal_generation(strategy, sample_data)","category":"page"},{"location":"troubleshooting/strategy-problems/#Order-Execution-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Order Execution Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/#Orders-Not-Executing","page":"Troubleshooting: Strategy Development Issues","title":"Orders Not Executing","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Orders placed but not filled\n\"Insufficient balance\" errors\nOrder rejection messages","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Balance issues, incorrect order parameters, or exchange connectivity problems.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/#Position-Management-Errors","page":"Troubleshooting: Strategy Development Issues","title":"Position Management Errors","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Incorrect position sizes\nPosition tracking inconsistencies\nMargin calculation errors","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Position sizing logic errors, margin miscalculations, or state management issues.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# Debug position management\nmutable struct PositionTracker\n    positions::Dict{String, Float64}\n    balances::Dict{String, Float64}\n    margin_used::Float64\n    \n    PositionTracker() = new(Dict(), Dict(), 0.0)\nend\n\nfunction debug_position_management(tracker::PositionTracker, order)\n    @debug \"Position management\" current_positions=tracker.positions\n    \n    # Calculate position change\n    symbol = order.symbol\n    side_multiplier = order.side == :buy ? 1.0 : -1.0\n    position_change = order.amount * side_multiplier\n    \n    # Update position\n    current_position = get(tracker.positions, symbol, 0.0)\n    new_position = current_position + position_change\n    \n    @debug \"Position update\" symbol=symbol old=current_position new=new_position change=position_change\n    \n    # Validate position limits\n    if abs(new_position) > get_max_position_size(symbol)\n        @error \"Position exceeds maximum allowed size\" position=new_position max=get_max_position_size(symbol)\n        return false\n    end\n    \n    # Update tracker\n    tracker.positions[symbol] = new_position\n    \n    return true\nend\n\n# Test position management\ntracker = PositionTracker()\norder = MarketOrder(:buy, \"BTC/USDT\", 0.1)\nsuccess = debug_position_management(tracker, order)","category":"page"},{"location":"troubleshooting/strategy-problems/#Performance-and-Optimization-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Performance and Optimization Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/#Slow-Strategy-Execution","page":"Troubleshooting: Strategy Development Issues","title":"Slow Strategy Execution","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Long backtesting times\nHigh CPU usage during execution\nMemory consumption issues","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Inefficient algorithms, excessive data copying, or unoptimized calculations.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"using Profile, BenchmarkTools\n\n# Step 1: Profile strategy execution\n@profile begin\n    strategy = load_strategy(:MyStrategy)\n    result = backtest(strategy, start_date, end_date)\nend\n\nProfile.print()\n","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"julia","category":"page"},{"location":"troubleshooting/strategy-problems/#DOCTEST_SKIP-This-code-block-has-complex-performance-testing-examples","page":"Troubleshooting: Strategy Development Issues","title":"DOCTEST_SKIP - This code block has complex performance testing examples","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/#Step-2:-Benchmark-specific-functions","page":"Troubleshooting: Strategy Development Issues","title":"Step 2: Benchmark specific functions","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/#PlanarDev-loaded-in-project","page":"Troubleshooting: Strategy Development Issues","title":"PlanarDev loaded in project","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"using Dates","category":"page"},{"location":"troubleshooting/strategy-problems/#Demonstrate-performance-testing-concepts","page":"Troubleshooting: Strategy Development Issues","title":"Demonstrate performance testing concepts","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"println(\"Performance testing example:\")","category":"page"},{"location":"troubleshooting/strategy-problems/#Show-basic-functionality","page":"Troubleshooting: Strategy Development Issues","title":"Show basic functionality","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"println(\"Julia version: \", VERSION) println(\"Planar project loaded successfully!\")","category":"page"},{"location":"troubleshooting/strategy-problems/#Example-performance-metrics-calculation","page":"Troubleshooting: Strategy Development Issues","title":"Example performance metrics calculation","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"println(\"Example performance metrics:\") start_time = now()","category":"page"},{"location":"troubleshooting/strategy-problems/#Simulate-some-work","page":"Troubleshooting: Strategy Development Issues","title":"Simulate some work","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"for i in 1:1000     sqrt(i) end endtime = now() executiontime = endtime - starttime println(\"Execution time: \", execution_time) println(\"For benchmarking, install BenchmarkTools.jl: using Pkg; Pkg.add(\\\"BenchmarkTools\\\")\")","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"\n# Step 3: Optimize common bottlenecks\n\n# Bad: Inefficient data access\nfunction slow_signal_generation(data)\n    signals = []\n    for i in 1:nrow(data)\n        # Repeated data access\n        price = data[i, :close]\n        ma = mean(data[max(1, i-20):i, :close])  # Recalculates every time\n        signal = price > ma ? 1 : -1\n        push!(signals, signal)\n    end\n    return signals\nend\n\n# Good: Optimized version\nfunction fast_signal_generation(data)\n    prices = data.close\n    n = length(prices)\n    signals = Vector{Int}(undef, n)\n    \n    # Pre-calculate moving average\n    window = 20\n    ma = similar(prices)\n    for i in 1:n\n        start_idx = max(1, i - window + 1)\n        ma[i] = mean(@view prices[start_idx:i])\n    end\n    \n    # Vectorized signal generation\n    signals .= ifelse.(prices .> ma, 1, -1)\n    \n    return signals\nend","category":"page"},{"location":"troubleshooting/strategy-problems/#Memory-Usage-Issues","page":"Troubleshooting: Strategy Development Issues","title":"Memory Usage Issues","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Symptoms:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Out of memory errors\nSlow garbage collection\nExcessive memory allocation","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Cause: Memory leaks, large object retention, or inefficient data structures.","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# DOCTEST_SKIP - Complex memory monitoring function\n# Monitor memory usage\nfunction monitor_memory(f, args...)\n    gc_before = Base.gc_num()\n    mem_before = Base.Sys.maxrss()\n    \n    result = f(args...)\n    \n    gc_after = Base.gc_num()\n    mem_after = Base.Sys.maxrss()\n    \n    @info \"Memory usage\" allocated_mb=(mem_after - mem_before) / 1024^2 gc_time=(gc_after.total_time - gc_before.total_time) / 1e9\n    \n    return result\nend\n\n# Use with strategy execution\nresult = monitor_memory(backtest, strategy, start_date, end_date)\n\n# Optimize memory usage\n# Bad: Creates many temporary objects\nfunction memory_heavy_strategy(data)\n    results = []\n    for row in eachrow(data)\n        temp_data = DataFrame(row)  # Creates new DataFrame\n        processed = process_row(temp_data)\n        push!(results, processed)\n    end\n    return results\nend\n\n# Good: Reuse objects and use views\nfunction memory_efficient_strategy(data)\n    n = nrow(data)\n    results = Vector{Float64}(undef, n)  # Pre-allocate\n    \n    for (i, row) in enumerate(eachrow(data))\n        # Process row directly without creating temporary objects\n        results[i] = process_row_values(row.open, row.high, row.low, row.close)\n    end\n    \n    return results\nend","category":"page"},{"location":"troubleshooting/strategy-problems/#Debugging-Strategies","page":"Troubleshooting: Strategy Development Issues","title":"Debugging Strategies","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/#VSCode-Debugging-Setup","page":"Troubleshooting: Strategy Development Issues","title":"VSCode Debugging Setup","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Configuration for strategy debugging:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# DOCTEST_SKIP - JSON configuration example\n/ In VSCode settings.json\n{\n    \"julia.debuggerDefaultCompiled\": [\n        \"ALL_MODULES_EXCEPT_MAIN\",\n        \"-Base.CoreLogging\"\n    ]\n}","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Using Infiltrator for interactive debugging:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# DOCTEST_SKIP - Infiltrator debugging example\nusing Infiltrator\n\nfunction my_strategy_function(data)\n    # Strategy logic\n    signals = calculate_signals(data)\n    \n    @infiltrate  # Drops into interactive debugging session\n    \n    # More logic after debugging\n    return process_signals(signals)\nend","category":"page"},{"location":"troubleshooting/strategy-problems/#Logging-and-Diagnostics","page":"Troubleshooting: Strategy Development Issues","title":"Logging and Diagnostics","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Comprehensive logging setup:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"# DOCTEST_SKIP - Complex logging setup example\nusing Logging\n\n# Create custom logger with different levels\nfunction setup_strategy_logging(level=Logging.Info)\n    logger = ConsoleLogger(stderr, level)\n    global_logger(logger)\n    \n    @info \"Strategy logging enabled\" level=level\nend\n\n# Use in strategy\nfunction logged_strategy_function(data)\n    @debug \"Function entry\" data_size=nrow(data)\n    \n    try\n        result = risky_operation(data)\n        @info \"Operation successful\" result_type=typeof(result)\n        return result\n    catch e\n        @error \"Operation failed\" exception=(e, catch_backtrace())\n        rethrow()\n    end\nend\n\n# Enable debug logging for specific modules\nENV[\"JULIA_DEBUG\"] = \"MyStrategy,Strategies\"\nsetup_strategy_logging(Logging.Debug)","category":"page"},{"location":"troubleshooting/strategy-problems/#When-to-Seek-Help","page":"Troubleshooting: Strategy Development Issues","title":"When to Seek Help","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Contact the community if:","category":"page"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Strategy logic is correct but execution fails consistently\nPerformance issues persist after optimization attempts\nErrors occur that are not covered in this guide\nIntegration with Planar framework components fails","category":"page"},{"location":"troubleshooting/strategy-problems/#Getting-Help","page":"Troubleshooting: Strategy Development Issues","title":"Getting Help","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Community Resources\nGitHub Issues\nStrategy Development Guide\nAPI Reference for function details","category":"page"},{"location":"troubleshooting/strategy-problems/#See-Also","page":"Troubleshooting: Strategy Development Issues","title":"See Also","text":"","category":"section"},{"location":"troubleshooting/strategy-problems/","page":"Troubleshooting: Strategy Development Issues","title":"Troubleshooting: Strategy Development Issues","text":"Strategy Development - Comprehensive development guide\nExecution Modes - Testing and deployment\nPerformance Issues - Optimization techniques\nInstallation Issues - Setup problems","category":"page"},{"location":"engine/paper/#Running-in-Paper-Mode","page":"Paper Trading","title":"Running in Paper Mode","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"Paper mode provides a realistic simulation environment that uses live market data while simulating order execution. This allows you to test strategies with real market conditions without risking actual capital.","category":"page"},{"location":"engine/paper/#Configuration-Options","page":"Paper Trading","title":"Configuration Options","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"In order to configure a strategy in paper mode, you can define the default mode in user/[planar.toml](../config.md#configuration)-file) or in your strategy project's Project.toml file. Alternatively, pass the mode as a keyword argument:","category":"page"},{"location":"engine/paper/#Configuration-via-TOML-Files","page":"Paper Trading","title":"Configuration via TOML Files","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"# user/[planar.toml](../config.md#configuration)-file)\n[Example]\nmode = \"Paper\"\n[exchanges](../exchanges.md) = \"binance\"\nthrottle = 5  # seconds between [strategy](../guides/strategy-development.md) calls\ninitial_cash = 10000.0","category":"page"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"# Strategy Project.toml\n[strategy]\nmode = \"Paper\"\nsandbox = true  # Use [exchanges](../exchanges.md) sandbox/testnet","category":"page"},{"location":"engine/paper/#Configuration-via-[Julia](https://julialang.org/)-Code","page":"Paper Trading","title":"Configuration via Julia Code","text":"","category":"section"},{"location":"engine/paper/#Starting-Paper-Mode","page":"Paper Trading","title":"Starting Paper Mode","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"To start the strategy, use the following command:","category":"page"},{"location":"engine/paper/#Advanced-Startup-Options","page":"Paper Trading","title":"Advanced Startup Options","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"Upon executing this, the following log output is expected:","category":"page"},{"location":"engine/paper/#Background-Execution","page":"Paper Trading","title":"Background Execution","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"To run the strategy as a background task:","category":"page"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"The logs will be written either to the s[:logfile] key of the strategy object, if present, or to the output of the runlog(s) command.","category":"page"},{"location":"engine/paper/#Log-Management","page":"Paper Trading","title":"Log Management","text":"","category":"section"},{"location":"engine/paper/#Comprehensive-Setup-Examples","page":"Paper Trading","title":"Comprehensive Setup Examples","text":"","category":"section"},{"location":"engine/paper/#Basic-Spot-Trading-Setup","page":"Paper Trading","title":"Basic Spot Trading Setup","text":"","category":"section"},{"location":"engine/paper/#Advanced-Margin-Trading-Setup","page":"Paper Trading","title":"Advanced Margin Trading Setup","text":"","category":"section"},{"location":"engine/paper/#Multi-Exchange-Paper-Trading","page":"Paper Trading","title":"Multi-Exchange Paper Trading","text":"","category":"section"},{"location":"engine/paper/#Understanding-Paper-Mode","page":"Paper Trading","title":"Understanding Paper Mode","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"When you initiate paper mode, asset prices are monitored in real-time from the exchange. Order execution in Paper Mode is similar to SimMode, albeit the actual price, the trade amount, and the order execution sequence are guided by real-time exchange data.","category":"page"},{"location":"engine/paper/#Order-Execution-Mechanics","page":"Paper Trading","title":"Order Execution Mechanics","text":"","category":"section"},{"location":"engine/paper/#Market-Orders","page":"Paper Trading","title":"Market Orders","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"Market Orders are executed by surveying the order book and sweeping available bids/asks. Consequently, the final price and amount reflect the average of all the entries available on the order book.\nExecution includes realistic slippage based on order book depth\nLarge orders may experience partial fills across multiple price levels","category":"page"},{"location":"engine/paper/#Limit-Orders","page":"Paper Trading","title":"Limit Orders","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"Limit Orders sweep the order book as well, though only for bids/asks that are below the limit price set for the order. If a Good-Till-Canceled (GTC) order is not entirely filled, a task is generated that continuously monitors the exchange's trade history. Trades that align with the order's limit price are used to fulfill the remainder of the limit order amount.\nOrders are queued and filled based on real market movements\nPartial fills are handled realistically based on market liquidity","category":"page"},{"location":"engine/paper/#Real-Time-Data-Integration","page":"Paper Trading","title":"Real-Time Data Integration","text":"","category":"section"},{"location":"engine/paper/#Price-Feeds","page":"Paper Trading","title":"Price Feeds","text":"","category":"section"},{"location":"engine/paper/#Order-Book-Integration","page":"Paper Trading","title":"Order Book Integration","text":"","category":"section"},{"location":"engine/paper/#Performance-Monitoring","page":"Paper Trading","title":"Performance Monitoring","text":"","category":"section"},{"location":"engine/paper/#Real-Time-Metrics","page":"Paper Trading","title":"Real-Time Metrics","text":"","category":"section"},{"location":"engine/paper/#See-Also","page":"Paper Trading","title":"See Also","text":"","category":"section"},{"location":"engine/paper/","page":"Paper Trading","title":"Paper Trading","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management\nExchanges - Data handling and management","category":"page"},{"location":"engine/paper/#Risk-Management-in-Paper-Mode","page":"Paper Trading","title":"Risk Management in Paper Mode","text":"","category":"section"},{"location":"engine/paper/#Position-Sizing","page":"Paper Trading","title":"Position Sizing","text":"","category":"section"},{"location":"engine/paper/#Stop-Loss-Management","page":"Paper Trading","title":"Stop Loss Management","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Exchange-Issues","page":"Exchange Issues","title":"Exchange Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"This guide helps resolve problems related to exchange connectivity, API authentication, and trading operations.","category":"page"},{"location":"troubleshooting/exchange-issues/#API-Authentication-Issues","page":"Exchange Issues","title":"API Authentication Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Invalid-API-Credentials","page":"Exchange Issues","title":"Invalid API Credentials","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: \"Invalid API key\" or \"Authentication failed\" errors.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Verify API key and secret in user/secrets.toml\nCheck API key permissions on exchange\nEnsure API key is not expired\nTest with sandbox/testnet first","category":"page"},{"location":"troubleshooting/exchange-issues/#API-Rate-Limiting","page":"Exchange Issues","title":"API Rate Limiting","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: \"Rate limit exceeded\" errors.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/#IP-Restrictions","page":"Exchange Issues","title":"IP Restrictions","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: API calls blocked due to IP restrictions.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Add your IP to exchange whitelist\nUse VPN if accessing from restricted region\nContact exchange support for IP issues","category":"page"},{"location":"troubleshooting/exchange-issues/#Connectivity-Issues","page":"Exchange Issues","title":"Connectivity Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Network-Timeouts","page":"Exchange Issues","title":"Network Timeouts","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: Connection timeouts to exchange APIs.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/#SSL/TLS-Issues","page":"Exchange Issues","title":"SSL/TLS Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: SSL certificate verification failures.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/#Exchange-Specific-Issues","page":"Exchange Issues","title":"Exchange-Specific Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Binance","page":"Exchange Issues","title":"Binance","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Common Issues:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"API key restrictions (spot vs futures)\nTestnet vs mainnet confusion\nSymbol format differences","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solutions:","category":"page"},{"location":"troubleshooting/exchange-issues/#Coinbase-Pro","page":"Exchange Issues","title":"Coinbase Pro","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Common Issues:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Passphrase requirement\nSandbox environment setup","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solutions:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"[exchanges.coinbase]\napi_key = \"your_key\"\nsecret = \"your_secret\"\npassphrase = \"your_passphrase\"\nsandbox = true","category":"page"},{"location":"troubleshooting/exchange-issues/#Kraken","page":"Exchange Issues","title":"Kraken","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Common Issues:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"API tier limitations\nSymbol naming conventions","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solutions:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Verify API tier supports required features\nUse correct symbol format (e.g., \"XBTUSD\" not \"BTCUSD\")","category":"page"},{"location":"troubleshooting/exchange-issues/#Data-Issues","page":"Exchange Issues","title":"Data Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Missing-Market-Data","page":"Exchange Issues","title":"Missing Market Data","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: No price data available for symbol.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Verify symbol exists on exchange\nCheck if market is active/trading\nEnsure timeframe is supported\nTest with different symbol","category":"page"},{"location":"troubleshooting/exchange-issues/#Incomplete-Historical-Data","page":"Exchange Issues","title":"Incomplete Historical Data","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: Insufficient historical data for backtesting.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/#Data-Quality-Issues","page":"Exchange Issues","title":"Data Quality Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: Gaps or inconsistencies in price data.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/#Trading-Issues","page":"Exchange Issues","title":"Trading Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Order-Placement-Failures","page":"Exchange Issues","title":"Order Placement Failures","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: Orders rejected by exchange.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Check minimum order size requirements\nVerify sufficient balance\nEnsure price is within allowed range\nCheck market hours and status","category":"page"},{"location":"troubleshooting/exchange-issues/#Position-Management-Issues","page":"Exchange Issues","title":"Position Management Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: Position size or margin calculations incorrect.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/#Slippage-Issues","page":"Exchange Issues","title":"Slippage Issues","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Problem: Significant price slippage on orders.","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Solution:","category":"page"},{"location":"troubleshooting/exchange-issues/#Monitoring-and-Debugging","page":"Exchange Issues","title":"Monitoring and Debugging","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Enable-Debug-Logging","page":"Exchange Issues","title":"Enable Debug Logging","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Test-Exchange-Connectivity","page":"Exchange Issues","title":"Test Exchange Connectivity","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Monitor-API-Usage","page":"Exchange Issues","title":"Monitor API Usage","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Emergency-Procedures","page":"Exchange Issues","title":"Emergency Procedures","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/#Stop-All-Trading","page":"Exchange Issues","title":"Stop All Trading","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"# Activate Planar project\nimport Pkg\nPkg.activate(\"Planar\")\n\ntry\n    using Planar\n    @environment!\n    \n    # Emergency stop procedures (example)\n    function emergency_stop_example(exchange_name)\n        @warn \"EMERGENCY STOP initiated for $exchange_name\"\n        \n        # Real implementation would be:\n        # emergency_stop(exchange)\n        # close_all_positions(exchange)\n        \n        println(\"All orders would be cancelled\")\n        println(\"All positions would be closed\")\n        println(\"Trading would be halted\")\n    end\n    \n    # Example usage\n    emergency_stop_example(\"binance\")\n    \n    println(\"Emergency procedures defined\")\n    \ncatch e\n    @warn \"Planar not available: $e\"\nend","category":"page"},{"location":"troubleshooting/exchange-issues/#API-Key-Compromise","page":"Exchange Issues","title":"API Key Compromise","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"If you suspect API key compromise:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Immediately disable API key on exchange\nGenerate new API credentials\nUpdate user/secrets.toml\nReview recent trading activity\nEnable IP restrictions","category":"page"},{"location":"troubleshooting/exchange-issues/#Getting-Help","page":"Exchange Issues","title":"Getting Help","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"For exchange-specific issues:","category":"page"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Check exchange status pages\nReview exchange API documentation\nContact exchange support\nCheck Planar GitHub Issues\nJoin community discussions","category":"page"},{"location":"troubleshooting/exchange-issues/#Related-Documentation","page":"Exchange Issues","title":"Related Documentation","text":"","category":"section"},{"location":"troubleshooting/exchange-issues/","page":"Exchange Issues","title":"Exchange Issues","text":"Configuration Guide\nInstallation Issues\nPerformance Issues","category":"page"},{"location":"plotting/#Plotting-and-Visualization","page":"Visualization","title":"Plotting and Visualization","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"The Plotting module utilizes Makie for creating visualizations. It is important to note that graphical backends are not automatically included with the module and must be installed manually:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Planar enhances Makie with specialized plotting recipes for financial analysis:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"OHLCV (Open-High-Low-Close Volume) charts\nDetailed trade history visualization\nSummarized trade history with volume and balance insights\nCustom indicator overlays and channels\nMulti-asset portfolio visualization\nPerformance and optimization result analysis","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"info: Interactive Features\nInteractive backends, such as GLMakie and WGLMakie, allow for dynamic plots that can be clicked-and-dragged or zoomed. Additionally, interactive elements like tooltips are available on hover for candlesticks, trades, and balance charts.","category":"page"},{"location":"plotting/#Backend-Selection-and-Setup","page":"Visualization","title":"Backend Selection and Setup","text":"","category":"section"},{"location":"plotting/#GLMakie-(Desktop-Applications)","page":"Visualization","title":"GLMakie (Desktop Applications)","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"GLMakie is the recommended backend for desktop applications and provides the best performance for interactive plots:","category":"page"},{"location":"plotting/#WGLMakie-(Web-Applications)","page":"Visualization","title":"WGLMakie (Web Applications)","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"WGLMakie is ideal for web-based applications and Jupyter notebooks:","category":"page"},{"location":"plotting/#CairoMakie-(Static-Images)","page":"Visualization","title":"CairoMakie (Static Images)","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"For generating static images or when interactive features are not needed:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"For generating static images, use CairoMakie and save with save(\"chart.png\", figure).","category":"page"},{"location":"plotting/#[OHLCV](guides/../guides/data-management.md#ohlcv-data)-Charts","page":"Visualization","title":"OHLCV Charts","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"OHLCV data is represented using candlesticks to indicate price movement, with red signifying a price decrease and green an increase. Volume is depicted as bars in the background of the chart.","category":"page"},{"location":"plotting/#Basic-[OHLCV](guides/../guides/data-management.md#ohlcv-data)-Chart","page":"Visualization","title":"Basic OHLCV Chart","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"(Image: OHLCV Plot)","category":"page"},{"location":"plotting/#Customizing-OHLCV-Charts","page":"Visualization","title":"Customizing OHLCV Charts","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"You can customize various aspects of OHLCV charts:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Customize charts with parameters like title, up_color, down_color, volume_color, and show_volume.","category":"page"},{"location":"plotting/#Time-Range-Selection","page":"Visualization","title":"Time Range Selection","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Display specific time periods:","category":"page"},{"location":"plotting/#Multiple-Timeframes","page":"Visualization","title":"Multiple Timeframes","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Compare different timeframes on the same chart:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Create multi-timeframe layouts using Figure() and Axis() with Plotting.ohlcv!() for each subplot.","category":"page"},{"location":"plotting/#Trading-History-Visualization","page":"Visualization","title":"Trading History Visualization","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"The history of trades is illustrated using triangles, with upwards pointing triangles for buy transactions and downwards for sell transactions.","category":"page"},{"location":"plotting/#Basic-Trade-Visualization","page":"Visualization","title":"Basic Trade Visualization","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"(Image: TradesTicks)","category":"page"},{"location":"plotting/#Advanced-Trade-Analysis","page":"Visualization","title":"Advanced Trade Analysis","text":"","category":"section"},{"location":"plotting/#Trade-Performance-Overlay","page":"Visualization","title":"Trade Performance Overlay","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Combine trade markers with performance metrics:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Add balance lines and statistics with Plotting.balance_line!() and Plotting.add_stats_table!().","category":"page"},{"location":"plotting/#Multi-Asset-Trade-Comparison","page":"Visualization","title":"Multi-Asset Trade Comparison","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Compare multiple assets using loops with Plotting.tradesticks!() in subplots.","category":"page"},{"location":"plotting/#Aggregated-Trade-History-for-a-Single-Asset","page":"Visualization","title":"Aggregated Trade History for a Single Asset","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"The balloons function provides an aggregated view of trade density within a specified timeframe. Each circle's size correlates with the trade volume—larger circles denote higher volume. Positive volume timeframes are labeled as sells and negative ones as buys. Circle opacity reflects the number of trades within the timeframe. The accompanying balance chart indicates the quote currency held: the orange band represents actual cash (Strategy.cash), while the blue band represents the value of held assets in quote currency (AssetInstance.cash * price).","category":"page"},{"location":"plotting/#Basic-Balloons-Chart","page":"Visualization","title":"Basic Balloons Chart","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"(Image: Balloons)","category":"page"},{"location":"plotting/#Customizing-Balloons-Visualization","page":"Visualization","title":"Customizing Balloons Visualization","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Customize balloons with parameters like tf, min_radius, max_radius, buy_color, and sell_color.","category":"page"},{"location":"plotting/#Advanced-Balloons-Analysis","page":"Visualization","title":"Advanced Balloons Analysis","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Add volume histograms and frequency overlays with show_volume_histogram and Plotting.frequency_heatmap!().","category":"page"},{"location":"plotting/#Aggregated-Trade-History-for-Multiple-Assets","page":"Visualization","title":"Aggregated Trade History for Multiple Assets","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"For a comprehensive analysis, aggregated trade history can plot multiple assets. Balloons are overlaid on the price line of each asset, with the same opacity and radius settings as single asset plots. To benchmark against a specific asset, pass a symbol or a dataframe using the benchmark keyword argument.","category":"page"},{"location":"plotting/#Basic-Multi-Asset-Balloons","page":"Visualization","title":"Basic Multi-Asset Balloons","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"(Image: Balloons Multi)","category":"page"},{"location":"plotting/#Portfolio-Wide-Analysis","page":"Visualization","title":"Portfolio-Wide Analysis","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Use benchmark, normalize_prices, and layout parameters for multi-asset analysis.","category":"page"},{"location":"plotting/#Advanced-Multi-Asset-Visualization","page":"Visualization","title":"Advanced Multi-Asset Visualization","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Create portfolio heatmaps with Plotting.portfolio_heatmap() and add correlation analysis.","category":"page"},{"location":"plotting/#Sector-and-Category-Analysis","page":"Visualization","title":"Sector and Category Analysis","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Group assets by categories and plot with different colors using loops and subplots.","category":"page"},{"location":"plotting/#Custom-Indicators","page":"Visualization","title":"Custom Indicators","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Custom indicators enhance chart analysis and can be integrated into plots. Planar provides several functions for adding technical indicators to your charts.","category":"page"},{"location":"plotting/#Line-Indicators","page":"Visualization","title":"Line Indicators","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Moving averages and other line-based indicators can be added using the line_indicator function:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"(Image: Line Indicator)","category":"page"},{"location":"plotting/#Advanced-Line-Indicators","page":"Visualization","title":"Advanced Line Indicators","text":"","category":"section"},{"location":"plotting/#Channel-Indicators","page":"Visualization","title":"Channel Indicators","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Channels or envelopes can be visualized using the channel_indicator function. This tool is useful for identifying trends and potential breakouts:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"(Image: Channel Indicator)","category":"page"},{"location":"plotting/#Advanced-Channel-Indicators","page":"Visualization","title":"Advanced Channel Indicators","text":"","category":"section"},{"location":"plotting/#Oscillator-Indicators","page":"Visualization","title":"Oscillator Indicators","text":"","category":"section"},{"location":"plotting/#Custom-Indicator-Development","page":"Visualization","title":"Custom Indicator Development","text":"","category":"section"},{"location":"plotting/#Styling-and-Customization","page":"Visualization","title":"Styling and Customization","text":"","category":"section"},{"location":"plotting/#Color-Schemes-and-Themes","page":"Visualization","title":"Color Schemes and Themes","text":"","category":"section"},{"location":"plotting/#Chart-Layout-and-Sizing","page":"Visualization","title":"Chart Layout and Sizing","text":"","category":"section"},{"location":"plotting/#Export-and-Saving-Options","page":"Visualization","title":"Export and Saving Options","text":"","category":"section"},{"location":"plotting/#Pe","page":"Visualization","title":"Pe","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"rformance Analysis Visualization","category":"page"},{"location":"plotting/#Strategy-Performance-Charts","page":"Visualization","title":"Strategy Performance Charts","text":"","category":"section"},{"location":"plotting/#Risk-Metrics-Visualization","page":"Visualization","title":"Risk Metrics Visualization","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Create risk analysis charts using functions like Plotting.rolling_sharpe(), Plotting.rolling_volatility(), and Plotting.calculate_var().","category":"page"},{"location":"plotting/#Optimization-Result-Visualization","page":"Visualization","title":"Optimization Result Visualization","text":"","category":"section"},{"location":"plotting/#Parameter-Optimization-Heatmaps","page":"Visualization","title":"Parameter Optimization Heatmaps","text":"","category":"section"},{"location":"plotting/#3D-Optimization-Surface","page":"Visualization","title":"3D Optimization Surface","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Use Axis3() and surface!() for 3D optimization visualization.","category":"page"},{"location":"plotting/#Optimization-Progress-Tracking","page":"Visualization","title":"Optimization Progress Tracking","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Track optimization progress using lines!() and scatter!() to show best values and parameter evolution.","category":"page"},{"location":"plotting/#Large-Dataset-Visualization","page":"Visualization","title":"Large Dataset Visualization","text":"","category":"section"},{"location":"plotting/#Large-Dataset-Handling","page":"Visualization","title":"Large Dataset Handling","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"For large datasets, use Plotting.load_chunks() for progressive loading or Plotting.downsample_ohlcv() for memory efficiency.","category":"page"},{"location":"plotting/#Interactive-Features-and-Widgets","page":"Visualization","title":"Interactive Features and Widgets","text":"","category":"section"},{"location":"plotting/#Interactive-Features","page":"Visualization","title":"Interactive Features","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"GLMakie supports interactive features like Slider(), Button(), and lift() for reactive plotting.","category":"page"},{"location":"plotting/#Troubleshooting-and-Performance","page":"Visualization","title":"Troubleshooting and Performance","text":"","category":"section"},{"location":"plotting/#Common-Plotting-Issues","page":"Visualization","title":"Common Plotting Issues","text":"","category":"section"},{"location":"plotting/#Backend-Problems","page":"Visualization","title":"Backend Problems","text":"","category":"section"},{"location":"plotting/#Performance-Tips","page":"Visualization","title":"Performance Tips","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Monitor memory usage with Base.gc_live_bytes() and consider downsampling large datasets for better performance.e     GLMakie.set_theme!(         SSAO = (enabled = false,),         FXAA = (enabled = false,)     )","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"# Use lower quality for interactive plots\nGLMakie.set_theme!(\n    resolution = (1200, 800),  # Lower resolution\n    px_per_unit = 1            # Lower pixel density\n)\n\nprintln(\"Performance optimizations applied\")","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"end","category":"page"},{"location":"plotting/#Apply-optimizations","page":"Visualization","title":"Apply optimizations","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"optimizeplotperformance()","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"\n### Best Practices\n\n1. **Data Preparation**: Clean and validate data before plotting\n2. **Memory Management**: Use downsampling for large datasets\n3. **Backend Selection**: Choose appropriate backend for your use case\n4. **Color Accessibility**: Use colorblind-friendly palettes\n5. **Performance**: Limit the number of data points for interactive plots\n6. **Export Quality**: Use high DPI settings for publication-quality images\n\ndvanced Backend Configuration\n\n### GLMakie Advanced Setup\n\nGLMakie provides the best performance for desktop applications with full GPU acceleration support.\n\n#### Installation and Configuration\n\n\n#### Multi-Monitor Support\n","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"julia","category":"page"},{"location":"plotting/#Activate-PlanarInteractive-project-for-plotting-features","page":"Visualization","title":"Activate PlanarInteractive project for plotting features","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"import Pkg Pkg.activate(\"PlanarInteractive\")","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"try     using GLMakie","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"# Configure for multiple monitors\nfunction setup_multi_monitor()\n    monitors = GLMakie.GLFW.GetMonitors()\n    println(\"Available monitors: $(length(monitors))\")\n    \n    for (i, monitor) in enumerate(monitors)\n        name = GLMakie.GLFW.GetMonitorName(monitor)\n        mode = GLMakie.GLFW.GetVideoMode(monitor)\n        println(\"Monitor $i: $name ($(mode.width)x$(mode.height))\")\n    end\nend\n\nsetup_multi_monitor()","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"catch e     @warn \"GLMakie not available: e\" end     resolution = (1200, 800),","category":"page"},{"location":"plotting/#Jupyter-Notebook-Integration","page":"Visualization","title":"Jupyter Notebook Integration","text":"","category":"section"},{"location":"plotting/#Memory-Usage-Optimization","page":"Visualization","title":"Memory Usage Optimization","text":"","category":"section"},{"location":"plotting/#See-Also","page":"Visualization","title":"See Also","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Exchanges - Exchange integration and configuration\nConfig - Exchange integration and configuration\nOverview - Troubleshooting: Troubleshooting and problem resolution\nOptimization - Performance optimization techniques\nPerformance Issues - Troubleshooting: Performance optimization techniques\nData Management - Guide: Data handling and management","category":"page"},{"location":"plotting/#Advanced-Interactive-Features","page":"Visualization","title":"Advanced Interactive Features","text":"","category":"section"},{"location":"plotting/#Custom-Interaction-Handlers","page":"Visualization","title":"Custom Interaction Handlers","text":"","category":"section"},{"location":"plotting/#Real-time-Data-Streaming","page":"Visualization","title":"Real-time Data Streaming","text":"","category":"section"},{"location":"plotting/#Multi-Window-Management","page":"Visualization","title":"Multi-Window Management","text":"","category":"section"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"This completes the advanced plotting and backend documentation. The enhanced plotting.md file now includes:","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"Comprehensive OHLCV chart examples with customization options\nAdvanced trade visualization with multiple analysis methods\nEnhanced balloons functionality for single and multi-asset analysis\nExtensive custom indicator examples including line, channel, volume, and oscillator indicators\nStyling and customization options with themes and color schemes\nPerformance analysis visualization for strategy evaluation\nOptimization result visualization with heatmaps and 3D surfaces\nLarge dataset handling with progressive loading and memory optimization\nInteractive features with widgets and real-time updates\nAdvanced backend configuration for GLMakie, WGLMakie, and CairoMakie\nPerformance optimization and troubleshooting guidance\nMulti-window management for complex analysis workflows","category":"page"},{"location":"plotting/","page":"Visualization","title":"Visualization","text":"<function_calls> <invoke name=\"taskStatus\"> <parameter name=\"taskFilePath\">.kiro/specs/docs-improvement/tasks.md","category":"page"},{"location":"API/processing/#Processing","page":"Processing","title":"Processing","text":"","category":"section"},{"location":"API/processing/#Processing.Processing","page":"Processing","title":"Processing.Processing","text":"Module for data resampling, cleaning, aligning, etc.\n\n\n\n\n\n","category":"module"},{"location":"API/processing/#Data.propagate_ohlcv!","page":"Processing","title":"Data.propagate_ohlcv!","text":"Updates OHLCV data across multiple time frames.\n\npropagate_ohlcv!(\n    data::SortedDict{TimeFrames.TimeFrame, DataFrames.DataFrame}\n) -> Union{Nothing, SortedDict{TimeFrames.TimeFrame, DataFrames.DataFrame}}\npropagate_ohlcv!(\n    data::SortedDict{TimeFrames.TimeFrame, DataFrames.DataFrame},\n    update_func::Function\n) -> Union{Nothing, SortedDict{TimeFrames.TimeFrame, DataFrames.DataFrame}}\n\n\nThis function takes a dictionary data and an aggregation function update_func. It updates the OHLCV data from the base time frame to the higher time frames in data, using update_func to aggregate the OHLCV values from the base to the target time frame. The function modifies data in place and returns it. If the base time frame data frame in data is empty, the function clears all the higher time frames data frames. Otherwise, it asynchronously updates each higher time frame data frame and ensures that the timestamps are synchronized across all time frames.\n\n\n\n\n\n","category":"function"},{"location":"API/processing/#Data.propagate_ohlcv!-Tuple{DataFrames.DataFrame, DataFrames.DataFrame}","page":"Processing","title":"Data.propagate_ohlcv!","text":"Resamples OHLCV data between different time frames.\n\npropagate_ohlcv!(\n    src::DataFrames.DataFrame,\n    dst::DataFrames.DataFrame;\n    src_tf,\n    dst_tf,\n    strict\n) -> DataFrames.DataFrame\n\n\nThis function resamples the OHLCV data from a source DataFrame to a destination DataFrame with different timeframes. If the latest timestamp in the destination DataFrame is earlier than the earliest timestamp in the resampled source DataFrame, the function appends the resampled data to the destination DataFrame. If not, the function returns the destination DataFrame as is. Both the source and destination DataFrames must have columns named 'timestamp', 'open', 'high', 'low', 'close', and 'volume'. The source and destination timeframes must be suitable for the resampling operation.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing._deltas-Tuple{Any, Any}","page":"Processing","title":"Processing._deltas","text":"Computes the deltas for a given transformation.\n\n_deltas(\n    data,\n    to_tf\n) -> Union{Tuple{Float64, Float64, Float64, Any}, Tuple{Integer, Any, Any, Nothing}}\n\n\nThis function takes a data vector and a target transformation function, and computes the deltas (changes) in the data that would result from applying the transformation.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing._fill_missing_candles!-Tuple{Any, AbstractString}","page":"Processing","title":"Processing._fill_missing_candles!","text":"_fill_missing_candles!(\n    df,\n    timeframe::AbstractString;\n    strategy\n) -> Any\n\n\nSee fill_missing_candles.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing._left_and_right-NTuple{4, Any}","page":"Processing","title":"Processing._left_and_right","text":"Returns the left and right indices for a given frame.\n\n_left_and_right(\n    data,\n    frame_size,\n    src_td,\n    td\n) -> Tuple{Int64, Any}\n\n\nThis function takes a data vector, frame size, source time delta, and target time delta, and computes the left and right indices for the frame based on these parameters.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing._remove_incomplete_candle-Tuple{Any, Any}","page":"Processing","title":"Processing._remove_incomplete_candle","text":"Removes incomplete candles from a DataFrame.\n\n_remove_incomplete_candle(in_df, tf) -> Any\n\n\nThis function takes a DataFrame in_df and a TimeFrame tf. It identifies any incomplete candles in in_df based on tf and removes them.\n\nSee isincomplete for more information.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.cleanup_ohlcv!-Tuple{Zarr.ZArray, AbstractString}","page":"Processing","title":"Processing.cleanup_ohlcv!","text":"Cleans up OHLCV data in a ZArray.\n\ncleanup_ohlcv!(\n    z::Zarr.ZArray,\n    timeframe::AbstractString\n) -> Union{Nothing, Zarr.ZArray}\n\n\nThis function takes a ZArray z and a string timeframe. It cleans up the OHLCV data in z by removing any incomplete candles based on timeframe and filling any missing candles using the specified filling strategy.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.cleanup_ohlcv_data-Tuple{Any, AbstractString}","page":"Processing","title":"Processing.cleanup_ohlcv_data","text":"cleanup_ohlcv_data(\n    data,\n    tf::AbstractString;\n    kwargs...\n) -> Any\n\n\nSee cleanup_ohlcv_data.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.cleanup_ohlcv_data-Tuple{Any, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.cleanup_ohlcv_data","text":"Cleans up OHLCV data in a DataFrame.\n\ncleanup_ohlcv_data(\n    data,\n    tf::TimeFrames.TimeFrame;\n    col,\n    fill_missing\n) -> Any\n\n\nThis function takes a DataFrame data, a TimeFrame tf, and optionally a column index col and a filling strategy fill_missing. It cleans up the OHLCV data in data by removing any incomplete candles based on tf, filling any missing candles using the specified filling strategy, and sorting the data by the specified column.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.fill_missing_candles!-Tuple{Any, Dates.Period}","page":"Processing","title":"Processing.fill_missing_candles!","text":"fill_missing_candles!(\n    df,\n    prd::Dates.Period;\n    strategy\n) -> Any\n\n\nSee fill_missing_candles.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.fill_missing_candles-Tuple{Any, AbstractString}","page":"Processing","title":"Processing.fill_missing_candles","text":"Fills missing candles in a DataFrame.\n\nfill_missing_candles(\n    df,\n    timeframe::AbstractString;\n    strategy\n) -> Any\n\n\nThis function takes a DataFrame df, a string timeframe, and optionally a filling strategy strategy. It identifies the missing candles in df based on the timeframe, and fills them using the specified strategy.\n\nfilling strategies:\n\n:close: fill with the close price of the previous candle.\n:open: fill with the open price of the next candle.\n:linear: linearly interpolate between the close price of the previous candle and the open price of the next candle.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.isadjacent-Tuple{Any, Any, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.isadjacent","text":"a is adjacent to b if either isleftadj or isrightadj.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.iscomplete-Tuple{Any, Any}","page":"Processing","title":"Processing.iscomplete","text":"Checks if a candle is old enough to be complete.\n\niscomplete(v, tf) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.isincomplete-Tuple{Data.Candle, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.isincomplete","text":"Checks if a candle is too new.\n\nisincomplete(\n    candle::Data.Candle,\n    tf::TimeFrames.TimeFrame\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.isincomplete-Tuple{Dates.DateTime, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.isincomplete","text":"Checks if a DateTime is incomplete based on a TimeFrame.\n\nisincomplete(\n    d::Dates.DateTime,\n    tf::TimeFrames.TimeFrame\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.islast-Tuple{DataFrames.DataFrame, DataFrames.DataFrame}","page":"Processing","title":"Processing.islast","text":"Checks if the last row of a smaller DataFrame is also the last row of a larger DataFrame.\n\nislast(\n    larger::DataFrames.DataFrame,\n    smaller::DataFrames.DataFrame\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.islast-Tuple{Dates.DateTime, Any, Val{:raw}}","page":"Processing","title":"Processing.islast","text":"Checks if a candle is exactly the latest candle.\n\nislast(d::Dates.DateTime, tf, _::Val{:raw}) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.isleftadj-Tuple{Any, Any, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.isleftadj","text":"a is left adjacent to b if in order ..ab..\n\nisleftadj(a, b, tf::TimeFrames.TimeFrame) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.isrightadj-Tuple{Any, Any, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.isrightadj","text":"a is right adjacent to b if in order ..ba..\n\nisrightadj(a, b, tf::TimeFrames.TimeFrame) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.maptf-Tuple{AbstractVector{T} where T<:String, Any, Function}","page":"Processing","title":"Processing.maptf","text":"Apply a function over data, resampling data to each timeframe in tfs.\n\nmaptf(\n    tfs::AbstractVector{T} where T<:String,\n    data,\n    f::Function;\n    tfsum,\n    kwargs...\n) -> Any\n\n\nf: signature is (data; kwargs...)::DataFrame\ntfsum: sum the scores across multiple timeframes for every pair.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.normalize!-Tuple{Any}","page":"Processing","title":"Processing.normalize!","text":"Applies either a unitrange transform or a zscore tranform over the data in place.\n\nnormalize!(arr; unit, dims) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.normalize-Tuple{Any}","page":"Processing","title":"Processing.normalize","text":"See normalize!. Copies.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.resample","page":"Processing","title":"Processing.resample","text":"Resamples data based on transformation functions.\n\nresample(data, from_tf, to_tf) -> Any\nresample(data, from_tf, to_tf, cleanup) -> Any\nresample(data, from_tf, to_tf, cleanup, style) -> Any\nresample(data, from_tf, to_tf, cleanup, style, chop)\n\n\nThis function takes a data vector, a source transformation function from_tf, a target transformation function to_tf, and optionally a boolean cleanup and a style style. It resamples the data from the source time frame to the target time frame. If cleanup is true, it removes any invalid data points after resampling. The resampling style is determined by style. If chop is true, it removes the leftovers at the end of the data that can't fill a complete frame.\n\n\n\n\n\n","category":"function"},{"location":"API/processing/#Processing.resample-2","page":"Processing","title":"Processing.resample","text":"resample(\n    df::DataFrames.AbstractDataFrame,\n    tf::TimeFrames.TimeFrame;\n    ...\n) -> Any\nresample(\n    df::DataFrames.AbstractDataFrame,\n    tf::TimeFrames.TimeFrame,\n    b::Bool,\n    args...;\n    kwargs...\n) -> Any\n\n\n. See resample.\n\n\n\n\n\n","category":"function"},{"location":"API/processing/#Processing.resample-Tuple","page":"Processing","title":"Processing.resample","text":"Resamples data, and saves to storage.\n\nresample(args...; exc_name, name, dosave) -> Any\n\n\nwarning: Usually not worth it\nResampling is quite fast, so it is simpler to keep only the smaller timeframe on storage, and resample the longer ones on demand.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.resample-Tuple{AbstractDict{String, Data.PairData}, Any}","page":"Processing","title":"Processing.resample","text":"resample(\n    mkts::AbstractDict{String, Data.PairData},\n    timeframe;\n    progress,\n    lk\n) -> Dict{String, Data.PairData}\n\n\n. See resample.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.resample-Tuple{Data.PairData, Any}","page":"Processing","title":"Processing.resample","text":"resample(pair::Data.PairData, to_tf) -> Any\n\n\n. See resample.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.resample_style-Tuple{Any, Any}","page":"Processing","title":"Processing.resample_style","text":"Resamples a style based on a transformation function.\n\nresample_style(style, tf) -> Any\n\n\nThis function takes a style and a transformation function tf, and resamples the style based on the transformation.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.trail!-Tuple{Any, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.trail!","text":"Applies trailing operation on a DataFrame based on a time frame.\n\ntrail!(df, tf::TimeFrames.TimeFrame; to, from, cap)\n\n\nThis function takes a DataFrame df, a TimeFrame tf, and optionally a timestamp to, a timestamp from, and a cap cap. It applies a trailing window operation on df for the specified tf. The operation starts from the timestamp specified by from (default is the last timestamp in the DataFrame) and ends at the timestamp specified by to. The cap argument determines the maximum number of rows to keep in the dataframe.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.upsample-Tuple{DataFrames.AbstractDataFrame, TimeFrames.TimeFrame, TimeFrames.TimeFrame}","page":"Processing","title":"Processing.upsample","text":"Upsample OHLCV DataFrame from a larger timeframe to a smaller one.\n\nArguments:\n\ndf: DataFrame with OHLCV columns and a regular, contiguous timeframe (large_tf)\nlarge_tf: TimeFrame of the input DataFrame\nsmalltf: TimeFrame to upsample to (must be a divisor of largetf)\n\nReturns:\n\nDataFrame with OHLCV columns at the smaller timeframe, where each large candle is expanded into N small candles (N = largetf.period ÷ smalltf.period), with open/high/low/close flat-filled, and volume divided equally.\n\n\n\n\n\n","category":"method"},{"location":"API/processing/#Processing.@resample-Tuple{Any, Any, Any, Vararg{Any}}","page":"Processing","title":"Processing.@resample","text":". See resample.\n\n\n\n\n\n","category":"macro"}]
}
