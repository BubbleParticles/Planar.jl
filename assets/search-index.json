{
    "documents": [
        {
            "path": "config.md",
            "headings": [
                "See Also"
            ],
            "excerpt": "The bot is configured using a file named , which serves as the default configuration file. This file typically contains: - Minor exchange.md) configurations, which are referenced using the symbol as ...",
            "difficulty": "advanced",
            "title": "config",
            "content_length": 1736,
            "url": "/config.html",
            "description": "",
            "category": "getting-started"
        },
        {
            "path": "contacts.md",
            "headings": [
                "Github",
                "Discord"
            ],
            "excerpt": "Github Submit an issue Discord join the discord chat ![Discord](https://discord.gg/xDeBmSzDUr)",
            "difficulty": "beginner",
            "title": "contacts",
            "content_length": 94,
            "url": "/contacts.html",
            "description": "",
            "category": "configuration"
        },
        {
            "path": "data.md",
            "headings": [
                "Data Management",
                "Quick Navigation",
                "Prerequisites",
                "Related Topics",
                "Storage Architecture",
                "Zarr Backend",
                "Data Organization",
                "Data Architecture Overview",
                "Storage Hierarchy",
                "Data Collection Methods",
                "Historical Data with Scrapers",
                "Basic Scraper Usage",
                "Download [OHLCV](../guides/data-management.md#ohlcv-data) data for ETH",
                "Load downloaded data into the storage system",
                "Note: Default market parameter is :um (USD-M futures)",
                "Advanced Scraper Examples",
                "Download multiple symbols at once",
                "Show all symbols that can be downloaded",
                "Filter by quote currency (default is \"usdt\")",
                "Download specific date ranges",
                "Market Types and Frequencies",
                "Different market types",
                "Different frequencies",
                "Different data types",
                "Error Handling and Data Validation",
                "Handle download errors gracefully",
                "Batch download with error handling",
                "Real-Time Data with Fetch",
                "Basic Fetch Usage",
                "Will fetch the last 1000 candles, `to` can also be passed to download a specific range",
                "Advanced Fetch Examples",
                "Initialize [exchange](../exchanges.md)",
                "Fetch specific date ranges",
                "Fetch with explicit date range",
                "Fetch recent data (last N candles)",
                "Fetch and automatically save to storage",
                "Multi-Exchange Data Collection",
                "Collect data from multiple exchanges",
                "Rate Limit Management",
                "Fetch with rate limit awareness",
                "Usage",
                "Data Validation and Quality Checks",
                "Fetch with validation",
                "Usage",
                "Live Data Streaming with Watchers",
                "OHLCV Ticker Watcher",
                "Single-Pair OHLCV Watcher",
                "Advanced Watcher Configuration",
                "Configure watcher with custom parameters",
                "Multi-pair watcher with custom intervals",
                "Start the watcher",
                "Monitor watcher status",
                "Watcher Management",
                "Start multiple watchers for different exchanges",
                "Monitor all watchers",
                "Stop all watchers when done",
                "Orderbook Watcher",
                "Monitor orderbook data for a specific pair",
                "Access orderbook data",
                "Custom Data Processing",
                "Create a watcher with custom data processing",
                "Apply custom processing to watcher data",
                "Error Handling and Resilience",
                "Robust watcher with error handling",
                "Usage",
                "Data Persistence and Storage",
                "Configure automatic data persistence",
                "Manual data saving",
                "Periodic saving",
                "Custom Data Sources",
                "Basic Custom Data Integration",
                "Advanced Custom Data Examples",
                "Example: Custom data from CSV files",
                "Save custom CSV data",
                "Custom Data Validation",
                "Example: Custom data with validation",
                "Working with Large Custom Datasets",
                "Example: Processing large datasets in chunks",
                "Generic Data Storage",
                "Example: Saving custom indicator data",
                "Load custom indicators",
                "Serialized Data Storage",
                "Example: Storing complex data structures",
                "Save with serialization",
                "Load serialized data",
                "Progressive Data Loading",
                "Example: Progressive loading for large datasets",
                "Data Indexing and Access Patterns",
                "Advanced Indexing Examples",
                "Load sample data",
                "Date range selections",
                "Specific time periods",
                "Price-based filtering",
                "Combined conditions",
                "Timeframe Management",
                "Get current timeframe",
                "Set timeframe explicitly",
                "Force overwrite timeframe",
                "Validate timeframe consistency",
                "Efficient Data Slicing",
                "Efficient slicing for large datasets",
                "Memory-efficient processing of large datasets",
                "Data Aggregation and Resampling",
                "Aggregate data to different [timeframes](../guides/data-management.md#timeframes)",
                "Example: Convert 1m data to 5m",
                "Caching and Performance Optimization",
                "Basic Caching Usage",
                "Save metadata to cache",
                "Load from cache",
                "Advanced Caching Examples",
                "Cache expensive computations",
                "Cache with expiration",
                "Performance Optimization Strategies",
                "Optimize data loading with chunking",
                "Memory-efficient data processing",
                "Cache Management",
                "Cache cleanup utilities",
                "Cache size monitoring",
                "Storage Configuration Optimization",
                "Optimize Zarr storage settings",
                "Monitor storage performance",
                "Data Processing and Transformation",
                "Data Cleaning and Validation",
                "Comprehensive data cleaning function",
                "Example usage",
                "Gap Detection and Filling",
                "Detect gaps in time series data",
                "Fill gaps with interpolated data",
                "Example usage",
                "Data Transformation and Feature Engineering",
                "Add [technical indicators](../guides/[strategy](../guides/strategy-development.md)-development.md#technical-indicators) and features",
                "Rolling statistics helper functions",
                "Storage Configuration and Optimization",
                "Zarr Storage Configuration",
                "Configure Zarr storage for optimal performance",
                "Create optimized ZarrInstance",
                "LMDB Configuration and Tuning",
                "LMDB performance tuning",
                "Monitor LMDB performance",
                "Storage Optimization Strategies",
                "Optimize storage for different access patterns",
                "Storage space analysis",
                "Data Validation and Integrity",
                "Comprehensive data validation",
                "Batch validation across multiple pairs",
                "Troubleshooting Storage Issues",
                "Diagnose common storage problems",
                "Repair corrupted data",
                "Real-Time Data Pipelines and Monitoring",
                "Real-Time Data Pipeline Architecture",
                "Complete real-time data pipeline setup",
                "Advanced Watcher Management",
                "Comprehensive watcher lifecycle management",
                "Real-Time Data Processing",
                "Real-time data processing and aggregation",
                "Monitoring and Alerting",
                "Comprehensive pipeline monitoring",
                "Alert system integration",
                "Data Quality Monitoring",
                "Real-time data quality monitoring",
                "Complete Pipeline Example",
                "Complete example: Setting up a production real-time data pipeline",
                "Graceful shutdown",
                "Usage example",
                "pipeline = setup_production_pipeline()",
                "# Run for some time...",
                "sleep(3600)  # Run for 1 hour",
                "# Shutdown gracefully",
                "shutdown_production_pipeline(pipeline)"
            ],
            "excerpt": "Data Management <!-- Keywords: OHLCV data, Zarr storage, LMDB, data fetching, scrapers, watchers, historical data, real-time data, market data Description: Comprehensive data management system for ...",
            "difficulty": "advanced",
            "title": "data",
            "content_length": 9980,
            "url": "/data.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "devdocs.md",
            "headings": [
                "Development Documentation",
                "Architecture Overview",
                "System Architecture",
                "Core Components",
                "Engine Module",
                "Execution Modes",
                "Data Pipeline",
                "Exchange Integration",
                "Module Relationships",
                "Data Flow Architecture",
                "Development Setup",
                "Prerequisites",
                "Initial Setup",
                "Enable direnv (recommended)",
                "Or manually set environment",
                "Start [Julia](https://julialang.org/) in project",
                "Install all dependencies",
                "Verify installation",
                "Development Environment",
                "Recommended Julia Setup",
                "In your Julia startup file (~/.julia/config/startup.jl)",
                "Enable development mode",
                "IDE Configuration",
                "PlanarDev Utilities",
                "Precompilation Control",
                "Method Invalidation Strategy",
                "Load modules that heavily trigger invalidations first",
                "Load less impactful modules later",
                "...",
                "Handling Segfaults",
                "Dependency Management",
                "See Also",
                "Contribution Guidelines",
                "Code Style and Standards",
                "Julia Formatting",
                "Install JuliaFormatter",
                "Format code",
                "Naming Conventions",
                "Documentation Standards",
                "Arguments",
                "Returns",
                "Examples",
                "See Also",
                "Testing Patterns",
                "Unit Testing Structure",
                "test/test_mymodule.jl",
                "Integration Testing",
                "test/integration/test_strategy_execution.jl",
                "Property-Based Testing",
                "Extension Best Practices",
                "Creating New Modules",
                "Only essential dependencies",
                "src/MyNewModule.jl",
                "Export public interface",
                "Include submodules",
                "Implementing Custom Strategies",
                "Define strategy type",
                "Implement required interface",
                "Performance Optimization Guidelines",
                "Good: Type-stable function",
                "Avoid: Type-unstable function",
                "Good: Pre-allocate arrays",
                "Avoid: Allocating in loops",
                "Benchmark your functions",
                "Profile memory usage",
                "Check for type instabilities",
                "Debugging and Profiling",
                "Debugging Strategies",
                "Set breakpoint",
                "Or use Infiltrator for lightweight debugging",
                "Test with different data",
                "Validate results",
                "Performance Profiling",
                "Profile your code",
                "View results",
                "Or use PProf for flame graphs",
                "Continuous Integration",
                "GitHub Actions Workflow",
                ".github/workflows/ci.yml",
                "Release Process",
                "Version Management",
                "Documentation Updates",
                "Generate documentation",
                "Community Guidelines",
                "Issue Reporting",
                "Pull Request Process",
                "Code Review Standards"
            ],
            "excerpt": "Development Documentation This comprehensive guide covers Planar's architecture, development setup, contribution guidelines, and best practices for extending the framework. Architecture Overview ...",
            "difficulty": "advanced",
            "title": "devdocs",
            "content_length": 5769,
            "url": "/devdocs.html",
            "description": "",
            "category": "getting-started"
        },
        {
            "path": "disambiguation.md",
            "headings": [
                "Glossary and Disambiguation",
                "Core Concepts",
                "Trading Terms",
                "Position and Order Terms",
                "Data and Market Terms",
                "Exchange and Infrastructure Terms",
                "Planar-Specific Terms",
                "Strategy System",
                "Execution Modes",
                "Data System",
                "Optimization and Analysis",
                "Visualization",
                "Variable Naming Conventions",
                "File and Directory Conventions",
                "See Also"
            ],
            "excerpt": "Glossary and Disambiguation This glossary defines key terms and concepts used throughout Planar documentation and codebase. Core Concepts Trading Terms Asset : A structure created from parsing a ...",
            "difficulty": "advanced",
            "title": "disambiguation",
            "content_length": 6001,
            "url": "/disambiguation.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "documentation-index.md",
            "headings": [
                "Documentation Index",
                "Topics by Category",
                "Getting Started",
                "Strategy Development",
                "Data Management",
                "Execution Modes",
                "Optimization",
                "Visualization",
                "Customization",
                "Function Index",
                "Core Functions",
                "Data Functions",
                "Order Functions",
                "Analysis Functions",
                "Plotting Functions",
                "Configuration Topics",
                "Strategy Configuration",
                "System Configuration",
                "Error Handling",
                "Common Issues",
                "Debugging",
                "File Locations",
                "User Files",
                "Documentation",
                "Search Keywords",
                "Trading Concepts",
                "Technical Concepts",
                "Performance Concepts",
                "See Also",
                "Quick Reference",
                "Essential Commands",
                "Load Planar",
                "Create strategy",
                "Download data",
                "Load data",
                "Run [backtest](../guides/execution-modes.md#simulation-mode)",
                "Plot results",
                "Key File Paths",
                "Important Links"
            ],
            "excerpt": "Documentation Index This comprehensive index helps you quickly find information across all Planar documentation. Topics by Category Getting Started - Installation - Docker, Source - Quick Start - ...",
            "difficulty": "advanced",
            "title": "documentation-index",
            "content_length": 4228,
            "url": "/documentation-index.html",
            "description": "",
            "category": "getting-started"
        },
        {
            "path": "exchanges.md",
            "headings": [
                "Exchanges",
                "Exchange Types",
                "Construct and query exchanges",
                "See Also",
                "Fetching data from exchanges"
            ],
            "excerpt": "Exchanges Every trade, order, asset instance, and strategy is parameterized against an , which is a type constructed from the name ( ) of an exchange.md). Currently, the bot supports ...",
            "difficulty": "intermediate",
            "title": "exchanges",
            "content_length": 2234,
            "url": "/exchanges.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "index.md",
            "headings": [
                "What's Next?",
                "👋 First Time Here?",
                "🔄 Returning User?",
                "🎯 Ready to Build?",
                "🚀 Going Live?"
            ],
            "excerpt": "What's Next? 👋 First Time Here? Recommended path: 📥 Installation → ⚡ Quick Start → 🎯 First Strategy 🔄 Returning User? Quick access: 📚 API Docs | 🔍 Search | 💬 Community 🎯 ...",
            "difficulty": "advanced",
            "title": "index",
            "content_length": 329,
            "url": "/index.html",
            "description": "",
            "category": "getting-started"
        },
        {
            "path": "metrics.md",
            "headings": [
                "Metrics Module Documentation",
                "Resampling Trades",
                "Trade Balance Calculation",
                "Performance Metrics",
                "Multi-Metric Calculation",
                "See Also"
            ],
            "excerpt": "Metrics Module Documentation The module provides functions for analyzing the outcomes of backtest-mode) runs within the trading strategy framework. Resampling Trades Using the function, trades can be ...",
            "difficulty": "advanced",
            "title": "metrics",
            "content_length": 1728,
            "url": "/metrics.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "mobile-responsive-design.md",
            "headings": [
                "Mobile-Responsive Design Considerations",
                "Current Implementation",
                "Mobile Optimization Features",
                "Navigation",
                "Content Layout",
                "Code Examples",
                "Tables and Data",
                "Performance Considerations",
                "Loading Speed",
                "Bandwidth Efficiency",
                "Accessibility Features",
                "Screen Reader Support",
                "Keyboard Navigation",
                "Visual Accessibility",
                "Testing Recommendations",
                "Device Testing",
                "Browser Testing",
                "Performance Testing",
                "Implementation Guidelines",
                "CSS Best Practices",
                "HTML Structure",
                "Image Optimization",
                "Future Enhancements",
                "Progressive Web App Features",
                "Advanced Mobile Features",
                "Enhanced Search",
                "Monitoring and Analytics",
                "Performance Metrics",
                "Usage Analytics",
                "Validation Tools",
                "Automated Testing",
                "Manual Testing",
                "Best Practices Summary",
                "See Also",
                "Resources"
            ],
            "excerpt": "Mobile-Responsive Design Considerations This document outlines design considerations for ensuring Planar documentation is accessible and usable across different devices and screen sizes. Current ...",
            "difficulty": "advanced",
            "title": "mobile-responsive-design",
            "content_length": 5630,
            "url": "/mobile-responsive-design.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "optimization.md",
            "headings": [
                "Optimization",
                "Complete Optimization Example",
                "Define your strategy with optimization support",
                "Apply parameters before each [backtest](../guides/execution-modes.md#simulation-mode) run",
                "Define optimization objective",
                "Alternative multi-objective example",
                "Parameter Definition Patterns",
                "Basic Parameter Ranges",
                "Advanced Parameter Constraints",
                "Grid search",
                "Grid Search Examples",
                "Simple grid search with default settings",
                "Grid search with multiple splits for robustness",
                "Grid search with periodic saving",
                "Resume a previously interrupted grid search",
                "Resume with different split [configuration](../config.md)",
                "Run grid search - all metrics will be available in results DataFrame",
                "Access results",
                "Black box optimization",
                "Black Box Optimization Examples",
                "Default BBO optimization",
                "BBO with custom iterations and splits",
                "BBO with time limit",
                "Differential Evolution (BBO)",
                "CMA Evolution Strategy",
                "Genetic Algorithm",
                "LBFGS (gradient-based, requires differentiable objective)",
                "Particle Swarm Optimization",
                "Run multiple optimization jobs in parallel",
                "Stop early if objective falls below threshold",
                "Complex optimization with custom settings",
                "Access optimization results",
                "Precision Support",
                "In your strategy's OptSetup function:",
                "Precision and Categorical Examples",
                "Speed Optimizations",
                "Example with speed optimizations",
                "To enable parallel optimization, add this to your strategy:",
                "Performance Optimization Examples",
                "In your strategy module",
                "Ensure your strategy doesn't use shared mutable state",
                "Optimization with aggressive performance settings",
                "For production optimization, use full parameter space and longer context",
                "Custom callback for monitoring optimization progress",
                "Run optimization with monitoring",
                "Monitor optimization session",
                "Bayesian Optimization Examples",
                "First install BayesianOptimization.jl",
                "Basic Bayesian optimization",
                "Define custom GP model for your strategy",
                "Run with custom settings",
                "Run Bayesian optimization",
                "Multi-threading",
                "Grid Search",
                "Black Box Optimization",
                "Plotting Results",
                "Optimization Result Visualization Examples",
                "Run optimization",
                "Basic scatter plot of results",
                "2D parameter space with objective as color",
                "3D scatter plot",
                "Surface plot for continuous parameters",
                "Contour plot for parameter relationships",
                "Grouped results by categorical parameter",
                "Multiple metrics comparison",
                "Plot optimization progress over time",
                "Best objective over time (cumulative best)",
                "Box plots for parameter sensitivity",
                "Group results by parameter ranges",
                "Correlation heatmap of parameters and objectives",
                "Interactive 3D scatter plot",
                "Add hover information",
                "Find best parameters",
                "Top N results",
                "Plot top results",
                "Parameter distribution of top results",
                "See Also",
                "Optimization Result Analysis",
                "Interpreting Optimization Results",
                "After running optimization",
                "Examine the results structure",
                "Basic statistics",
                "Calculate parameter correlations with objective",
                "Sort parameters by absolute correlation",
                "Compare top 10% vs bottom 10% results",
                "Test if parameter distributions differ significantly",
                "Overfitting Detection and Validation",
                "Analyze results across different splits",
                "Define validation function for out-of-sample testing",
                "Validate top parameters on out-of-sample data",
                "Test parameter robustness by adding noise",
                "Test robustness of best parameters",
                "Visualization for Overfitting Detection",
                "Distribution of objective values",
                "Q-Q plot to check for normality",
                "Box plot by parameter values (for discrete parameters)",
                "Analyze parameter space coverage",
                "Implement walk-forward analysis for temporal robustness",
                "Run walk-forward analysis on top parameter combinations",
                "Analyze walk-forward results",
                "Plot walk-forward results",
                "Best Practices for Result Analysis",
                "Never deploy parameters without out-of-sample validation",
                "Identify if multiple parameter combinations perform similarly",
                "Create comprehensive analysis report"
            ],
            "excerpt": "Optimization Planar provides tools to optimize strategy parameters. Optimzations are managed through the type. Which is a structure that holds informations about the optimization parameters, ...",
            "difficulty": "advanced",
            "title": "optimization",
            "content_length": 3120,
            "url": "/optimization.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "plotting.md",
            "headings": [
                "Plotting and Visualization",
                "Alternatively:",
                "Backend Selection and Setup",
                "GLMakie (Desktop Applications)",
                "Set as default backend",
                "Verify backend is working",
                "WGLMakie (Web Applications)",
                "Set as default backend",
                "For Jupyter notebooks, plots will display inline automatically",
                "CairoMakie (Static Images)",
                "Set as default backend",
                "Save plots to files",
                "[OHLCV](../guides/data-management.md#ohlcv-data) Charts",
                "Basic [OHLCV](../guides/data-management.md#ohlcv-data) Chart",
                "Customizing OHLCV Charts",
                "Load data",
                "Basic customization",
                "Advanced styling",
                "Time Range Selection",
                "Last 30 days",
                "Specific date range",
                "Multiple Timeframes",
                "Load different [timeframes](../guides/data-management.md#timeframes)",
                "Create subplot layout",
                "1-hour chart",
                "4-hour chart",
                "Daily chart",
                "Trading History Visualization",
                "Basic Trade Visualization",
                "Display the first 100 trades for an asset with the symbol \"eth\"",
                "Advanced Trade Analysis",
                "Show all trades with custom styling",
                "Filter trades by date range",
                "Show trades with profit/loss coloring",
                "Trade Performance Overlay",
                "Show trades with running balance",
                "Add trade statistics",
                "Multi-Asset Trade Comparison",
                "Compare trades across multiple assets",
                "Aggregated Trade History for a Single Asset",
                "Basic Balloons Chart",
                "Aggregate trades within a 1-day [timeframe](../guides/data-management.md#timeframes) for the \"eth\" asset.",
                "Customizing Balloons Visualization",
                "Custom timeframes and styling",
                "Different aggregation periods",
                "Advanced Balloons Analysis",
                "Show volume distribution",
                "Add trade frequency overlay",
                "Compare different [strategies](../guides/strategy-development.md)",
                "Aggregated Trade History for Multiple Assets",
                "Basic Multi-Asset Balloons",
                "Aggregate trades within a 1-week timeframe for all assets in the strategy universe",
                "Portfolio-Wide Analysis",
                "Show all assets with benchmarking",
                "Custom asset selection",
                "Advanced Multi-Asset Visualization",
                "Portfolio heat map",
                "Correlation analysis with balloons",
                "Performance comparison",
                "Sector and Category Analysis",
                "Group assets by category",
                "Custom Indicators",
                "Line Indicators",
                "Calculate 7-period and 14-period simple moving averages (SMA)",
                "Generate an OHLCV chart and overlay it with the SMA lines",
                "Advanced Line Indicators",
                "Multiple moving averages with custom styling",
                "Short-term EMAs",
                "Add with custom colors and styles",
                "Add legend",
                "[RSI](../guides/strategy-development.md#technical-indicators) in separate subplot",
                "Channel Indicators",
                "Compute Bollinger Bands",
                "Create a channel indicator plot with the Bollinger Bands data",
                "Advanced Channel Indicators",
                "Bollinger Bands with custom parameters",
                "Add multiple Bollinger Band channels",
                "Keltner Channels",
                "Volume Indicators",
                "Volume-based indicators",
                "Volume [moving average](../guides/strategy-development.md#technical-indicators)",
                "On-Balance Volume",
                "Oscillator Indicators",
                "Multiple oscillators in subplots",
                "MACD",
                "Stochastic",
                "Custom Indicator Development",
                "Create your own indicator function",
                "Use custom indicator",
                "Add buy/sell signals based on momentum",
                "Styling and Customization",
                "Color Schemes and Themes",
                "Dark theme",
                "Light theme",
                "Custom color palette",
                "Chart Layout and Sizing",
                "Custom figure size and layout",
                "Main chart with custom aspect ratio",
                "Volume subplot",
                "Indicator subplots",
                "Link x-axes for synchronized zooming",
                "Export and Saving Options",
                "High-resolution PNG",
                "Vector formats",
                "Custom DPI for print",
                "Batch export multiple timeframes",
                "Pe",
                "Strategy Performance Charts",
                "Comprehensive performance dashboard",
                "Usage",
                "Risk Metrics Visualization",
                "Risk analysis charts",
                "Optimization Result Visualization",
                "Parameter Optimization Heatmaps",
                "2D [parameter optimization](../[optimization](../optimization.md).md) results",
                "Usage with [optimization](../optimization.md) results",
                "3D Optimization Surface",
                "3D surface plot for [parameter optimization](../optimization.md)",
                "Optimization Progress Tracking",
                "Track optimization progress over iterations",
                "Large Dataset Visualization",
                "Progressive Data Loading",
                "Handle large datasets efficiently",
                "Usage",
                "Memory-Efficient Plotting",
                "Downsample large datasets for plotting",
                "Usage",
                "Interactive Features and Widgets",
                "Interactive Parameter Adjustment",
                "Create interactive parameter adjustment",
                "Zoom and Pan Features",
                "Enhanced zoom and pan functionality",
                "Troubleshooting and Performance",
                "Common Plotting Issues",
                "Backend Problems",
                "Check current backend",
                "Switch backends if needed",
                "Test backend functionality",
                "Memory Issues with Large Plots",
                "Monitor memory usage",
                "Usage",
                "Performance Optimization",
                "Optimize plotting performance",
                "Apply optimizations",
                "Best Practices",
                "Example of best practices implementation",
                "Usage",
                "GLMakie Advanced Setup",
                "Installation and Configuration",
                "Install with specific OpenGL version support",
                "Configure OpenGL settings",
                "GPU-specific optimizations",
                "Multi-Monitor Support",
                "Configure for multiple monitors",
                "Create chart on specific monitor",
                "Performance Tuning",
                "High-performance [configuration](../config.md) for large datasets",
                "WGLMakie Advanced Setup",
                "Web Application Configuration",
                "Configure for web deployment",
                "Create web-optimized chart",
                "Jupyter Notebook Integration",
                "Jupyter-specific [configuration](../config.md)",
                "Usage in Jupyter",
                "Create notebook-friendly plots",
                "Real-time Web Updates",
                "Real-time chart updates for web applications",
                "CairoMakie for Publication Quality",
                "High-Resolution Export Configuration",
                "Configure for publication quality",
                "Create publication-quality chart",
                "Export at different resolutions",
                "Batch Processing for Reports",
                "Batch generate charts for reports",
                "Usage",
                "Backend Performance Comparison",
                "Benchmarking Different Backends",
                "Run benchmark",
                "Display results",
                "Memory Usage Optimization",
                "Monitor and optimize memory usage across backends",
                "Apply optimizations",
                "See Also",
                "Advanced Interactive Features",
                "Custom Interaction Handlers",
                "Create custom mouse interaction",
                "Real-time Data Streaming",
                "Real-time streaming chart with performance optimization",
                "Simulate new [OHLCV data](../guides/data-management.md#ohlcv-data)",
                "Multi-Window Management",
                "Advanced multi-window plotting system",
                "Usage example",
                "Create multiple analysis windows",
                "Add indicator plots...",
                "Add performance plots...",
                "Switch between windows",
                "Tile all windows"
            ],
            "excerpt": "Plotting and Visualization The Plotting module utilizes Makie for creating visualizations. It is important to note that graphical backends are not automatically included with the module and must be ...",
            "difficulty": "advanced",
            "title": "plotting",
            "content_length": 6884,
            "url": "/plotting.html",
            "description": "",
            "category": "getting-started"
        },
        {
            "path": "presentation.md",
            "headings": [
                "Why Planar?"
            ],
            "excerpt": "Why Planar?",
            "difficulty": "beginner",
            "title": "presentation",
            "content_length": 11,
            "url": "/presentation.html",
            "description": "",
            "category": "configuration"
        },
        {
            "path": "remote.md",
            "headings": [
                "Control the bot remotely",
                "Requirements",
                "See Also",
                "The telegram client"
            ],
            "excerpt": "Control the bot remotely A planar strategy can be controlled with telegram. Requirements Create a new telegram bot: - Initiate a chat with - send the command - follow the prompts Get a : - Initiate a ...",
            "difficulty": "beginner",
            "title": "remote",
            "content_length": 1295,
            "url": "/remote.html",
            "description": "",
            "category": "configuration"
        },
        {
            "path": "strategy.md",
            "headings": [
                "Strategy Development Guide",
                "Quick Navigation",
                "Prerequisites",
                "Related Topics",
                "Strategy Fundamentals",
                "Architecture Overview",
                "Core Components",
                "Strategy Type Hierarchy",
                "Dispatch System",
                "Key Dispatch Patterns",
                "Called during strategy loading (before construction)",
                "Called during strategy execution (after construction)",
                "Strategy lifecycle events",
                "Market and optimization events",
                "Exchange-Specific Dispatch",
                "Default behavior for all [exchanges](../exchanges.md)",
                "Specific behavior for Bybit",
                "Margin Trading Concepts",
                "Margin Modes",
                "Position-specific [leverage](../guides/strategy-development.md#margin-modes) updates",
                "Position Management",
                "Check position direction",
                "Access position information",
                "Position sizing with margin",
                "Risk Management Patterns",
                "Dynamic leverage based on volatility",
                "Position size limits",
                "Creating a New Strategy",
                "Interactive Strategy Generator",
                "Non-Interactive Strategy Creation",
                "Skip interaction by passing ask=false",
                "Or use a configuration object",
                "Loading a Strategy",
                "Basic Strategy Loading",
                "Create configuration object",
                "Load the Example strategy",
                "Strategy Type Structure",
                "Example Strategy Module",
                "Dispatch Convention",
                "Manual setup",
                "Strategy Interface Details",
                "Function Signature Convention",
                "Strategy Lifecycle",
                "Essential Strategy Methods",
                "Required Methods",
                "Main execution method - called on each timestep",
                "Define tradeable markets",
                "Optional Methods",
                "Custom strategy loading",
                "Strategy reset behavior",
                "Warmup period for data requirements",
                "Advanced Dispatch Patterns",
                "Conditional Dispatch by Mode",
                "Different behavior for different execution modes",
                "Parameter-Based Dispatch",
                "Different strategies based on margin mode",
                "List of strategy call! functions",
                "Removing a strategy",
                "Advanced Strategy Examples",
                "Multi-Timeframe Strategy",
                "Portfolio Rebalancing Strategy",
                "Advanced Optimization Strategy",
                "Optimization configuration",
                "Strategy Setup and Loading (Preserved)",
                "Project-Based Strategies",
                "Strategy Configuration",
                "Strategy Examples",
                "Simple Moving Average Strategy",
                "Margin Trading Strategy",
                "Best Practices",
                "Code Organization",
                "Error Handling",
                "Performance Optimization",
                "Testing and Validation",
                "Add validation in development",
                "Resizeable Universe",
                "Dynamic Asset Management",
                "Add new asset to universe",
                "Remove asset from universe",
                "Troubleshooting and Debugging",
                "Common Strategy Issues",
                "1. Strategy Loading Problems",
                "Strategy implementation",
                "2. Data Access Issues",
                "3. Order Execution Problems",
                "4. Margin Trading Issues",
                "Debugging Techniques",
                "1. Logging and Monitoring",
                "2. Strategy State Inspection",
                "Add debugging methods to your strategy",
                "Call during strategy execution",
                "3. Performance Profiling",
                "After running, analyze the profile",
                "4. Unit Testing Strategies",
                "test/test_mystrategy.jl",
                "Error Recovery Patterns",
                "1. Graceful Degradation",
                "2. Circuit Breaker Pattern",
                "Performance Optimization Tips",
                "Good: Cache expensive calculations",
                "Order Types and Execution",
                "Market Orders",
                "Basic market buy order",
                "Market sell order",
                "Market order with position specification (for [margin trading](../guides/strategy-development.md#margin-trading-concepts))",
                "Limit Orders",
                "Limit buy order (buy at or below specified price)",
                "Limit sell order (sell at or above specified price)",
                "Advanced limit order with time-in-force",
                "Stop Orders",
                "Stop loss order (sell when price falls below trigger)",
                "Stop limit order (becomes limit order when triggered)",
                "Order Management Patterns",
                "Cancel all orders for an asset",
                "Cancel specific order type",
                "Replace existing orders with new ones",
                "Position Management for Margin Trading",
                "Position Types and States",
                "Check position state",
                "Get position-specific information",
                "Leverage Management",
                "Dynamic leverage based on volatility",
                "Set leverage for specific position",
                "Set leverage for both long and short positions",
                "Position Sizing Strategies",
                "Fixed fractional position sizing",
                "Volatility-adjusted position sizing",
                "Kelly criterion position sizing",
                "Risk Management Patterns",
                "Stop Loss Strategies",
                "Fixed percentage stop loss",
                "Trailing stop loss",
                "ATR-based stop loss",
                "Take Profit Strategies",
                "Fixed take profit",
                "Scaled take profit (partial profit taking)",
                "Portfolio Risk Management",
                "Maximum drawdown protection",
                "Position correlation limits",
                "Emergency position closure",
                "Risk Metrics and Monitoring",
                "Real-time risk monitoring",
                "Se",
                "Core Documentation",
                "Advanced Topics",
                "API Reference",
                "Support",
                "Next Steps"
            ],
            "excerpt": "Strategy Development Guide <!-- Keywords: strategy development, call! function, dispatch system-development.mddispatch-system), margin trading-development.mdmargin-trading-concepts), ...",
            "difficulty": "advanced",
            "title": "strategy",
            "content_length": 6774,
            "url": "/strategy.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "troubleshooting.md",
            "headings": [
                "Troubleshooting Overview",
                "Quick Access to Solutions",
                "Most Common Issues",
                "Emergency Quick Fixes",
                "Clear all caches and restart fresh",
                "Comprehensive Troubleshooting Guides",
                "Legacy Content Notice",
                "Quick Diagnostic Checklist",
                "Precompilation Issues",
                "Dependency Conflicts",
                "Step 1: Resolve all dependencies",
                "Step 2: If conflicts persist, try manual resolution",
                "Step 3: For persistent issues, clear package cache",
                "REPL Startup Issues",
                "Preferred: Start Julia with project directly",
                "Alternative: For interactive features",
                "Check current project status",
                "Python-Dependent Precompilation",
                "Step 1: Clear global caches before precompilation",
                "Step 2: Avoid Python objects in precompilable functions",
                "Bad: Using @py in precompilable code",
                "Good: Lazy initialization of Python objects",
                "Step 3: Force Python environment reset if needed",
                "Persistent Precompilation Skipping",
                "Check environment variables",
                "Clear environment variables if needed",
                "Force precompilation",
                "Debug Symbol Issues",
                "Option 1: Precompile with debug enabled",
                "Option 2: Disable debug for problematic modules",
                "Option 3: Selective debug enabling",
                "Python Integration Issues",
                "Missing Python Dependencies",
                "Step 1: Clean and rebuild Python environment",
                "Step 2: Verify Python environment",
                "Step 3: Manual package installation if needed",
                "CondaPkg Environment Issues",
                "Step 1: Force environment resolution",
                "Step 2: Check CondaPkg status",
                "Step 3: Reset environment if needed",
                "Python-Julia Interop Issues",
                "Type conversion debugging",
                "Async operation handling",
                "Use pyimport_conda for better async support",
                "Memory management",
                "Exchange Connection Issues",
                "Unresponsive Exchange Instance",
                "Step 1: Test basic connectivity",
                "Step 2: Reset exchange instance",
                "Step 3: Check and adjust timeout settings",
                "API Authentication Issues",
                "Step 1: Verify credentials format",
                "Check user/[secrets.toml](../config.md#secrets-management) for correct format:",
                "[exchanges.binance]",
                "apiKey = \"your_api_key\"",
                "secret = \"your_secret\"",
                "sandbox = false  # Set to true for testnet",
                "Step 2: Test authentication",
                "Step 3: Check API permissions",
                "Ensure your API key has required permissions:",
                "- Spot trading (for spot [strategies](../guides/strategy-development.md))",
                "- Futures trading (for margin [strategies](../guides/strategy-development.md))",
                "- Read permissions for data fetching",
                "Rate Limiting Issues",
                "Step 1: Adjust rate limiting",
                "Step 2: Implement request batching",
                "Use batch operations where available",
                "Step 3: Monitor and log API usage",
                "Data Storage and Management Issues",
                "LMDB Size Limitations",
                "Step 1: Check current usage",
                "Step 2: Increase database size",
                "Step 3: Monitor usage and set appropriate size",
                "Increase the mapsize before reaching the limit to continue saving data",
                "Data Corruption Issues",
                "Step 1: Recreate corrupted database",
                "Step 2: Backup and restore if needed",
                "Manual deletion (default path is under Data.DATA_PATH)",
                "Manually delete corrupted files if needed",
                "Step 3: Verify data integrity after recreation",
                "LMDB Platform Compatibility",
                "Option 1: Disable LMDB if not available",
                "Add to your [strategy](../guides/strategy-development.md) Project.toml:",
                "Option 2: Use alternative storage",
                "Configure alternative data storage in [strategy](../guides/strategy-development.md)",
                "Use in-memory or file-based storage instead",
                "Option 3: Manual LMDB installation (Linux/macOS)",
                "Install system LMDB library",
                "Ubuntu/Debian: sudo apt-get install liblmdb-dev",
                "macOS: brew install lmdb",
                "Data Fetching and Pipeline Issues",
                "Step 1: Test data fetching",
                "Step 2: Implement retry logic",
                "Step 3: Validate data quality",
                "Plotting and Visualization Issues",
                "Misaligned Plotting Tooltips",
                "Step 1: Switch to GLMakie for better rendering",
                "Step 2: If GLMakie has issues, try CairoMakie",
                "Step 3: Check current backend",
                "Step 4: Reset backend if needed",
                "Backend Installation and Configuration Issues",
                "Step 1: Install and test backends",
                "For GLMakie (requires OpenGL)",
                "For WGLMakie (web-based)",
                "For CairoMakie (software rendering)",
                "Step 2: Test basic plotting",
                "Install required libraries",
                "For headless servers, use Xvfb",
                "Install XQuartz if needed",
                "Plot Performance Issues",
                "Step 1: Optimize data for plotting",
                "Step 2: Use appropriate backend for data size",
                "GLMakie: Best for interactive plots with moderate data",
                "CairoMakie: Best for high-quality static plots",
                "WGLMakie: Best for web deployment",
                "Step 3: Implement progressive loading",
                "Interactive Features Not Working",
                "Step 1: Ensure using interactive backend",
                "Step 2: Enable interactivity explicitly",
                "Step 3: Test basic interactivity",
                "Step 4: For Jupyter/web environments",
                "Strategy Development and Execution Issues",
                "Strategy Loading and Compilation Issues",
                "Step 1: Verify strategy configuration in user/[planar.toml](../config.md#configuration-file)",
                "or",
                "Step 2: Test strategy loading",
                "Step 3: Check for common syntax issues",
                "- Missing module declaration",
                "- Incorrect function signatures",
                "- Missing dependencies in Project.toml",
                "Strategy Execution Errors",
                "Step 1: Enable detailed logging",
                "Step 2: Test strategy components individually",
                "Test data access",
                "Test signal generation",
                "Step 3: Use [simulation](../guides/execution-modes.md#simulation-mode) mode for debugging",
                "Order Execution Issues",
                "Step 1: Validate order parameters",
                "Step 2: Check account balance and permissions",
                "Step 3: Test order execution in paper mode first",
                "Development and Debugging Issues",
                "VSCode Debugging Configuration",
                "Step 1: Use @infiltrate for interactive debugging",
                "Step 2: Add strategic logging points",
                "Step 3: Use try-catch for error isolation",
                "Performance Debugging",
                "Step 1: Profile strategy execution",
                "Step 2: Check memory allocations",
                "Step 3: Optimize data operations",
                "Use views instead of copies",
                "Pre-allocate arrays",
                "Environment and Configuration Issues",
                "Docker and Container Issues",
                "Step 1: Test basic Docker functionality",
                "Step 2: Check Planar container",
                "Step 3: Fix permission issues (Linux)",
                "Logout and login again",
                "Step 4: Mount user directory correctly",
                "Environment Variable Issues",
                "Step 1: Check current environment",
                "Step 2: Verify direnv configuration",
                "Step 3: Test variable loading in Julia",
                "Platform-Specific Issues",
                "Linux-Specific Issues",
                "Install required system packages",
                "For headless systems",
                "macOS-Specific Issues",
                "Install Xcode command line tools",
                "Install required packages via Homebrew",
                "Windows-Specific Issues",
                "Enable long paths",
                "Set execution policy",
                "Update graphics drivers through Device Manager",
                "Performance Troubleshooting",
                "Strategy Execution Performance",
                "Profile strategy execution",
                "View results",
                "Focus on specific functions",
                "Issue 1: Inefficient data access",
                "Bad: Accessing data repeatedly",
                "Good: Vectorized operations or pre-computed access",
                "or use views for large datasets",
                "Issue 2: Excessive memory allocations",
                "Bad: Creating new arrays in loops",
                "Good: Pre-allocate arrays",
                "Issue 3: Type instability",
                "Bad: Mixed types",
                "Good: Consistent types",
                "Memory Usage Optimization",
                "Benchmark memory allocations",
                "Monitor memory usage",
                "Use with strategy execution",
                "Technique 1: Use views instead of copies",
                "Bad: Creates copies",
                "Good: Uses views",
                "Technique 2: Manage large datasets with chunking",
                "Technique 3: Reuse pre-allocated arrays",
                "Data-Related Performance Issues",
                "Issue 1: Inefficient data loading",
                "Bad: Loading all data at once",
                "Good: Progressive loading with caching",
                "Issue 2: Database performance",
                "Optimize LMDB settings for performance",
                "Use batch operations when possible",
                "Issue 3: Zarr array [optimization](../optimization.md)",
                "Configure chunk sizes for your access patterns",
                "Optimization and Backtesting Performance",
                "Issue 1: Inefficient parameter space exploration",
                "Bad: Too fine-grained grid search",
                "Good: Coarse initial search, then refinement",
                "Then refine around best results",
                "Issue 2: Inefficient [backtesting](../guides/execution-modes.md#simulation-mode)",
                "Bad: Recalculating indicators for each parameter set",
                "Good: Pre-compute shared calculations",
                "Parallel Processing and Threading",
                "Check current threading setup",
                "Issue 1: Thread-unsafe operations",
                "Bad: Shared mutable state",
                "Good: Thread-local storage or atomic operations",
                "Issue 2: Load balancing",
                "Bad: Uneven work distribution",
                "Good: Balanced work distribution",
                "Plotting and Visualization Performance",
                "Issue 1: Plotting too much data",
                "Bad: Plotting millions of points",
                "Good: Downsample for visualization",
                "Issue 2: Backend selection for performance",
                "For large datasets, use appropriate backend",
                "Choose based on use case",
                "System Resource Monitoring",
                "System resource monitoring",
                "Disk I/O monitoring",
                "Combined monitoring",
                "See Also",
                "Getting Help",
                "Before Seeking Help",
                "Where to Get Help",
                "Creating Effective Bug Reports"
            ],
            "excerpt": "Troubleshooting Overview This page provides quick access to troubleshooting resources. For detailed solutions, visit the specific troubleshooting guides in the troubleshooting section. Quick Access ...",
            "difficulty": "beginner",
            "title": "Troubleshooting Overview",
            "content_length": 13151,
            "url": "/troubleshooting.html",
            "description": "Quick access to troubleshooting resources and common solutions",
            "category": "troubleshooting"
        },
        {
            "path": "types.md",
            "headings": [
                "Types",
                "Instruments",
                "Derivatives only fields",
                "Asset instances",
                "Positions",
                "Orders",
                "Trades",
                "Dates",
                "See Also",
                "[OHLCV](../guides/data-management.md#ohlcv-data)"
            ],
            "excerpt": "Types By learning the main types you get to know the building blocks to start composing your strategy for backtesting-mode) and/or live trading. The main type is the and it has its own page.md). ...",
            "difficulty": "advanced",
            "title": "types",
            "content_length": 8817,
            "url": "/types.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "API/api.md",
            "headings": [
                "API Reference",
                "Core Modules",
                "[Data Management](data.md)",
                "[Engine](engine.md)",
                "[Exchanges]([exchanges](../exchanges.md).md)",
                "[Instruments](instruments.md)",
                "[Strategies]([strategies](../guides/strategy-development.md).md)",
                "Data Processing",
                "[Fetch](fetch.md)",
                "[Processing](processing.md)",
                "[Prices](prices.md)",
                "[Collections](collections.md)",
                "Execution & Trading",
                "[Executors](executors.md)",
                "[Instances](instances.md)",
                "[CCXT Integration](ccxt.md)",
                "Analysis & Optimization",
                "[Metrics](metrics.md)",
                "[Optimization]([optimization](../optimization.md).md)",
                "[Strategy Tools](strategytools.md)",
                "[Strategy Statistics](strategystats.md)",
                "Visualization & UI",
                "[Plotting](plotting.md)",
                "[Progress Bars](pbar.md)",
                "Utilities",
                "[DataFrame Utils](dfutils.md)",
                "[Python Integration](python.md)",
                "[Miscellaneous](misc.md)",
                "Quick Navigation",
                "See Also",
                "Function Index"
            ],
            "excerpt": "API Reference This section provides comprehensive documentation for all Planar.jl modules and functions. Core Modules Data Management Data structures, persistence, and OHLCV data handling. Engine ...",
            "difficulty": "advanced",
            "title": "api",
            "content_length": 2197,
            "url": "/API/api.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "API/ccxt.md",
            "headings": [
                "Ccxt",
                "See Also"
            ],
            "excerpt": "Ccxt The Ccxt module handles the (python) ccxt library. Wraps the ccxt api. See Also - Exchanges - Exchange integration and configuration - Config - Exchange integration and configuration",
            "difficulty": "advanced",
            "title": "ccxt",
            "content_length": 187,
            "url": "/API/ccxt.html",
            "description": "",
            "category": "exchanges"
        },
        {
            "path": "API/collections.md",
            "headings": [
                "Collections"
            ],
            "excerpt": "Collections",
            "difficulty": "advanced",
            "title": "collections",
            "content_length": 11,
            "url": "/API/collections.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/data.md",
            "headings": [
                "Data API",
                "Overview",
                "Core Data Structures",
                "OHLCV Data Access",
                "Access OHLCV data from asset instance",
                "Get specific OHLCV values",
                "Get latest values",
                "Usage Examples",
                "Work with OHLCV data",
                "Data Loading and Storage",
                "Primary Data Functions",
                "Load OHLCV data for exchange and symbols",
                "Load data for a strategy",
                "Propagate OHLCV data across timeframes",
                "Create data stub for missing data",
                "Advanced Data Operations",
                "Load data with specific parameters",
                "Load multiple timeframes",
                "Propagate data across timeframes",
                "Data Persistence",
                "Zarr Storage",
                "Get Zarr instance",
                "Store data in Zarr format",
                "Access stored data",
                "LMDB Key-Value Storage",
                "Save data to cache",
                "Load data from cache",
                "Cache with expiration",
                "Data Validation and Integrity",
                "Data Quality Checks",
                "Check for data gaps",
                "Validate OHLCV consistency",
                "Data Cleaning",
                "Remove invalid data points",
                "DataFrame Integration",
                "Working with DataFrames",
                "Convert OHLCV to DataFrame",
                "DataFrame operations",
                "Add technical indicators",
                "Filter data",
                "Performance Optimization",
                "Efficient Data Access Patterns",
                "Pre-allocate arrays for calculations",
                "Batch data processing",
                "Memory Management",
                "Limit data size for memory efficiency",
                "Data Streaming and Updates",
                "Real-time Data Updates",
                "Update data with new candles",
                "Common Data Patterns",
                "Moving Averages",
                "Simple Moving Average",
                "Exponential Moving Average",
                "Price Analysis",
                "Calculate returns",
                "Volatility calculation",
                "Complete API Reference",
                "See Also"
            ],
            "excerpt": "Data API The Data module provides comprehensive functionality for managing market data in Planar. It handles OHLCV (Open, High, Low, Close, Volume) data storage, retrieval, and manipulation using ...",
            "difficulty": "advanced",
            "title": "Data API",
            "content_length": 1413,
            "url": "/API/data.html",
            "description": "Data structures, persistence, and OHLCV data handling",
            "category": "api-reference"
        },
        {
            "path": "API/dfutils.md",
            "headings": [
                "DataFrame utils",
                "See Also"
            ],
            "excerpt": "DataFrame utils See Also - Data Management - Guide: Data handling and management - Exchanges - Data handling and management",
            "difficulty": "advanced",
            "title": "dfutils",
            "content_length": 123,
            "url": "/API/dfutils.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/engine.md",
            "headings": [
                "Engine API",
                "Overview",
                "Core Functions",
                "Data Management",
                "OHLCV Data Functions",
                "Load historical OHLCV data for a strategy",
                "Fetch fresh OHLCV data from exchange",
                "Fetch and store OHLCV data for all strategy assets",
                "Update existing OHLCV data with latest candles",
                "Usage Examples",
                "Load a strategy",
                "Load historical data for all strategy assets",
                "Fetch latest data from exchange",
                "Update data for live trading",
                "Advanced Data Operations",
                "Load data for specific timeframe and pairs",
                "Fetch data with custom parameters",
                "Parallel data fetching for multiple assets",
                "Strategy Execution",
                "Execution Control",
                "Fill strategy with current market data",
                "Reset strategy state",
                "Set strategy to default configuration",
                "Example: Strategy Lifecycle",
                "Initialize strategy",
                "Load initial data",
                "Reset to clean state",
                "Fill with current data",
                "Strategy is now ready for execution",
                "Exchange Integration",
                "Exchange Access",
                "Get exchange instance for strategy",
                "Get exchange ID",
                "Check if exchange is in sandbox mode",
                "Get account information",
                "Example: Exchange Operations",
                "Get exchange and check status",
                "Get account information",
                "Access exchange-specific functions",
                "Data Structures and Types",
                "Core Types",
                "Strategy execution modes",
                "Margin modes",
                "Data Handlers",
                "OHLCV data handling",
                "Access OHLCV data",
                "Integration Patterns",
                "Backtesting Pattern",
                "Load strategy for simulation",
                "Load historical data",
                "Run backtest",
                "Analyze results",
                "Paper Trading Pattern",
                "Load strategy for paper trading",
                "Load initial data",
                "Start paper trading (runs continuously)",
                "Monitor in real-time",
                "Live Trading Pattern",
                "Load strategy for live trading",
                "Verify connection and funds",
                "Load data and start",
                "Performance Optimization",
                "Efficient Data Access",
                "Pre-allocate data structures",
                "Batch Operations",
                "Batch data updates",
                "Error Handling",
                "Robust Data Loading",
                "Exchange Connection Handling",
                "Complete API Reference",
                "See Also"
            ],
            "excerpt": "Engine API The Engine module provides the core execution framework for Planar strategies. It handles data management, order execution, and coordinates between different execution modes (simulation, ...",
            "difficulty": "advanced",
            "title": "Engine API",
            "content_length": 1326,
            "url": "/API/engine.html",
            "description": "Core execution engine for backtesting, paper trading, and live trading",
            "category": "api-reference"
        },
        {
            "path": "API/exchanges.md",
            "headings": [
                "Exchanges API",
                "Overview",
                "Core Exchange Types",
                "Exchange Identification",
                "Exchange ID type for type-safe exchange handling",
                "Common exchange IDs",
                "Create exchange ID",
                "Exchange Connection",
                "Get exchange instance",
                "Check connection status",
                "Get exchange information",
                "Market Data Access",
                "Market Information",
                "Get available markets",
                "Get specific market information",
                "Market limits and precision",
                "Fee Information",
                "Get trading fees for a market",
                "Calculate fee for a trade",
                "Market Data Retrieval",
                "Fetch OHLCV data",
                "Get latest ticker",
                "Get order book",
                "Account Management",
                "Account Information",
                "Get account information",
                "Get all available accounts (for exchanges that support multiple accounts)",
                "Get current active account",
                "Switch account (if supported)",
                "set_account!(exc, \"spot\")  # Switch to spot account",
                "Balance Information",
                "Get account balances",
                "Get specific currency balance",
                "Order Management",
                "Order Placement",
                "Place a limit buy order",
                "Place a limit sell order",
                "Example usage (in sandbox mode)",
                "Order Monitoring",
                "Get open orders",
                "Get order history",
                "Cancel an order",
                "Exchange Configuration",
                "Exchange Parameters",
                "Get exchange parameters",
                "Set exchange parameters",
                "Market Symbol Mapping",
                "Get market symbols for strategy",
                "Convert between symbol formats",
                "Get all tradeable symbols",
                "Error Handling and Resilience",
                "Connection Management",
                "Robust exchange connection",
                "Rate limit handling",
                "Market Data Validation",
                "Validate market data",
                "Safe data fetching",
                "Multi-Exchange Support",
                "Exchange Comparison",
                "Compare fees across exchanges",
                "Find best exchange for trading",
                "Complete API Reference",
                "See Also"
            ],
            "excerpt": "Exchanges API The Exchanges module provides unified interfaces for connecting to cryptocurrency exchanges through the CCXT library. It handles exchange connectivity, market data access, and order ...",
            "difficulty": "advanced",
            "title": "Exchanges API",
            "content_length": 1235,
            "url": "/API/exchanges.html",
            "description": "Exchange interfaces and connectivity",
            "category": "api-reference"
        },
        {
            "path": "API/executors.md",
            "headings": [
                "Executors API",
                "Overview",
                "Core Execution Events",
                "Event Types",
                "Core execution events",
                "Data events",
                "Order events",
                "Position events (for margin trading)",
                "Event Handling",
                "Handle new trade execution",
                "Handle order updates",
                "Order Management",
                "Order Access and Manipulation",
                "Get active orders for an asset",
                "Get orders by type",
                "Order information",
                "Order Creation Example",
                "Order Lifecycle Management",
                "Monitor order status",
                "Optimization Integration",
                "Optimization Setup",
                "Setup optimization parameters",
                "Run optimization iteration",
                "Score optimization results",
                "Optimization Example",
                "Position Management (Margin Trading)",
                "Position Updates",
                "Handle position updates for margin strategies",
                "Handle leverage updates",
                "Risk Management",
                "Order Validation",
                "Risk Monitoring",
                "Performance Patterns",
                "Efficient Order Processing",
                "Batch order processing",
                "Async order monitoring",
                "Complete API Reference",
                "See Also"
            ],
            "excerpt": "Executors API The Executors module handles order execution and trade management in Planar. It provides the interface between strategy logic and actual order placement, managing the execution ...",
            "difficulty": "advanced",
            "title": "Executors API",
            "content_length": 1180,
            "url": "/API/executors.html",
            "description": "Order execution and trade management",
            "category": "api-reference"
        },
        {
            "path": "API/fetch.md",
            "headings": [
                "Fetch module"
            ],
            "excerpt": "Fetch module",
            "difficulty": "advanced",
            "title": "fetch",
            "content_length": 12,
            "url": "/API/fetch.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/instances.md",
            "headings": [
                "Instances API",
                "Overview",
                "Core Types",
                "Asset Instance",
                "Asset instance - represents an asset within a strategy context",
                "Position Types",
                "Position sides for margin trading",
                "Position information",
                "Asset Instance Management",
                "Basic Asset Instance Operations",
                "Load a strategy to work with instances",
                "Access asset instances",
                "Get specific asset instance",
                "Check if asset is in strategy universe",
                "Asset Instance Information",
                "Get asset information from instance",
                "Example usage",
                "Data Access and Management",
                "Access OHLCV data for different timeframes",
                "Example: Get data summary for all assets",
                "Access specific timeframe data",
                "Get latest price efficiently",
                "Position Management",
                "Spot Trading Positions",
                "Check current asset balance",
                "Check if position is dust (too small to trade)",
                "Get non-dust positions only",
                "Margin Trading Positions",
                "For margin strategies, work with positions",
                "Position risk management",
                "Fee Management",
                "Fee Calculation",
                "Get fee information for an asset",
                "Calculate trading fees",
                "Example: Calculate fees for all assets",
                "Cash and Balance Management",
                "Cash Operations",
                "Get available cash for trading",
                "Check if strategy cash is compatible with universe",
                "Portfolio Value Calculation",
                "Calculate total portfolio value",
                "Portfolio allocation analysis",
                "Performance Optimization",
                "Efficient Instance Operations",
                "Batch operations on instances",
                "Efficient filtering",
                "Memory-efficient data access",
                "Integration Examples",
                "Strategy Integration",
                "Example: Asset instance usage in strategy",
                "Complete API Reference",
                "See Also"
            ],
            "excerpt": "Instances API The Instances module manages asset instances within strategies, handling position tracking, margin management, and asset-specific data. It provides the bridge between abstract assets ...",
            "difficulty": "advanced",
            "title": "Instances API",
            "content_length": 1274,
            "url": "/API/instances.html",
            "description": "Asset instance management and position tracking",
            "category": "api-reference"
        },
        {
            "path": "API/instruments.md",
            "headings": [
                "Instruments API",
                "Overview",
                "Core Asset Types",
                "Base Asset Types",
                "Abstract base type for all assets",
                "Concrete asset type",
                "Cash/Currency type",
                "Asset Creation and Management",
                "Create basic assets",
                "Create cash instances",
                "Asset information",
                "Check if asset is fiat currency",
                "Currency Operations",
                "Cash manipulation functions",
                "Add cash",
                "Subtract cash",
                "Create zero cash",
                "Subtract to zero (safe subtraction)",
                "Advanced Cash Operations",
                "Working with multiple currencies",
                "Initialize portfolio",
                "Add funds to different currencies",
                "Calculate total value (requires exchange rates)",
                "Derivative Instruments",
                "Derivative Types",
                "Future contract",
                "Option contract",
                "Working with Derivatives",
                "Create derivative instruments",
                "Derivative calculations",
                "Example usage",
                "Derivative Portfolio Management",
                "Manage a portfolio of derivatives",
                "Portfolio tracking",
                "Add positions",
                "Calculate portfolio P&L",
                "Number Formatting",
                "Compact Number Display",
                "Format large numbers compactly",
                "Format with different precision",
                "Format small numbers",
                "Custom formatting for trading",
                "Usage examples",
                "Asset Validation and Utilities",
                "Asset Validation",
                "Validate asset symbols",
                "Asset conversion utilities",
                "Example usage",
                "Asset Comparison and Sorting",
                "Custom comparison for assets",
                "Sort assets",
                "Group assets by type",
                "Integration with Strategy Framework",
                "Asset Instance Integration",
                "Working with asset instances in strategies",
                "Asset filtering utilities",
                "Performance Considerations",
                "Efficient Asset Operations",
                "Pre-allocate asset collections",
                "Batch asset operations",
                "Memory-efficient asset processing",
                "Complete API Reference",
                "See Also"
            ],
            "excerpt": "Instruments API The Instruments module provides definitions and management for financial instruments in Planar. It handles different asset types, currency management, and derivative instruments for ...",
            "difficulty": "advanced",
            "title": "Instruments API",
            "content_length": 1217,
            "url": "/API/instruments.html",
            "description": "Financial instrument definitions and management",
            "category": "api-reference"
        },
        {
            "path": "API/metrics.md",
            "headings": [
                "Metrics"
            ],
            "excerpt": "Metrics",
            "difficulty": "advanced",
            "title": "metrics",
            "content_length": 7,
            "url": "/API/metrics.html",
            "description": "",
            "category": "visualization"
        },
        {
            "path": "API/misc.md",
            "headings": [
                "Misc"
            ],
            "excerpt": "Misc",
            "difficulty": "advanced",
            "title": "misc",
            "content_length": 4,
            "url": "/API/misc.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/optimization.md",
            "headings": [
                "Optimization",
                "See Also"
            ],
            "excerpt": "Optimization See Also - Optimization - Performance optimization techniques - Performance Issues - Troubleshooting: Performance optimization techniques",
            "difficulty": "advanced",
            "title": "optimization",
            "content_length": 150,
            "url": "/API/optimization.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "API/pbar.md",
            "headings": [
                "Pbar"
            ],
            "excerpt": "Pbar",
            "difficulty": "advanced",
            "title": "pbar",
            "content_length": 4,
            "url": "/API/pbar.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/plotting.md",
            "headings": [
                "Plotting"
            ],
            "excerpt": "Plotting",
            "difficulty": "advanced",
            "title": "plotting",
            "content_length": 8,
            "url": "/API/plotting.html",
            "description": "",
            "category": "visualization"
        },
        {
            "path": "API/prices.md",
            "headings": [
                "Prices"
            ],
            "excerpt": "Prices",
            "difficulty": "advanced",
            "title": "prices",
            "content_length": 6,
            "url": "/API/prices.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/processing.md",
            "headings": [
                "Processing"
            ],
            "excerpt": "Processing",
            "difficulty": "advanced",
            "title": "processing",
            "content_length": 10,
            "url": "/API/processing.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/python.md",
            "headings": [
                "Python"
            ],
            "excerpt": "Python Provides python bindings, some helper functions and async management.",
            "difficulty": "advanced",
            "title": "python",
            "content_length": 76,
            "url": "/API/python.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "API/strategies.md",
            "headings": [
                "Strategies API",
                "Overview",
                "Core Types",
                "Strategy Types",
                "Base strategy type",
                "Execution mode variants",
                "Margin mode variants",
                "Usage Examples",
                "Creating a Strategy",
                "Define strategy module",
                "Load the strategy",
                "Accessing Strategy Information",
                "Get strategy assets",
                "Check available cash",
                "Get exchange information",
                "Check execution mode",
                "Working with Assets",
                "Access individual assets",
                "Check if asset is in universe",
                "Get market data",
                "Strategy Interface Functions",
                "Core Interface",
                "Main strategy execution function",
                "Strategy lifecycle functions",
                "Configuration functions",
                "Implementation Example",
                "Cash and Position Management",
                "Cash Functions",
                "Get total strategy cash",
                "Get available (uncommitted) cash",
                "Get cash committed to pending orders",
                "Check if strategy cash matches universe",
                "Position Information",
                "Get strategy holdings (assets with non-zero balance)",
                "Check margin mode",
                "For margin strategies",
                "Order Management",
                "Order Access",
                "Get active buy orders for an asset",
                "Get active sell orders for an asset",
                "Iterate through all orders",
                "Utility Functions",
                "Strategy Identification",
                "Get strategy module",
                "Get strategy name",
                "Get strategy configuration",
                "Thread Safety",
                "The strategy includes a lock for thread-safe operations",
                "Common Patterns",
                "Data Loading Pattern",
                "Load historical data for strategy",
                "Fetch latest data",
                "Update specific timeframe data",
                "Error Handling Pattern",
                "Performance Pattern",
                "Complete API Reference",
                "See Also"
            ],
            "excerpt": "Strategies API The Strategies module provides the core framework for building and managing trading strategies in Planar. It includes the base type, execution interfaces, and essential functions for ...",
            "difficulty": "advanced",
            "title": "Strategies API",
            "content_length": 1257,
            "url": "/API/strategies.html",
            "description": "Strategy base classes, interfaces, and core functionality",
            "category": "api-reference"
        },
        {
            "path": "API/strategystats.md",
            "headings": [
                "StrategyStats",
                "See Also"
            ],
            "excerpt": "StrategyStats Library for common strategy signals generation. See Also - Strategy Development - Guide: Strategy development and implementation - Optimization - Strategy development and implementation",
            "difficulty": "advanced",
            "title": "strategystats",
            "content_length": 199,
            "url": "/API/strategystats.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "API/strategytools.md",
            "headings": [
                "StrategyTools",
                "See Also"
            ],
            "excerpt": "StrategyTools This module implements routines common to many strategies. See Also - Strategy Development - Guide: Strategy development and implementation - Optimization - Strategy development and ...",
            "difficulty": "advanced",
            "title": "strategytools",
            "content_length": 210,
            "url": "/API/strategytools.html",
            "description": "",
            "category": "api-reference"
        },
        {
            "path": "advanced/index.md",
            "headings": [
                "Advanced Topics",
                "Available Topics",
                "Prerequisites",
                "See Also"
            ],
            "excerpt": "Advanced Topics This section covers advanced Planar usage patterns and customization techniques. Available Topics - Customization - Extending Planar - Margin Trading - Advanced trading features - ...",
            "difficulty": "advanced",
            "title": "index",
            "content_length": 484,
            "url": "/advanced/index.html",
            "description": "",
            "category": "optimization"
        },
        {
            "path": "customizations/backtest.md",
            "headings": [
                "See Also",
                "High-Frequency Trading (HFT) Backtesting Documentation",
                "Reasons to Avoid Tick-by-Tick Backtesting",
                "Implementing HFT Backtesting",
                "[OHLCV](../guides/data-management.md#ohlcv-data)-Based Approach",
                "Tick-Based Approach"
            ],
            "excerpt": "See Also - Optimization - Performance optimization techniques - Performance Issues - Troubleshooting: Performance optimization techniques - Data Management - Guide: Data handling and management - ...",
            "difficulty": "advanced",
            "title": "backtest",
            "content_length": 2459,
            "url": "/customizations/backtest.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "customizations/call.md",
            "headings": [
                "Adding call! Functions",
                "See Also"
            ],
            "excerpt": "Adding call! Functions To introduce new functions, adhere to the following procedure: 1. Traits Addition: Go to the module, specifically the file, and add your new trait. Ensure that you export the ...",
            "difficulty": "advanced",
            "title": "call",
            "content_length": 863,
            "url": "/customizations/call.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "customizations/customizations.md",
            "headings": [
                "Comprehensive Customization Guide",
                "Understanding Planar's Dispatch System",
                "Core Parametrized Types",
                "Dispatch Patterns",
                "Strategy-specific behavior",
                "Exchange-specific behavior",
                "Order type-specific behavior",
                "Custom Order Types Implementation",
                "Basic Order Type Definition",
                "Define the abstract order type",
                "Use the @deforders macro to generate concrete types",
                "Order State Management",
                "Order Constructor",
                "Order Execution Logic",
                "Simulation mode execution",
                "Live mode execution",
                "Custom Exchange Implementation",
                "Exchange Interface Requirements",
                "Implement required interface methods",
                "Helper functions",
                "Exchange-Specific Customizations",
                "Custom order handling for your broker",
                "Custom fee calculation",
                "Advanced Customization Patterns",
                "Strategy-Specific Functions",
                "General implementation",
                "Strategy-specific implementation",
                "Mode and strategy-specific implementation",
                "Custom Indicators and Signals",
                "Define custom indicator",
                "Integrate with strategy",
                "Custom Risk Management",
                "Integrate risk management into order execution",
                "Best Practices for Customization",
                "1. Minimal Invasive Changes",
                "Good: Override only the specific behavior",
                "Avoid: Reimplementing entire order execution",
                "2. Type Stability",
                "Good: Type-stable implementation",
                "Avoid: Type-unstable implementation",
                "3. Error Handling",
                "4. Documentation and Testing",
                "Arguments",
                "Returns",
                "Example",
                "5. Performance Considerations",
                "Use @inbounds for performance-critical loops (when bounds are guaranteed)",
                "Pre-allocate arrays to avoid allocations",
                "See Also",
                "Troubleshooting Customizations",
                "Common Issues",
                "Problem: Ambiguous methods",
                "Solution: Make signatures more specific",
                "Avoid: Type piracy",
                "Better: Create wrapper types or use your own functions",
                "Problem: Type instability",
                "Solution: Maintain type stability",
                "Debugging Tips"
            ],
            "excerpt": "Comprehensive Customization Guide Planar's architecture is built around Julia's powerful dispatch system-development.mddispatch-system), enabling deep customization without modifying core framework ...",
            "difficulty": "advanced",
            "title": "customizations",
            "content_length": 2686,
            "url": "/customizations/customizations.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "customizations/exchanges.md",
            "headings": [
                "See Also"
            ],
            "excerpt": "The bot is primarily designed for cryptocurrency trading; however, it can be adapted for stock trading by interfacing with various brokers' APIs. To do this, you will need to create a custom ...",
            "difficulty": "advanced",
            "title": "exchanges",
            "content_length": 1112,
            "url": "/customizations/exchanges.html",
            "description": "",
            "category": "exchanges"
        },
        {
            "path": "customizations/orders.md",
            "headings": [
                "Custom Orders",
                "Custom Instruments",
                "See Also",
                "Instances and Exchanges"
            ],
            "excerpt": "Custom Orders This section demonstrates how to implement an OCO (One-Cancels-the-Other) order type for simulation purposes: We can base our implementation on the existing constructor for limit orders ...",
            "difficulty": "advanced",
            "title": "orders",
            "content_length": 1351,
            "url": "/customizations/orders.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "engine/backtesting.md",
            "headings": [
                "Running a Backtest",
                "Backtest Configuration",
                "Time Range Configuration",
                "Set specific date range for [backtesting](../guides/execution-modes.md#simulation-mode)",
                "Configure backtest period",
                "Initial Capital and Position Sizing",
                "Configure initial capital and base position size",
                "Performance Optimization Settings",
                "Enable parallel processing for multi-asset [strategies](../guides/strategy-development.md)",
                "Adjust memory usage for large datasets",
                "Enable progress reporting",
                "Basic Example",
                "Define the call! function",
                "Load data in the strategy universe (you need to already have it)",
                "backtest the strategy within the period available from the loaded data.",
                "Lets see how we fared:",
                "output",
                "Comprehensive Backtest Example",
                "Create and configure strategy",
                "Configure backtest parameters",
                "Load historical data",
                "Fill strategy universe with data",
                "Run backtest with progress monitoring",
                "Analyze results",
                "Calculate performance metrics",
                "Advanced Backtesting Features",
                "Multi-Timeframe Backtesting",
                "Configure multiple [timeframes](../guides/data-management.md#timeframes) for analysis",
                "Load data for different [timeframes](../guides/data-management.md#timeframes)",
                "Walk-Forward Analysis",
                "Perform walk-forward analysis",
                "Run walk-forward analysis",
                "Orders",
                "Limit Order Types",
                "Comprehensive Order Examples",
                "Basic Limit Orders",
                "Place a GTC buy order at support level",
                "Place a GTC sell order at resistance",
                "Advanced Order Strategies",
                "Ladder orders - multiple orders at different price levels",
                "Scale-in strategy with IOC orders",
                "Order Management Patterns",
                "Cancel and replace strategy",
                "Conditional order placement",
                "Example: Place buy order only if [RSI](../guides/strategy-development.md#technical-indicators) is oversold",
                "Market Order Types",
                "Market Order Examples",
                "Basic Market Orders",
                "Emergency exit - market sell all positions",
                "Quick entry on breakout",
                "Advanced Market Order Strategies",
                "TWAP (Time-Weighted Average Price) execution",
                "VWAP (Volume-Weighted Average Price) execution",
                "Risk Management with Market Orders",
                "Stop-loss with market orders",
                "Trailing stop with market orders",
                "Market Orders",
                "Checks",
                "Fees",
                "Slippage",
                "Liquidations",
                "Liquidation Mechanics",
                "Liquidation Buffer Configuration",
                "Set liquidation buffer (default: 0.02 = 2%)",
                "Or configure in strategy",
                "Liquidation Price Calculation",
                "Calculate liquidation price for long position",
                "Calculate liquidation price for short position",
                "Example usage",
                "Liquidation Risk Management",
                "Monitor liquidation risk",
                "Automatic position size adjustment based on liquidation risk",
                "Funding Rate Integration",
                "Download and analyze funding rates",
                "Incorporate funding costs in strategy",
                "Example: Long position with funding cost consideration",
                "See Also",
                "Backtesting Performance",
                "Performance Optimization Guidelines",
                "Memory Management",
                "For large backtests, optimize memory usage",
                "Use data chunking for very large datasets",
                "CPU Optimization",
                "Enable multi-threading for parallel asset processing",
                "Configure parallel processing",
                "I/O Optimization",
                "Optimize data loading",
                "Use memory-mapped files for very large datasets",
                "Performance Benchmarks",
                "Profiling and Debugging",
                "Profile your backtest",
                "Memory profiling",
                "Detailed timing analysis",
                "Optimization Recommendations"
            ],
            "excerpt": "Running a Backtest To perform a backtest-mode), you need to construct a strategy by following the guidelines in the Strategy Documentation.md). Once the strategy is created, you can call the function ...",
            "difficulty": "advanced",
            "title": "backtesting",
            "content_length": 10212,
            "url": "/engine/backtesting.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "engine/engine.md",
            "headings": [
                "Engine",
                "See Also"
            ],
            "excerpt": "Engine Within the Planar \"model\", we use the call! and call! functions to communicate between strategies and executors. The executor calls the strategy, implying that the strategy should do or return ...",
            "difficulty": "advanced",
            "title": "engine",
            "content_length": 2539,
            "url": "/engine/engine.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "engine/engine_notes.md",
            "headings": [
                "Backtesting overview",
                "Goals",
                "Main loop",
                "Strategy General Considerations",
                "See Also",
                "What does executing an order mean?"
            ],
            "excerpt": "Backtesting overview Goals - The backtest-mode) should be able to be executed given a custom start and end date. - The strategy has to have access to the OHLCV and all past trade history. - It must ...",
            "difficulty": "advanced",
            "title": "engine_notes",
            "content_length": 1780,
            "url": "/engine/engine_notes.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "engine/features.md",
            "headings": [
                "Strategy Combination",
                "See Also",
                "Minor Limitations"
            ],
            "excerpt": "Strategy Combination The types considered for possible combinations are: - : These types are considered if the strategy trades on derivatives markets. - : These types are considered for positions ...",
            "difficulty": "advanced",
            "title": "features",
            "content_length": 2085,
            "url": "/engine/features.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "engine/live.md",
            "headings": [
                "Running in Live Mode",
                "Initial Setup and Configuration",
                "API Configuration and Security",
                "Exchange API Setup",
                "Configure API credentials securely",
                "Use sandbox for testing",
                "Security Best Practices",
                "1. Use environment variables for sensitive data",
                "Set in your shell or .envrc file:",
                "export PLANAR_BITMEX_API_KEY=\"your_api_key\"",
                "export PLANAR_BITMEX_API_SECRET=\"your_api_secret\"",
                "2. Restrict API permissions",
                "- Enable only necessary permissions (trading, reading)",
                "- Disable withdrawal permissions",
                "- Use IP whitelisting when possible",
                "3. Use separate [API keys](../getting-started/installation.md#api-[configuration](../config.md)) for different [strategies](../guides/strategy-development.md)",
                "Comprehensive Live Trading Setup",
                "Basic Live Trading Configuration",
                "Create live strategy with full [configuration](../config.md)",
                "Configure risk management",
                "Set up monitoring",
                "Advanced Multi-Asset Live Setup",
                "Advanced [live trading](../guides/execution-modes.md#live-mode) setup with multiple assets",
                "Configure universe with risk limits per asset",
                "Set up real-time data feeds",
                "Configure advanced risk management",
                "How Live Mode Works",
                "Background Task Management",
                "Watcher Configuration",
                "Configure balance watcher",
                "Configure position watcher for margin [strategies](../guides/strategy-development.md)",
                "Configure order event monitoring",
                "Custom Watchers",
                "Create custom watcher for specific metrics",
                "Start custom watchers",
                "Order Execution and State Management",
                "Order State Tracking",
                "Enhanced order tracking",
                "Risk Management and Monitoring",
                "Real-Time Risk Monitoring",
                "Comprehensive risk monitoring system",
                "Emergency Procedures",
                "Emergency stop procedures",
                "Automated circuit breakers",
                "Timeouts and API Management",
                "Advanced Timeout Configuration",
                "Configure different timeouts for different operations",
                "Use custom timeouts for specific operations",
                "API Rate Limiting and Management",
                "Configure API rate limiting",
                "Implement intelligent request batching",
                "Connection Management and Resilience",
                "Implement connection resilience",
                "Sync account state after reconnection",
                "Logging and Alerting",
                "Comprehensive logging setup",
                "Alert system integration",
                "Send alerts through all configured channels",
                "See Also",
                "Event Tracing",
                "Access the event trace from an exchange object",
                "Advanced Event Tracing",
                "Comprehensive Event Logging",
                "Configure detailed event tracing",
                "Custom event logging functions",
                "Replaying Events",
                "Advanced Event Analysis",
                "Comprehensive event analysis",
                "Extracting Events",
                "Event-Based Strategy Optimization",
                "Use event data to optimize strategy parameters",
                "Automated strategy tuning based on live performance"
            ],
            "excerpt": "Running in Live Mode A strategy in live mode operates against the exchange.md) API defined by the strategy. This mode executes real trades with actual capital, so proper configuration and risk ...",
            "difficulty": "advanced",
            "title": "live",
            "content_length": 3957,
            "url": "/engine/live.html",
            "description": "",
            "category": "getting-started"
        },
        {
            "path": "engine/mode-comparison.md",
            "headings": [
                "Execution Mode Comparison and Transition Guide",
                "Mode Overview",
                "Detailed Mode Comparison",
                "Feature Comparison Matrix",
                "Execution Characteristics",
                "Sim Mode (Backtesting)",
                "Sim mode characteristics",
                "Advantages:",
                "- Extremely fast execution (millions of candles per minute)",
                "- No API rate limits",
                "- Perfect for [parameter optimization](../[optimization](../optimization.md).md)",
                "- Deterministic results",
                "- Historical data analysis",
                "Limitations:",
                "- No real market conditions",
                "- Simplified order execution",
                "- No network latency",
                "- Perfect information assumption",
                "Paper Mode",
                "Paper mode characteristics",
                "Advantages:",
                "- Real [market data](../guides/data-management.md) and conditions",
                "- Realistic order book [simulation](../guides/execution-modes.md#simulation-mode)",
                "- Network latency included",
                "- Real-time strategy validation",
                "- No capital risk",
                "Limitations:",
                "- No market impact modeling",
                "- Simplified execution assumptions",
                "- May not capture all edge cases",
                "- Limited to current market conditions",
                "Live Mode",
                "Live mode characteristics",
                "Advantages:",
                "- Real market execution",
                "- Actual slippage and fees",
                "- True market impact",
                "- Real funding costs",
                "- Complete market realism",
                "Limitations:",
                "- Capital at risk",
                "- API rate limits",
                "- Exchange-specific quirks",
                "- Potential for real losses",
                "- Regulatory considerations",
                "Transition Strategies",
                "Development Workflow",
                "Sim to Paper Transition",
                "Pre-transition Checklist",
                "Validate sim mode results before transitioning",
                "Example transition",
                "Configuration Adjustments",
                "Adjust [configuration](../config.md) for paper mode",
                "Paper to Live Transition",
                "Comprehensive Validation",
                "Validate paper mode performance before going live",
                "Live Mode Preparation",
                "Comprehensive live mode preparation",
                "Common Pitfalls and How to Avoid Them",
                "Sim Mode Pitfalls",
                "1. Overfitting to Historical Data",
                "Problem: Strategy works perfectly on historical data but fails in real markets",
                "Solution: Use walk-forward analysis and out-of-sample testing",
                "2. Unrealistic Execution Assumptions",
                "Problem: Assuming perfect execution at exact prices",
                "Solution: Model realistic slippage and partial fills",
                "Paper Mode Pitfalls",
                "1. Ignoring Market Impact",
                "Problem: Paper mode doesn't account for your orders affecting the market",
                "Solution: Estimate market impact based on order size vs. volume",
                "2. Over-optimizing on Current Market Conditions",
                "Problem: Strategy works well in current market but may fail when conditions change",
                "Solution: Test across different market regimes",
                "Example usage",
                "Live Mode Pitfalls",
                "1. Insufficient Capital Management",
                "Problem: Using too much capital too quickly",
                "Solution: Gradual capital deployment with strict limits",
                "Example deployment schedule",
                "2. Inadequate Risk Management",
                "Problem: Not implementing proper stop-losses and position limits",
                "Solution: Comprehensive risk management system",
                "Best Practices for Mode Transitions",
                "1. Gradual Transition Approach",
                "Implement gradual transition with validation gates",
                "2. Validation Gates",
                "Implement validation gates between transitions",
                "3. Configuration Management",
                "Manage configuration across mode transitions",
                "See Also",
                "Monitoring and Alerting Across Modes",
                "Cross-Mode Performance Tracking",
                "Track performance across all modes for comparison"
            ],
            "excerpt": "Execution Mode Comparison and Transition Guide This guide provides a comprehensive comparison of Planar's three execution modes (Sim, Paper, and Live) and guidance on safely transitioning between ...",
            "difficulty": "advanced",
            "title": "mode-comparison",
            "content_length": 3822,
            "url": "/engine/mode-comparison.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "engine/paper.md",
            "headings": [
                "Running in Paper Mode",
                "Configuration Options",
                "Configuration via TOML Files",
                "user/[planar.toml](../config.md#[configuration](../config.md)-file)",
                "Strategy Project.toml",
                "Configuration via [Julia](https://julialang.org/) Code",
                "Or with additional parameters",
                "Starting Paper Mode",
                "Advanced Startup Options",
                "Run in foreground with detailed logging",
                "Run in background",
                "Custom logging [configuration](../config.md)",
                "With custom throttle settings",
                "Background Execution",
                "Log Management",
                "Set custom log file",
                "View current log file",
                "Tail logs in real-time",
                "Parse and analyze logs",
                "Comprehensive Setup Examples",
                "Basic Spot Trading Setup",
                "Create spot trading strategy",
                "Configure universe",
                "Set up data feeds",
                "Start [paper trading](../guides/execution-modes.md#paper-mode)",
                "Advanced Margin Trading Setup",
                "Create margin strategy with [isolated margin](../guides/strategy-development.md#margin-modes)",
                "Configure margin parameters",
                "Set up multi-[timeframe](../guides/data-management.md#timeframes) data",
                "Configure risk management",
                "Start with monitoring",
                "Multi-Exchange Paper Trading",
                "Set up [strategies](../guides/strategy-development.md) on multiple exchanges",
                "Start all strategies",
                "Monitor all strategies",
                "Understanding Paper Mode",
                "Order Execution Mechanics",
                "Market Orders",
                "Limit Orders",
                "Real-Time Data Integration",
                "Price Feeds",
                "Monitor real-time price updates",
                "Order Book Integration",
                "Access real-time order book data",
                "Use order book data in strategy",
                "Performance Monitoring",
                "Real-Time Metrics",
                "Set up real-time performance monitoring",
                "Enhanced performance tracking",
                "See Also",
                "Risk Management in Paper Mode",
                "Position Sizing",
                "Dynamic position sizing based on volatility",
                "Stop Loss Management",
                "Implement trailing stops in paper mode"
            ],
            "excerpt": "Running in Paper Mode Paper mode provides a realistic simulation environment that uses live market data while simulating order execution. This allows you to test strategies with real market ...",
            "difficulty": "advanced",
            "title": "paper",
            "content_length": 2620,
            "url": "/engine/paper.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "getting-started/first-strategy.md",
            "headings": [
                "Your First Strategy Tutorial",
                "What You'll Learn",
                "Prerequisites",
                "Strategy Overview",
                "Step 1: Understanding Strategy Structure",
                "Function Parameters",
                "Step 2: Create Strategy Directory",
                "Navigate to user [strategies](../guides/strategy-development.md) directory",
                "Create our new strategy",
                "Create the basic structure",
                "Step 3: Define the Strategy Module",
                "Import required modules",
                "Strategy type - this must match your module name",
                "Export the main functions",
                "We'll implement these functions next...",
                "Step 4: Implement Signal Setup",
                "Key Points:",
                "Step 5: Implement Buy Logic",
                "Key Points:",
                "Step 6: Implement Sell Logic",
                "Step 7: Create Project Configuration",
                "Step 8: Complete Strategy File",
                "Step 9: Test Your Strategy",
                "Start [Julia](https://julialang.org/) in the Planar directory",
                "Load your strategy",
                "Create strategy instance",
                "Download some data",
                "Run [backtest](../guides/execution-modes.md#[simulation](../guides/execution-modes.md#simulation-mode)-mode)",
                "Check results",
                "Step 10: Comprehensive Performance Analysis",
                "Basic Performance Metrics",
                "Load plotting for visualization",
                "Create the main visualization",
                "Calculate key performance metrics",
                "Trade Analysis",
                "Advanced Performance Metrics",
                "Calculate additional metrics if we have trades",
                "Strategy Effectiveness Assessment",
                "Compare against buy-and-hold",
                "Overall assessment",
                "Profitability check",
                "Win rate check",
                "Step 11: Debug and Improve Your Strategy",
                "Enable Detailed Debugging",
                "Enable debug logging to see every signal calculation",
                "Clear previous results and run with debugging",
                "Systematic Debugging Approach",
                "1. Check Indicator Values",
                "Manually inspect indicator calculations",
                "2. Test Individual Conditions",
                "Test your buy logic step by step",
                "Test on recent data",
                "3. Analyze Strategy Performance Issues",
                "Check data sufficiency",
                "Check indicator initialization",
                "Add trade cooldown",
                "Analyze individual trade performance",
                "Performance Optimization Techniques",
                "1. Parameter Sensitivity Analysis",
                "Test different RSI thresholds",
                "2. Market Condition Analysis",
                "Analyze performance in different market conditions",
                "Step 12: Advanced Improvements",
                "Add Stop Loss",
                "Add Position Sizing",
                "Understanding Key Concepts",
                "Signal Validation",
                "Timeframes",
                "Strategy State",
                "See Also",
                "Next Steps: From Beginner to Advanced",
                "Immediate Improvements (Next 1-2 Hours)",
                "1. Optimize Your Current Strategy",
                "Try different parameter combinations",
                "2. Test Different Assets",
                "Test your strategy on different cryptocurrencies",
                "3. Add Risk Management",
                "Enhance your strategy with stop-loss and take-profit",
                "Short-term Learning (Next Week)",
                "1. **[Strategy Development Guide](../guides/strategy-development.md)**",
                "2. **[Parameter Optimization](../[optimization](../optimization.md).md)**",
                "3. **[Data Management](../data.md)**",
                "Medium-term Goals (Next Month)",
                "1. **[Paper Trading](../engine/paper.md)**",
                "2. **[Multi-Exchange Trading](../advanced/multi-exchange.md)**",
                "3. **[Custom Indicators](../customizations/indicators.md)**",
                "Advanced Mastery (Next 3 Months)",
                "1. **[Live Trading](../engine/live.md)**",
                "2. **[Optimization at Scale](../advanced/optimization.md)**",
                "3. **[Custom Exchange Integration](../customizations/exchanges.md)**",
                "Learning Resources by Experience Level",
                "📚 Beginner Resources",
                "🔬 Intermediate Resources",
                "🚀 Advanced Resources",
                "Community and Support",
                "Your Strategy Development Checklist",
                "✅ Beginner Level (You are here!)",
                "🎯 Intermediate Level",
                "🏆 Advanced Level",
                "Best Practices",
                "Common Patterns",
                "Multi-Timeframe Analysis",
                "Use different [timeframes](../guides/data-management.md#timeframes) for different purposes",
                "Confirmation Signals",
                "Require multiple confirmations",
                "Adaptive Parameters",
                "Adjust parameters based on market conditions"
            ],
            "excerpt": "Your First Strategy Tutorial In this tutorial, you'll learn to create a custom trading strategy from scratch. We'll build a simple RSI-development.mdtechnical-indicators) (Relative Strength Index) ...",
            "difficulty": "beginner",
            "title": "Your First Strategy Tutorial",
            "content_length": 7179,
            "url": "/getting-started/first-strategy.html",
            "description": "Build a custom RSI trading strategy from scratch",
            "category": "getting-started"
        },
        {
            "path": "getting-started/index.md",
            "headings": [
                "Getting Started with Planar",
                "Learning Objectives",
                "Section Overview",
                "Why Planar?",
                "Prerequisites",
                "Required Knowledge",
                "System Requirements",
                "Optional for Getting Started",
                "Recommended Learning Paths",
                "🆕 Complete Beginner Path",
                "🚀 Experienced Trader Path",
                "💻 Developer/Programmer Path",
                "Getting Help",
                "After Getting Started",
                "Immediate Next Steps",
                "Advanced Topics",
                "Related Topics"
            ],
            "excerpt": "Getting Started with Planar Welcome to Planar! This section will help you get up and running quickly with the Planar trading framework. Whether you're new to algorithmic trading or experienced with ...",
            "difficulty": "beginner",
            "title": "Getting Started with Planar",
            "content_length": 4559,
            "url": "/getting-started/index.html",
            "description": "Complete beginner's guide to Planar trading framework",
            "category": "getting-started"
        },
        {
            "path": "getting-started/installation.md",
            "headings": [
                "Installation Guide",
                "Installation Methods",
                "Prerequisites",
                "System Requirements",
                "Required Software",
                "Method 1: Docker Installation (Recommended)",
                "Step 1: Install Docker",
                "Step 2: Choose Your Image",
                "Runtime only (smaller, faster download)",
                "With plotting and [optimization](../optimization.md) (recommended for learning)",
                "Precompiled versions (more flexible, slower startup)",
                "Step 3: Run Planar",
                "Run with interactive features",
                "For persistent data storage, mount a volume",
                "Step 4: Verify Installation",
                "Test 1: Basic module loading",
                "Test 2: Strategy creation",
                "Test 3: Data system",
                "Test 4: Plotting capability (interactive image only)",
                "Method 2: Git Source Installation",
                "Step 1: Install Julia",
                "Should show: julia version 1.11.x",
                "Step 2: Install Git and direnv",
                "Step 3: Clone Repository",
                "Clone with all submodules",
                "If you forgot --recurse-submodules",
                "Step 4: Set Up Environment",
                "Allow direnv to load environment variables",
                "Environment variables are now automatically loaded",
                "Manually set environment variables (Linux/macOS)",
                "Windows PowerShell",
                "Step 5: Install Dependencies",
                "Start Julia with the correct project",
                "In Julia REPL",
                "Step 6: Verify Installation",
                "Test 1: Module loading",
                "Test 2: Strategy system",
                "Test 3: Configuration system",
                "Test 4: Data structures",
                "Test 5: Indicator system",
                "Method 3: Julia Package Installation",
                "Post-Installation Setup",
                "Configure Your Environment",
                "Create secrets file (never commit this!)",
                "Verify Core Components",
                "Test strategy loading",
                "Test data fetching",
                "Test plotting (if using interactive version)",
                "Platform-Specific Notes",
                "Windows",
                "macOS",
                "Linux",
                "Development Environment Setup",
                "Julia Development",
                "Add development packages",
                "Set up Revise for automatic code reloading",
                "Editor Integration",
                "Git Configuration",
                "Set up Julia formatter",
                "Configure git hooks (optional)",
                "Quick Troubleshooting",
                "Docker Issues",
                "Check Docker status",
                "Restart Docker service (Linux)",
                "On Windows/macOS, restart Docker Desktop",
                "Try alternative registry",
                "Check available space",
                "Check container logs",
                "Test with minimal command",
                "Source Installation Issues",
                "Verify Julia installation",
                "Add Julia to PATH (Linux/macOS)",
                "Windows: Add to system PATH through Control Panel",
                "Check Git configuration",
                "Clone with HTTPS instead of SSH",
                "Clear package cache completely",
                "Reduce parallel compilation",
                "Increase swap space (Linux)",
                "Fix Julia depot permissions (Linux/macOS)",
                "Windows: Run as administrator or check folder permissions",
                "Platform-Specific Issues",
                "Windows",
                "Allow script execution",
                "Enable long paths (requires admin)",
                "macOS",
                "Install Xcode Command Line Tools",
                "Verify installation",
                "Update Homebrew",
                "Reinstall problematic packages",
                "Check architecture",
                "Force x86_64 if needed (not recommended)",
                "Linux",
                "Ubuntu/Debian",
                "CentOS/RHEL/Fedora",
                "Arch Linux",
                "Check system libraries",
                "Update system libraries",
                "Network and Connectivity Issues",
                "Test connectivity",
                "Configure proxy if needed",
                "Test DNS",
                "Try alternative DNS",
                "Performance Issues",
                "Check available resources",
                "Optimize compilation",
                "Check available space",
                "Clean Julia cache",
                "Clean Docker (if using Docker)",
                "Installation Verification Checklist",
                "✅ Basic System Check",
                "✅ Planar Installation Check",
                "✅ Functionality Verification",
                "✅ Optional Features Check",
                "Getting Help",
                "Performance Optimization",
                "Precompile packages for faster startup",
                "Create system image for even faster startup (advanced)",
                "See scripts/build-sysimage.sh for details",
                "See Also",
                "Next Steps",
                "Updating Planar",
                "Docker Images",
                "Pull latest image",
                "Source Installation",
                "Update repository",
                "Update dependencies",
                "Uninstalling Planar",
                "Docker",
                "Remove images",
                "Source Installation",
                "Remove repository",
                "Clean Julia packages (optional)"
            ],
            "excerpt": "Installation Guide This guide provides comprehensive installation instructions for Planar on all supported platforms. Choose the method that best fits your needs and experience level. Installation ...",
            "difficulty": "advanced",
            "title": "installation",
            "content_length": 6918,
            "url": "/getting-started/installation.html",
            "description": "",
            "category": "getting-started"
        },
        {
            "path": "getting-started/quick-start.md",
            "headings": [
                "Quick Start Guide",
                "What You'll Accomplish",
                "Prerequisites",
                "Step 1: Get Planar Running (3 minutes)",
                "Option A: Docker - Fastest Setup",
                "Download and run Planar (one command!)",
                "Option B: If You Have [Julia](https://julialang.org/) Installed",
                "Quick clone and run",
                "Step 2: Load Planar (2 minutes)",
                "Load Planar with all features",
                "Initialize the environment",
                "Step 3: Create Your First Strategy (1 minute)",
                "Load the built-in demo [strategy](../guides/strategy-development.md)",
                "Verify it loaded correctly",
                "Step 4: Download Market Data (2 minutes)",
                "Download recent Bitcoin price data",
                "Load data into the strategy",
                "Verify data loaded",
                "Step 5: Run Your First Backtest (1 minute)",
                "Execute the trading strategy on historical data",
                "Check the results immediately",
                "Step 6: Visualize Results (3 minutes)",
                "Load plotting system",
                "Create the main visualization",
                "Step 7: Analyze Performance (3 minutes)",
                "Quick performance summary",
                "Understanding What Happened",
                "Key Concepts",
                "See Also",
                "Next Steps",
                "Quick Troubleshooting",
                "Ensure correct project is active",
                "Test internet connection",
                "Check data loaded",
                "Try different time period: fetch_ohlcv(s, from=-2000)",
                "Restart Docker and try again",
                "🎉 Congratulations!",
                "What's Next?",
                "Immediate Next Steps (Choose One)",
                "When You're Ready for More",
                "Keep Experimenting!",
                "Try different assets",
                "Try different time periods"
            ],
            "excerpt": "Quick Start Guide Get your first Planar strategy running in 15 minutes! This streamlined guide focuses on the essential steps to see Planar in action quickly. What You'll Accomplish In the next 15 ...",
            "difficulty": "beginner",
            "title": "Quick Start Guide",
            "content_length": 5070,
            "url": "/getting-started/quick-start.html",
            "description": "Get your first Planar strategy running in 15 minutes",
            "category": "getting-started"
        },
        {
            "path": "guides/data-management.md",
            "headings": [
                "Data Management Guide",
                "Quick Navigation",
                "Prerequisites",
                "Related Topics",
                "Storage Architecture",
                "Zarr Backend",
                "Data Organization",
                "Storage Hierarchy Benefits",
                "Data Collection Methods",
                "Choosing the Right Method",
                "Basic Scraper Usage",
                "Download [OHLCV data](../guides/data-management.md#ohlcv-data) for ETH",
                "Load downloaded data into the storage system",
                "Note: Default market parameter is :um (USD-M futures)",
                "Market Types and Frequencies",
                "Different market types",
                "Different frequencies",
                "Different data types",
                "Advanced Scraper Examples",
                "Download multiple symbols at once",
                "Show all symbols that can be downloaded",
                "Filter by quote currency (default is \"usdt\")",
                "Download specific date ranges",
                "Error Handling and Data Validation",
                "Handle download errors gracefully",
                "Batch download with error handling",
                "Bybit Scrapers",
                "Download Bybit data",
                "Available Bybit markets",
                "Real-Time Data Fetching",
                "Basic Fetch Usage",
                "Will fetch the last 1000 candles, `to` can also be passed to download a specific range",
                "Advanced Fetch Examples",
                "Initialize [exchange](../exchanges.md)",
                "Fetch specific date ranges",
                "Fetch with explicit date range",
                "Fetch recent data (last N candles)",
                "Fetch and automatically save to storage",
                "Multi-Exchange Data Collection",
                "Collect data from multiple exchanges",
                "Rate Limit Management",
                "Fetch with rate limit awareness",
                "Usage",
                "Data Validation and Quality Checks",
                "Fetch with validation",
                "Usage",
                "[OHLCV](../guides/data-management.md#ohlcv-data) Ticker Watcher",
                "Single-Pair OHLCV Watcher",
                "Advanced Watcher Configuration",
                "Configure watcher with custom parameters",
                "Multi-pair watcher with custom intervals",
                "Start the watcher",
                "Monitor watcher status",
                "Watcher Management",
                "Start multiple watchers for different exchanges",
                "Monitor all watchers",
                "Stop all watchers when done",
                "Orderbook Watcher",
                "Monitor orderbook data for a specific pair",
                "Access orderbook data",
                "Custom Data Processing",
                "Create a watcher with custom data processing",
                "Apply custom processing to watcher data",
                "Error Handling and Resilience",
                "Robust watcher with error handling",
                "Usage",
                "Data Persistence and Storage",
                "Configure automatic data persistence",
                "Manual data saving",
                "Periodic saving",
                "Custom Data Sources",
                "Basic Custom Data Integration",
                "Advanced Custom Data Examples",
                "Example: Custom data from CSV files",
                "Save custom CSV data",
                "Custom Data Validation",
                "Example: Custom data with validation",
                "Working with Large Custom Datasets",
                "Example: Processing large datasets in chunks",
                "Example: Saving custom indicator data",
                "Load custom indicators",
                "Serialized Data Storage",
                "Example: Storing complex data structures",
                "Save with serialization",
                "Load serialized data",
                "Data Access Patterns",
                "Advanced Indexing Examples",
                "Load sample data",
                "Date range selections",
                "Specific time periods",
                "Price-based filtering",
                "Combined conditions",
                "Timeframe Management",
                "Get current timeframe",
                "Set timeframe explicitly",
                "Force overwrite timeframe",
                "Validate timeframe consistency",
                "Efficient Data Slicing",
                "Efficient slicing for large datasets",
                "Memory-efficient processing of large datasets",
                "Progressive Data Loading",
                "Example: Progressive loading for large datasets",
                "Data Aggregation and Resampling",
                "Aggregate data to different [timeframes](../guides/data-management.md#timeframes)",
                "Example: Convert 1m data to 5m"
            ],
            "excerpt": "Data Management Guide <!-- Keywords: OHLCV data, Zarr storage, LMDB, data fetching, scrapers, watchers, historical data, real-time data, market data Description: Comprehensive data management system ...",
            "difficulty": "advanced",
            "title": "data-management",
            "content_length": 8693,
            "url": "/guides/data-management.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "guides/execution-modes.md",
            "headings": [
                "Execution Modes Guide",
                "Quick Navigation",
                "Prerequisites",
                "Related Topics",
                "Mode Overview",
                "Mode Comparison Matrix",
                "Development Workflow",
                "Simulation Mode",
                "Basic Sim Mode Setup",
                "Create strategy in simulation mode",
                "Configure [backtest](../guides/execution-modes.md#simulation-mode) parameters",
                "Load historical data",
                "Run [backtest](../guides/execution-modes.md#simulation-mode)",
                "Analyze results",
                "Advanced Sim Configuration",
                "Comprehensive simulation setup",
                "Time range [configuration](../config.md)",
                "Capital and sizing",
                "Execution modeling",
                "Performance [optimization](../optimization.md)",
                "Load data and run",
                "Sim Mode Features",
                "Realistic Order Execution",
                "Configure realistic execution modeling",
                "Add latency simulation",
                "Performance Optimization",
                "Optimize for large backtests",
                "Enable parallel processing",
                "Walk-Forward Analysis",
                "Perform walk-forward analysis",
                "Run walk-forward analysis",
                "Sim Mode Best Practices",
                "Paper Mode",
                "Basic Paper Mode Setup",
                "Create strategy in paper mode",
                "Configure [paper trading](../guides/execution-modes.md#paper-mode)",
                "Start [paper trading](../guides/execution-modes.md#paper-mode)",
                "Advanced Paper Configuration",
                "Comprehensive paper mode setup",
                "Exchange and market [configuration](../config.md)",
                "Capital and risk management",
                "Monitoring and alerts",
                "Real-time data feeds",
                "Start with monitoring",
                "Paper Mode Features",
                "Real-Time Order Execution",
                "Market orders use real order book data",
                "Live Data Integration",
                "Set up real-time data monitoring",
                "Performance Tracking",
                "Real-time performance monitoring",
                "Paper Mode Best Practices",
                "Live Mode",
                "Basic Live Mode Setup",
                "Create live strategy with conservative settings",
                "Configure API credentials (use environment variables)",
                "Conservative initial settings",
                "Risk management",
                "Start [live trading](../guides/execution-modes.md#live-mode)",
                "Advanced Live Configuration",
                "Comprehensive live trading setup",
                "Security configuration",
                "Risk management",
                "Monitoring and alerts",
                "Timeouts and API management",
                "Start with full monitoring",
                "Live Mode Features",
                "Real-Time Risk Management",
                "Comprehensive risk monitoring",
                "Emergency Procedures",
                "Emergency stop system",
                "Automated circuit breakers",
                "Event Tracing and Analysis",
                "Access event trace for analysis",
                "Extract recent events",
                "Analyze trading performance",
                "Live Mode Best Practices",
                "Mode Transitions",
                "Sim to Paper Transition",
                "Pre-transition Validation",
                "Validate simulation results before paper mode",
                "Configuration Adjustments",
                "Prepare strategy for paper mode",
                "Paper to Live Transition",
                "Comprehensive Validation",
                "Validate paper mode performance",
                "Live Mode Preparation",
                "Prepare for live mode deployment",
                "Gradual Deployment Strategy",
                "Implement gradual capital deployment",
                "Example deployment schedule",
                "Best Practices",
                "Development Workflow",
                "Risk Management",
                "Configuration Management",
                "Manage configurations across modes",
                "Troubleshooting",
                "Common Issues by Mode",
                "Sim Mode Issues",
                "Paper Mode Issues",
                "Live Mode Issues",
                "Debugging Tools",
                "Debug mode transitions",
                "Performance comparison across modes"
            ],
            "excerpt": "Execution Modes Guide <!-- Keywords: execution modes, simulation, backtesting-mode), paper trading, live trading, mode transition, risk management Description: Comprehensive guide to Planar's three ...",
            "difficulty": "advanced",
            "title": "execution-modes",
            "content_length": 6621,
            "url": "/guides/execution-modes.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "guides/index.md",
            "headings": [
                "Development Guides",
                "Available Guides",
                "Coming Soon",
                "Getting Started",
                "See Also",
                "Next Steps"
            ],
            "excerpt": "Development Guides This section contains comprehensive guides for developing with Planar. These guides provide in-depth coverage of core concepts and practical implementation details. Available ...",
            "difficulty": "advanced",
            "title": "index",
            "content_length": 1676,
            "url": "/guides/index.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "guides/strategy-development.md",
            "headings": [
                "Strategy Development Guide",
                "Quick Navigation",
                "Prerequisites",
                "Related Topics",
                "Strategy Fundamentals",
                "Architecture Overview",
                "Core Components",
                "Strategy Type Hierarchy",
                "Dispatch System",
                "Key Dispatch Patterns",
                "Called during strategy loading (before construction)",
                "Called during strategy execution (after construction)",
                "Strategy lifecycle events",
                "Market and optimization events",
                "Exchange-Specific Dispatch",
                "Default behavior for all [exchanges](../exchanges.md)",
                "Specific behavior for Bybit",
                "Margin Trading Concepts",
                "Margin Modes",
                "Position-specific [leverage](../guides/strategy-development.md#margin-modes) updates",
                "Position Management",
                "Check position direction",
                "Access position information",
                "Position sizing with margin",
                "Risk Management Patterns",
                "Dynamic leverage based on volatility",
                "Position size limits",
                "Creating Strategies",
                "Interactive Strategy Generator",
                "Non-Interactive Strategy Creation",
                "Skip interaction by passing ask=false",
                "Or use a configuration object",
                "Manual Strategy Setup",
                "Project-Based Strategies",
                "Strategy Interface",
                "Loading a Strategy",
                "Create configuration object",
                "Load the Example strategy",
                "Strategy Type Structure",
                "Basic Strategy Module",
                "Function Signature Convention",
                "Strategy Lifecycle",
                "Essential Strategy Methods",
                "Required Methods",
                "Main execution method - called on each timestep",
                "Define tradeable markets",
                "Optional Methods",
                "Custom strategy loading",
                "Strategy reset behavior",
                "Warmup period for data requirements",
                "Advanced Dispatch Patterns",
                "Conditional Dispatch by Mode",
                "Different behavior for different execution modes",
                "Parameter-Based Dispatch",
                "Different strategies based on margin mode",
                "Advanced Examples",
                "Multi-Timeframe Strategy",
                "Portfolio Rebalancing Strategy",
                "Advanced Optimization Strategy",
                "Optimization configuration",
                "Simple Moving Average Strategy",
                "Margin Trading Strategy",
                "Best Practices",
                "Code Organization",
                "Error Handling",
                "Performance Optimization",
                "Testing and Validation",
                "Add validation in development",
                "Strategy Configuration",
                "Quick Troubleshooting",
                "Common Issues Quick Reference",
                "Development Tips",
                "Test strategy loading",
                "Test data access",
                "Test signal generation",
                "Debugging Strategies",
                "Enable Debug Logging",
                "Add to your strategy module",
                "Strategy State Inspection",
                "Inspect strategy state during development",
                "Performance Profiling",
                "Profile your strategy execution",
                "Removing Strategies",
                "Advanced Topics",
                "Dynamic Universe Management",
                "Add new asset to universe (experimental)",
                "Remove asset from universe (experimental)",
                "Custom Indicators",
                "Example: Custom [technical indicators](../guides/strategy-development.md#technical-indicators)",
                "Integration with External Libraries",
                "Example: Using external Python libraries"
            ],
            "excerpt": "Strategy Development Guide <!-- Keywords: strategy development, call! function, dispatch system-development.mddispatch-system), margin trading-development.mdmargin-trading-concepts), ...",
            "difficulty": "advanced",
            "title": "strategy-development",
            "content_length": 7247,
            "url": "/guides/strategy-development.html",
            "description": "",
            "category": "strategy-development"
        },
        {
            "path": "reference/index.md",
            "headings": [
                "Reference Documentation",
                "Sections",
                "Quick Links",
                "See Also",
                "Usage"
            ],
            "excerpt": "Reference Documentation Complete reference documentation for Planar APIs, configuration, and types. Sections - API Documentation - Complete function reference - Configuration.md) - All configuration ...",
            "difficulty": "advanced",
            "title": "index",
            "content_length": 851,
            "url": "/reference/index.html",
            "description": "",
            "category": "optimization"
        },
        {
            "path": "reference/api/index.md",
            "headings": [
                "API Reference",
                "Quick Navigation",
                "Core Trading Components",
                "Data Management",
                "Exchange Integration",
                "Analysis & Optimization",
                "Visualization & Utilities",
                "Getting Started with the API",
                "Basic Usage Pattern",
                "Load a strategy",
                "Access strategy data",
                "Work with data",
                "Common Function Categories",
                "Function Naming Conventions",
                "Error Handling",
                "Performance Considerations",
                "See Also",
                "Contributing to API Documentation"
            ],
            "excerpt": "API Reference This section provides comprehensive documentation for all Planar.jl modules and functions. Each module page includes function signatures, detailed descriptions, working code examples, ...",
            "difficulty": "advanced",
            "title": "API Reference",
            "content_length": 3088,
            "url": "/reference/api/index.html",
            "description": "Complete API reference for Planar.jl modules and functions",
            "category": "reference"
        },
        {
            "path": "reference/examples/basic-strategy.md",
            "headings": [
                "Basic Strategy Structure",
                "Overview",
                "Complete Example",
                "Example: Basic Strategy Template",
                "Description: Minimal working strategy structure",
                "Complexity: Beginner",
                "Prerequisites: Basic Planar knowledge",
                "Usage Example",
                "Load the strategy",
                "Check strategy configuration",
                "Load historical data",
                "Run in simulation mode for testing",
                "Run a simple backtest",
                "Key Components Explained",
                "1. Module Declaration",
                "2. Configuration Constants",
                "3. Parameters",
                "4. Market Definition",
                "5. Main Strategy Logic",
                "Customization Guide",
                "Adding New Parameters",
                "Add new parameter",
                "Use in strategy logic",
                "Adding More Assets",
                "Adding Technical Indicators",
                "Add to strategy logic",
                "Testing Your Strategy",
                "1. Simulation Testing",
                "Test with historical data",
                "Run backtest",
                "2. Paper Trading",
                "Test with live data but no real money",
                "3. Parameter Testing",
                "Test different parameter values",
                "Re-run tests with new parameters",
                "Common Patterns",
                "Error Handling",
                "Logging and Debugging",
                "Add informative logging",
                "Use different log levels",
                "Data Validation",
                "Always check data availability",
                "Validate prices",
                "Next Steps",
                "See Also"
            ],
            "excerpt": "Basic Strategy Structure This example demonstrates the fundamental structure of a Planar strategy. Use this as a starting template for your own strategies. Overview What this example demonstrates: - ...",
            "difficulty": "beginner",
            "title": "Basic Strategy Structure",
            "content_length": 1713,
            "url": "/reference/examples/basic-strategy.html",
            "description": "Simple strategy template and structure",
            "category": "examples"
        },
        {
            "path": "reference/examples/data-access.md",
            "headings": [
                "Data Access Examples",
                "Overview",
                "Complete Data Access Example",
                "Example: Comprehensive Data Access",
                "Description: Loading and accessing market data",
                "Complexity: Beginner",
                "Prerequisites: Basic strategy knowledge",
                "Multi-Timeframe Data Access",
                "Example: Working with Multiple Timeframes",
                "Efficient Data Loading Patterns",
                "Example: Efficient Data Loading and Caching",
                "Usage Examples",
                "Basic Usage",
                "Load and test the data access example",
                "Run once to see data access patterns",
                "Multi-Timeframe Usage",
                "Load multi-timeframe example",
                "Load data for multiple timeframes",
                "Analyze",
                "Efficient Data Usage",
                "Test efficient data patterns",
                "Run multiple times to see caching in action",
                "Common Data Access Patterns",
                "Safe Data Access",
                "Batch Data Processing",
                "Performance Tips",
                "See Also"
            ],
            "excerpt": "Data Access Examples This example demonstrates how to load, access, and work with market data in Planar strategies. Learn the essential patterns for handling OHLCV data effectively. Overview What ...",
            "difficulty": "beginner",
            "title": "Data Access Examples",
            "content_length": 1227,
            "url": "/reference/examples/data-access.html",
            "description": "Loading and accessing market data in Planar strategies",
            "category": "examples"
        },
        {
            "path": "reference/examples/index.md",
            "headings": [
                "Code Examples Library",
                "Quick Navigation",
                "By Complexity Level",
                "Beginner Examples",
                "Intermediate Examples",
                "Advanced Examples",
                "By Use Case",
                "Strategy Development",
                "Data Management",
                "Risk and Portfolio Management",
                "Exchange Integration",
                "Example Categories",
                "🚀 Quick Start Examples",
                "📊 Data Analysis Examples",
                "💰 Trading Strategy Examples",
                "⚙️ Configuration Examples",
                "🔧 Utility Examples",
                "🧪 Testing Examples",
                "How to Use These Examples",
                "1. Copy and Adapt",
                "Copy the example code",
                "Modify parameters and logic",
                "Test in simulation mode first",
                "2. Combine Examples",
                "Use data loading from one example",
                "Combine with indicator calculation from another",
                "Add risk management from a third example",
                "3. Test Thoroughly",
                "Load strategy in simulation mode",
                "Run backtest",
                "Example Template",
                "Example: [Title]",
                "Description: [What this example demonstrates]",
                "Complexity: [Beginner/Intermediate/Advanced]",
                "Prerequisites: [What you need to know first]",
                "Usage example",
                "Test and use the strategy",
                "Testing Your Examples",
                "Simulation Testing",
                "Test in simulation mode",
                "Run a quick backtest",
                "Paper Trading Testing",
                "Test with live data but no real money",
                "Start paper trading",
                "Contributing Examples",
                "Submission Guidelines",
                "1. Create your example following the template",
                "2. Test it thoroughly in simulation mode",
                "3. Add appropriate documentation",
                "4. Submit via pull request with:",
                "- Clear description of what the example demonstrates",
                "- Test results showing it works",
                "- Any special requirements or dependencies",
                "Getting Help",
                "See Also"
            ],
            "excerpt": "Code Examples Library This library provides comprehensive, tested code examples for common Planar.jl use cases. All examples are organized by complexity and use case, with complete working code that ...",
            "difficulty": "beginner",
            "title": "Code Examples Library",
            "content_length": 3222,
            "url": "/reference/examples/index.html",
            "description": "Comprehensive library of working code examples for Planar.jl",
            "category": "reference"
        },
        {
            "path": "reference/examples/simple-indicators.md",
            "headings": [
                "Simple Indicators Examples",
                "Overview",
                "Complete Indicators Example",
                "Example: Technical Indicators Implementation",
                "Description: Common technical indicators and their usage",
                "Complexity: Beginner",
                "Prerequisites: Data access knowledge",
                "Advanced Indicators Example",
                "Example: More Advanced Technical Indicators",
                "Indicator-Based Strategy Example",
                "Example: Complete Strategy Using Multiple Indicators",
                "Usage Examples",
                "Basic Indicators",
                "Test simple indicators",
                "Run analysis",
                "Advanced Indicators",
                "Test advanced indicators",
                "Complete Strategy",
                "Test indicator-based strategy",
                "Run backtest",
                "Performance Tips",
                "Common Indicator Patterns",
                "Trend Following",
                "Moving average crossover",
                "MACD confirmation",
                "Mean Reversion",
                "RSI extremes",
                "Bollinger Bands",
                "Volume Confirmation",
                "High volume confirmation",
                "See Also"
            ],
            "excerpt": "Simple Indicators Examples This example demonstrates how to calculate and use common technical indicators in Planar strategies. Learn to implement moving averages, RSI, MACD, and other essential ...",
            "difficulty": "beginner",
            "title": "Simple Indicators Examples",
            "content_length": 1322,
            "url": "/reference/examples/simple-indicators.html",
            "description": "Moving averages and basic technical indicator calculations",
            "category": "examples"
        },
        {
            "path": "resources/browse-by-topic.md",
            "headings": [
            ],
            "excerpt": "",
            "difficulty": "intermediate",
            "title": "browse-by-topic",
            "content_length": 0,
            "url": "/resources/browse-by-topic.html",
            "description": "",
            "category": "reference"
        },
        {
            "path": "resources/index.md",
            "headings": [
                "Resources",
                "Available Resources",
                "External Resources",
                "See Also",
                "Contributing"
            ],
            "excerpt": "Resources Additional resources and reference materials for Planar users. Available Resources - Glossary - Terms and concepts - Migration Guides - Version update guides - Community - Support and ...",
            "difficulty": "advanced",
            "title": "index",
            "content_length": 577,
            "url": "/resources/index.html",
            "description": "",
            "category": "exchanges"
        },
        {
            "path": "resources/search.md",
            "headings": [
                "Documentation Search",
                "Popular Searches",
                "Search Tips",
                "Browse by Category",
                "search-input {",
                "search-input:focus {"
            ],
            "excerpt": "Documentation Search <div id=\"search-container\"> <div class=\"search-box\"> <input type=\"text\" id=\"search-input\" placeholder=\"Search documentation...\" autocomplete=\"off\"> <div id=\"search-suggestions\" ...",
            "difficulty": "beginner",
            "title": "Documentation Search",
            "content_length": 3771,
            "url": "/resources/search.html",
            "description": "Search across all Planar documentation",
            "category": "resources"
        },
        {
            "path": "resources/topic-index.md",
            "headings": [
                "Topic Index",
                "📈 Margin Trading",
                "🔧 Customization",
                "📊 Data Management",
                "⚡ Optimization",
                "🚀 Getting Started",
                "🏗️ Strategy Development",
                "📈 Visualization",
                "⚙️ Configuration",
                "🔄 Execution Modes",
                "🏦 Exchanges",
                "🔧 Troubleshooting",
                "📚 Api Reference",
                "Browse by Difficulty"
            ],
            "excerpt": "Topic Index Browse documentation by topic and category. 📈 Margin Trading Difficulty: Advanced | Description: Leverage and margin trading features - Api - Overview - Config - Customizations - ...",
            "difficulty": "intermediate",
            "title": "topic-index",
            "content_length": 6172,
            "url": "/resources/topic-index.html",
            "description": "",
            "category": "reference"
        },
        {
            "path": "troubleshooting/exchange-issues.md",
            "headings": [
                "Troubleshooting: Exchange Issues",
                "Quick Diagnostics",
                "Exchange Connection Issues",
                "Unresponsive Exchange Instance",
                "Step 1: Test basic connectivity",
                "Step 2: Reset exchange instance",
                "Step 3: Adjust timeout settings",
                "Step 4: Test with different endpoints",
                "Implement connection health monitoring",
                "Use before important operations",
                "Network Connectivity Problems",
                "Test network connectivity",
                "Test connectivity",
                "Configure proxy if needed",
                "Disable SSL verification if necessary (not recommended for production)",
                "Configure custom CA certificates",
                "API Authentication Issues",
                "Invalid API Credentials",
                "Step 1: Verify credentials format in user/secrets.toml",
                "Correct format:",
                "[exchanges.binance]",
                "apiKey = \"your_api_key_here\"",
                "secret = \"your_secret_key_here\"",
                "sandbox = false  # Set to true for testnet",
                "Step 2: Test authentication",
                "Step 3: Verify API key permissions on exchange",
                "API Key Configuration Issues",
                "Check configuration file existence and format",
                "Signature and Timestamp Issues",
                "Check system time synchronization",
                "Test time synchronization",
                "Manual time adjustment if needed (Linux/macOS)",
                "Rate Limiting Issues",
                "Rate Limit Exceeded",
                "Step 1: Adjust rate limiting settings",
                "Step 2: Implement request batching",
                "Step 3: Implement exponential backoff for retries",
                "Use with API calls",
                "API Weight Management",
                "Track API weight usage",
                "Use weight tracker",
                "Example usage",
                "Trading Operation Issues",
                "Order Execution Failures",
                "Step 1: Comprehensive balance check",
                "Step 2: Validate order parameters",
                "Step 3: Safe order placement with validation",
                "Example usage",
                "Position Management Issues",
                "Comprehensive position and margin management",
                "Position tracking and management",
                "Example usage",
                "Exchange-Specific Issues",
                "Binance-Specific Problems",
                "Binance-specific configuration",
                "Check IP restrictions",
                "Coinbase-Specific Problems",
                "Coinbase Pro/Advanced Trade configuration",
                "Advanced Diagnostics",
                "Exchange Health Monitoring",
                "Comprehensive exchange health check",
                "Run health check",
                "Network Diagnostics",
                "Network diagnostic tools",
                "Run network diagnostics",
                "When to Seek Help",
                "Getting Help",
                "See Also"
            ],
            "excerpt": "Troubleshooting: Exchange Issues This guide covers problems related to exchange connectivity, API authentication, and trading operations. Quick Diagnostics 1. Test Basic Connectivity - Verify ...",
            "difficulty": "intermediate",
            "title": "Troubleshooting: Exchange Issues",
            "content_length": 3316,
            "url": "/troubleshooting/exchange-issues.html",
            "description": "Solutions for exchange connectivity and API problems",
            "category": "troubleshooting"
        },
        {
            "path": "troubleshooting/index.md",
            "headings": [
                "Troubleshooting Guide",
                "Quick Diagnostic Checklist",
                "Problem Categories",
                "[Installation Issues](installation-issues.md)",
                "[Strategy Problems](strategy-problems.md)",
                "[Performance Issues](performance-issues.md)",
                "[Exchange Issues](exchange-issues.md)",
                "Platform-Specific Quick Fixes",
                "Linux",
                "Install required system libraries",
                "Fix Docker permissions",
                "macOS",
                "Install Xcode command line tools",
                "Install required packages",
                "Windows",
                "Enable long paths (requires admin)",
                "Set execution policy",
                "Emergency Troubleshooting",
                "Error-Specific Quick Solutions",
                "Common Error Messages",
                "Getting Help",
                "Community Resources",
                "Documentation",
                "When Reporting Issues",
                "System information",
                "Package status",
                "Environment variables",
                "See Also"
            ],
            "excerpt": "Troubleshooting Guide This guide provides comprehensive solutions to common issues encountered when using Planar. Issues are organized by category with step-by-step diagnostic procedures and ...",
            "difficulty": "beginner",
            "title": "Troubleshooting Guide",
            "content_length": 4284,
            "url": "/troubleshooting/index.html",
            "description": "Comprehensive solutions to common Planar issues",
            "category": "troubleshooting"
        },
        {
            "path": "troubleshooting/installation-issues.md",
            "headings": [
                "Troubleshooting: Installation Issues",
                "Quick Diagnostics",
                "Common Installation Issues",
                "Dependency Conflicts",
                "Step 1: Resolve all dependencies",
                "Step 2: If conflicts persist, try manual resolution",
                "Step 3: For persistent issues, clear package cache",
                "REPL Startup Issues",
                "Preferred: Start Julia with project directly",
                "Alternative: For interactive features",
                "Check current project status",
                "Check environment variables",
                "Verify project file exists",
                "Python Integration Setup",
                "Step 1: Clean and rebuild Python environment",
                "Step 2: Verify Python environment",
                "Step 3: Manual package installation if needed",
                "LMDB Installation Issues",
                "Ubuntu/Debian",
                "macOS",
                "Windows",
                "Use vcpkg or conda to install LMDB",
                "Add to your strategy Project.toml:",
                "Platform-Specific Installation Issues",
                "Linux Issues",
                "Install required development packages",
                "For plotting backends",
                "Fix Docker permissions",
                "Logout and login again",
                "Fix file permissions",
                "macOS Issues",
                "Install if missing",
                "Verify installation",
                "Install required packages",
                "Windows Issues",
                "Enable script execution",
                "Enable long paths (requires admin)",
                "Docker Installation Issues",
                "Container Startup Failures",
                "Test basic Docker functionality",
                "Check Planar container",
                "Fix volume mounting (Linux/macOS)",
                "Windows volume mounting",
                "Image Pull Issues",
                "Use specific image tags",
                "Check available tags",
                "Alternative: Build locally",
                "Environment Configuration Issues",
                "direnv Problems",
                "Install direnv if missing",
                "Ubuntu/Debian: sudo apt-get install direnv",
                "macOS: brew install direnv",
                "Windows: Use manual environment variable setup",
                "Allow .envrc file",
                "Check direnv status",
                "Reload configuration",
                "Julia Environment Variables",
                "Essential variables",
                "Optional optimization variables",
                "Debug variables (use sparingly)",
                "Advanced Diagnostics",
                "Dependency Tree Analysis",
                "Check dependency conflicts",
                "Detailed dependency information",
                "Check for outdated packages",
                "Precompilation Debugging",
                "Force precompilation with verbose output",
                "Check precompilation cache",
                "Clear specific module cache",
                "System Information Collection",
                "Collect system information for bug reports",
                "Julia configuration",
                "Package status",
                "Environment variables",
                "When to Seek Help",
                "Getting Help",
                "See Also"
            ],
            "excerpt": "Troubleshooting: Installation Issues This guide covers common problems encountered during Planar installation and initial setup. Quick Diagnostics Before diving into specific issues, try these steps: ...",
            "difficulty": "beginner",
            "title": "Troubleshooting: Installation Issues",
            "content_length": 3312,
            "url": "/troubleshooting/installation-issues.html",
            "description": "Solutions for installation and setup problems",
            "category": "troubleshooting"
        },
        {
            "path": "troubleshooting/performance-issues.md",
            "headings": [
                "Troubleshooting: Performance Issues",
                "Quick Diagnostics",
                "Strategy Execution Performance",
                "Slow Backtesting",
                "Profile strategy execution",
                "View results",
                "Focus on specific functions",
                "Bad: Repeated data lookups",
                "Good: Vectorized operations and pre-allocation",
                "Bad: Using DataFrames for simple operations",
                "Good: Use arrays and batch operations",
                "Bad: Creates temporary objects in loops",
                "Good: Reuse objects and avoid temporaries",
                "Memory Usage Issues",
                "Monitor memory usage during execution",
                "Use with strategy execution",
                "Detailed allocation tracking",
                "Bad: Creates copies of data",
                "Good: Uses views to avoid copying",
                "Use mutable structs to reuse objects",
                "Data-Related Performance Issues",
                "Slow Data Loading",
                "Bad: Loading all data at once",
                "Good: Progressive loading with caching",
                "Optimize LMDB settings",
                "Use batch operations for better performance",
                "Implement data compression for storage",
                "Configure optimal chunk sizes for your access patterns",
                "Database Performance Issues",
                "Increase database size proactively",
                "Set appropriate size based on data volume",
                "Monitor and adjust as needed",
                "Bad: Individual save operations",
                "Good: Batch operations",
                "Implement proper locking for concurrent access",
                "Use thread-safe operations",
                "Optimization and Backtesting Performance",
                "Slow Parameter Optimization",
                "Bad: Too fine-grained parameter space",
                "Total combinations: 91^3 = 753,571",
                "Good: Coarse-to-fine optimization",
                "Add worker processes",
                "Parallel parameter evaluation",
                "Use efficient optimization algorithms",
                "Implement early stopping",
                "System-Level Performance Issues",
                "CPU Bottlenecks",
                "Parallelize independent operations",
                "Use SIMD for vectorized operations",
                "Use more efficient algorithms",
                "Cache expensive calculations",
                "I/O Performance Issues",
                "Asynchronous data fetching",
                "Batch file operations",
                "Advanced Performance Monitoring",
                "Comprehensive Performance Profiling",
                "Complete performance analysis",
                "Use for strategy analysis",
                "Performance Monitoring Dashboard",
                "Real-time performance monitoring",
                "Use with strategy execution",
                "When to Seek Help",
                "Getting Help",
                "See Also"
            ],
            "excerpt": "Troubleshooting: Performance Issues This guide covers performance problems and optimization techniques for Planar strategies and operations. Quick Diagnostics 1. Profile Execution - Identify ...",
            "difficulty": "advanced",
            "title": "Troubleshooting: Performance Issues",
            "content_length": 3183,
            "url": "/troubleshooting/performance-issues.html",
            "description": "Solutions for performance and optimization problems",
            "category": "troubleshooting"
        },
        {
            "path": "troubleshooting/strategy-problems.md",
            "headings": [
                "Troubleshooting: Strategy Development Issues",
                "Quick Diagnostics",
                "Strategy Loading and Compilation Issues",
                "Strategy Not Found",
                "Check strategy configuration in user/planar.toml",
                "or",
                "Verify file structure",
                "For path-based strategies:",
                "For package-based strategies:",
                "Test strategy loading",
                "Compilation Errors",
                "Check for common syntax issues:",
                "1. Missing module declaration",
                "... strategy code ...",
                "2. Incorrect function signatures",
                "Bad: Missing required parameters",
                "Good: Proper signature matching interface",
                "3. Missing dependencies in Project.toml",
                "Add all required packages",
                "Enable detailed compilation logging",
                "Test individual components",
                "Module Interface Issues",
                "Ensure your strategy implements required interface:",
                "Required: Strategy initialization",
                "Required: Signal generation",
                "Required: Position sizing",
                "Optional: Custom risk management",
                "Strategy Execution Issues",
                "Runtime Errors During Execution",
                "Step 1: Enable detailed logging",
                "Step 2: Test strategy components individually",
                "Test data access",
                "Test signal generation",
                "Step 3: Use simulation mode for debugging",
                "Data Access Issues",
                "Step 1: Verify data availability",
                "Step 2: Fetch missing data",
                "Step 3: Validate data quality",
                "Signal Generation Problems",
                "Debug signal generation step by step",
                "Test with your strategy",
                "Order Execution Issues",
                "Orders Not Executing",
                "Step 1: Check account balance",
                "Step 2: Validate order parameters",
                "Step 3: Test order execution in paper mode first",
                "Position Management Errors",
                "Debug position management",
                "Test position management",
                "Performance and Optimization Issues",
                "Slow Strategy Execution",
                "Step 1: Profile strategy execution",
                "Step 2: Benchmark specific functions",
                "Step 3: Optimize common bottlenecks",
                "Bad: Inefficient data access",
                "Good: Optimized version",
                "Memory Usage Issues",
                "Monitor memory usage",
                "Use with strategy execution",
                "Optimize memory usage",
                "Bad: Creates many temporary objects",
                "Good: Reuse objects and use views",
                "Debugging Strategies",
                "VSCode Debugging Setup",
                "Logging and Diagnostics",
                "Create custom logger with different levels",
                "Use in strategy",
                "Enable debug logging for specific modules",
                "When to Seek Help",
                "Getting Help",
                "See Also"
            ],
            "excerpt": "Troubleshooting: Strategy Development Issues This guide covers common problems encountered during strategy development, testing, and execution. Quick Diagnostics 1. Check Strategy Loading - Verify ...",
            "difficulty": "intermediate",
            "title": "Troubleshooting: Strategy Development Issues",
            "content_length": 3377,
            "url": "/troubleshooting/strategy-problems.html",
            "description": "Solutions for strategy development and execution problems",
            "category": "troubleshooting"
        },
        {
            "path": "watchers/watchers.md",
            "headings": [
                "Watchers",
                "User Interface",
                "See Also",
                "Implementation Interface",
                "Required",
                "Optional",
                "API"
            ],
            "excerpt": "Watchers A type serves as an interface over a data feed. Implementations are available for certain third-party APIs, exchange.md) OHLCV (Open, High, Low, Close, Volume) data construction, and order ...",
            "difficulty": "advanced",
            "title": "watchers",
            "content_length": 2990,
            "url": "/watchers/watchers.html",
            "description": "",
            "category": "data-management"
        },
        {
            "path": "watchers/apis/coingecko.md",
            "headings": [
                "CoinGecko",
                "API",
                "See Also"
            ],
            "excerpt": "CoinGecko API See Also - Exchanges - Exchange integration and configuration - Config - Exchange integration and configuration",
            "difficulty": "intermediate",
            "title": "coingecko",
            "content_length": 125,
            "url": "/watchers/apis/coingecko.html",
            "description": "",
            "category": "exchanges"
        },
        {
            "path": "watchers/apis/coinmarketcap.md",
            "headings": [
                "CoinMarketCap",
                "API",
                "See Also"
            ],
            "excerpt": "CoinMarketCap API See Also - Exchanges - Exchange integration and configuration - Config - Exchange integration and configuration",
            "difficulty": "intermediate",
            "title": "coinmarketcap",
            "content_length": 129,
            "url": "/watchers/apis/coinmarketcap.html",
            "description": "",
            "category": "exchanges"
        },
        {
            "path": "watchers/apis/coinpaprika.md",
            "headings": [
                "CoinPaprika",
                "API",
                "See Also"
            ],
            "excerpt": "CoinPaprika API See Also - Exchanges - Exchange integration and configuration - Config - Exchange integration and configuration",
            "difficulty": "intermediate",
            "title": "coinpaprika",
            "content_length": 127,
            "url": "/watchers/apis/coinpaprika.html",
            "description": "",
            "category": "exchanges"
        }
    ],
    "difficulties": [
        "advanced",
        "beginner",
        "intermediate"
    ],
    "categories": [
        "api-reference",
        "configuration",
        "data-management",
        "examples",
        "exchanges",
        "getting-started",
        "optimization",
        "reference",
        "resources",
        "strategy-development",
        "troubleshooting",
        "visualization"
    ],
    "generated_at": "2025-10-04T15:56:54.242"
}
